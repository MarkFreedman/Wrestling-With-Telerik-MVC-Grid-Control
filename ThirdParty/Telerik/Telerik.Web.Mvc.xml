<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telerik.Web.Mvc</name>
    </assembly>
    <members>
        <member name="T:Telerik.Web.Mvc.Extensions.StructExtensions">
            <summary>
            Contains the extension methods of <see cref="!:struct"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.StructExtensions.AsNullable``1(``0)">
            <summary>
            Create Nullable instance of the passed <see cref="!:struct"/>.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.Extensions.HttpRequestBaseExtensions">
            <summary>
            Contains extension methods of <see cref="T:System.Web.HttpRequestBase"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.HttpRequestBaseExtensions.ApplicationRoot(System.Web.HttpRequestBase)">
            <summary>
            Get the Application root path.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.HttpRequestBaseExtensions.CanCompress(System.Web.HttpRequestBase)">
            <summary>
            Determines whether this instance can compress the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            	<c>true</c> if this instance can compress the specified instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.DynamicClass.ToString">
            <exclude/>
            <excludeToc/>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.DynamicProperty.#ctor(System.String,System.Type)">
            <exclude/>
            <excludeToc/>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.Implementation.DynamicProperty.Name">
            <exclude/>
            <excludeToc/>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.Implementation.DynamicProperty.Type">
            <exclude/>
            <excludeToc/>
        </member>
        <member name="T:Telerik.Web.Mvc.Infrastructure.IWebAssetLocator">
            <summary>
            Basic building block to locate the correct virtual path.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.IWebAssetLocator.Locate(System.String,System.String)">
            <summary>
            Returns the correct virtual path based upon the debug mode and version.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.Resources.EditorLocalization">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.Bold">
            <summary>
              Looks up a localized string similar to Bold.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.CreateLink">
            <summary>
              Looks up a localized string similar to Insert hyperlink.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.DeleteFile">
            <summary>
              Looks up a localized string similar to Are you sure you want to delete &quot;{0}&quot;?.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.DirectoryNotFound">
            <summary>
              Looks up a localized string similar to A directory with this name was not found..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.EmptyFolder">
            <summary>
              Looks up a localized string similar to Empty Folder.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.FontName">
            <summary>
              Looks up a localized string similar to Select font family.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.FontNameInherit">
            <summary>
              Looks up a localized string similar to (inherited font).
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.FontSize">
            <summary>
              Looks up a localized string similar to Select font size.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.FontSizeInherit">
            <summary>
              Looks up a localized string similar to (inherited size).
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.FormatBlock">
            <summary>
              Looks up a localized string similar to Select block type.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.Indent">
            <summary>
              Looks up a localized string similar to Indent.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.InsertHtml">
            <summary>
              Looks up a localized string similar to Insert HTML.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.InsertImage">
            <summary>
              Looks up a localized string similar to Insert image.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.InsertOrderedList">
            <summary>
              Looks up a localized string similar to Insert ordered list.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.InsertUnorderedList">
            <summary>
              Looks up a localized string similar to Insert unordered list.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.InvalidFileType">
            <summary>
              Looks up a localized string similar to The selected file \&quot;{0}\&quot; is not valid. Supported file types are {1}..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.Italic">
            <summary>
              Looks up a localized string similar to Italic.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.JustifyCenter">
            <summary>
              Looks up a localized string similar to Center text.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.JustifyFull">
            <summary>
              Looks up a localized string similar to Justify.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.JustifyLeft">
            <summary>
              Looks up a localized string similar to Align text left.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.JustifyRight">
            <summary>
              Looks up a localized string similar to Align text right.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.OrderBy">
            <summary>
              Looks up a localized string similar to Arrange by:.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.OrderByName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.OrderBySize">
            <summary>
              Looks up a localized string similar to Size.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.Outdent">
            <summary>
              Looks up a localized string similar to Outdent.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.OverwriteFile">
            <summary>
              Looks up a localized string similar to &apos;A file with name &quot;{0}&quot; already exists in the current directory. Do you want to overwrite it?.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.Strikethrough">
            <summary>
              Looks up a localized string similar to Strikethrough.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.Style">
            <summary>
              Looks up a localized string similar to Styles.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.Underline">
            <summary>
              Looks up a localized string similar to Underline.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.Unlink">
            <summary>
              Looks up a localized string similar to Remove hyperlink.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.EditorLocalization.UploadFile">
            <summary>
              Looks up a localized string similar to Upload.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ViewComponentBase">
            <summary>
            View component base class.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IScriptableComponent">
            <summary>
            Defines the basic building block of scriptable component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IScriptableComponent.WriteInitializationScript(System.IO.TextWriter)">
            <summary>
            Writes the initialization script.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IScriptableComponent.WriteCleanupScript(System.IO.TextWriter)">
            <summary>
            Writes the cleanup script.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IScriptableComponent.AssetKey">
            <summary>
            Gets or sets the asset key.
            </summary>
            <value>The asset key.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IScriptableComponent.ScriptFilesPath">
            <summary>
            Gets or sets the script files path. Path must be a virtual path.
            </summary>
            <value>The script files path.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IScriptableComponent.ScriptFileNames">
            <summary>
            Gets or sets the script file names.
            </summary>
            <value>The script file names.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IScriptableComponent.ClientSideObjectWriterFactory">
            <summary>
            Gets the client side object writer factory.
            </summary>
            <value>The client side object writer factory.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IHtmlAttributesContainer">
            <summary>
            Defines whether one navigation item can have content output immediately
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IHtmlAttributesContainer.HtmlAttributes">
            <summary>
            The HtmlAttributes applied to objects which can have child items
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentBase.#ctor(System.Web.Mvc.ViewContext,Telerik.Web.Mvc.UI.IClientSideObjectWriterFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ViewComponentBase"/> class.
            </summary>
            <param name="viewContext">The view context.</param>
            <param name="clientSideObjectWriterFactory">The client side object writer factory.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentBase.Render">
            <summary>
            Renders the component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentBase.WriteInitializationScript(System.IO.TextWriter)">
            <summary>
            Writes the initialization script.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentBase.WriteCleanupScript(System.IO.TextWriter)">
            <summary>
            Writes the cleanup script.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentBase.WriteHtml(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the HTML.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ViewComponentBase.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ViewComponentBase.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ViewComponentBase.HtmlAttributes">
            <summary>
            Gets the HTML attributes.
            </summary>
            <value>The HTML attributes.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ViewComponentBase.AssetKey">
            <summary>
            Gets or sets the asset key.
            </summary>
            <value>The asset key.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ViewComponentBase.ScriptFilesPath">
            <summary>
            Gets or sets the script files path. Path must be a virtual path.
            </summary>
            <value>The script files path.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ViewComponentBase.ScriptFileNames">
            <summary>
            Gets or sets the script file names.
            </summary>
            <value>The script file names.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ViewComponentBase.ClientSideObjectWriterFactory">
            <summary>
            Gets the client side object writer factory.
            </summary>
            <value>The client side object writer factory.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ViewComponentBase.ViewContext">
            <summary>
            Gets or sets the view context to rendering a view.
            </summary>
            <value>The view context.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.AutoComplete"/> component.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2">
            <summary>
            View component Builder base class.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.IHideObjectMembers">
            <summary>
            Helper interface used to hide the base <see cref="T:System.Object"/> 
            members from the fluent API to make it much cleaner 
            in Visual Studio intellisense.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.IHideObjectMembers.Equals(System.Object)">
            <summary>
            Equalses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.IHideObjectMembers.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.IHideObjectMembers.GetType">
            <summary>
            Gets the type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.IHideObjectMembers.ToString">
            <summary>
            Toes the string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2"/> class.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2.op_Implicit(Telerik.Web.Mvc.UI.ViewComponentBuilderBase{`0,`1})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2"/> to TViewComponent.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2.ToComponent">
            <summary>
            Returns the internal view component.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2.Name(System.String)">
            <summary>
            Sets the name of the component.
            </summary>
            <param name="componentName">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2.AssetKey(System.String)">
            <summary>
            Sets the web asset key for the component.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2.ScriptFilesPath(System.String)">
            <summary>
            Sets the Scripts files path.. Path must be a virtual path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2.ScriptFileNames(System.String[])">
            <summary>
            Sets the Script file names.
            </summary>
            <param name="names">The names.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2.HtmlAttributes(System.Object)">
            <summary>
            Sets the HTML attributes.
            </summary>
            <param name="attributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2.HtmlAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the HTML attributes.
            </summary>
            <param name="attributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2.Render">
            <summary>
            Renders the component.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ViewComponentBuilderBase`2.Component">
            <summary>
            Gets the view component.
            </summary>
            <value>The component.</value>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBuilder.#ctor(Telerik.Web.Mvc.UI.AutoComplete)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBuilder"/> class.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBuilder.AutoFill(System.Boolean)">
            <summary>
            Use it to enable filling the first matched item text.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().AutoComplete()
                        .Name("AutoComplete")
                        .AutoFill(true)
            %&gt;
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBuilder.BindTo(System.Collections.Generic.IEnumerable{System.String})" -->
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBuilder.DataBinding(System.Action{Telerik.Web.Mvc.UI.Fluent.AutoCompleteDataBindingConfigurationBuilder})">
            <summary>
            Use it to configure Data binding.
            </summary>
            <param name="configurator">Action that configures the data binding options.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().AutoComplete()
                        .Name("AutoComplete")
                        .DataBinding(dataBinding => dataBinding
                           .Ajax().Select("_AjaxLoading", "ComboBox")
                        );
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBuilder.ClientEvents(System.Action{Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder})">
            <summary>
            Configures the client-side events.
            </summary>
            <param name="clientEventsAction">The client events action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .ClientEvents(events =>
                            events.OnLoad("onLoad")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBuilder.Effects(System.Action{Telerik.Web.Mvc.UI.EffectsBuilder})">
            <summary>
            Configures the effects of the AutoComplete.
            </summary>
            <param name="effectsAction">The action which configures the effects.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().AutoComplete()
                       .Name("AutoComplete")
                       .Effects(fx =>
                       {
            	            fx.Slide()
            				  .OpenDuration(AnimationDuration.Normal)
            				  .CloseDuration(AnimationDuration.Normal);
                       })
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBuilder.Filterable(System.Action{Telerik.Web.Mvc.UI.Fluent.AutoCompleteFilterSettingsBuilder})">
            <summary>
            Use it to configure filtering settings.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBox()
                        .Name("ComboBox")
                        .Filterable(filtering => filtering.Enabled(true)
                                                          .FilterMode(AutoCompleteFilterMode.Contains));
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBuilder.Multiple">
            <summary>
            Use it to enable multiple values.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().AutoComplete()
                        .Name("AutoComplete")
                        .Multiple();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBuilder.Multiple(System.Action{Telerik.Web.Mvc.UI.Fluent.AutoCompleteMultipleValuesSettingsBuilder})">
            <summary>
            Use it to configure autocompleting multiple values.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().AutoComplete()
                        .Name("AutoComplete")
                        .Multiple(multi => multi.Enabled(true)
                                                .Separator(" "));
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBuilder.HighlightFirstMatch(System.Boolean)">
            <summary>
            Use it to enable highlighting of first matched item.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().AutoComplete()
                        .Name("AutoComplete")
                        .HighlightFirstMatch(true)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBuilder.Enable(System.Boolean)">
            <summary>
            Enables or disables the autocomplete.
            </summary>
            <param name="allowSpinner"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBuilder.Encode(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBuilder.Value(System.String)" -->
        <member name="T:Telerik.Web.Mvc.UI.Fluent.AutoCompleteMultipleValuesSettingsBuilder">
            <summary>
            Defines the fluent interface for building <see cref="T:Telerik.Web.Mvc.UI.Fluent.AutoCompleteMultipleValuesSettingsBuilder"/>
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteMultipleValuesSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.AutoCompleteMultipleValuesSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.AutoCompleteMultipleValuesSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteMultipleValuesSettingsBuilder.Enabled(System.Boolean)">
            <summary>
            Enable or disable autocompleting multiple values into a single field
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().AutoComplete()
                        .Name("AutoComplete")
                        .Multiple(multi => 
                        {
                            multi.Enabled((bool)ViewData["multiple"]);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteMultipleValuesSettingsBuilder.Separator(System.String)">
            <summary>
            Set multiple values separator.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().AutoComplete()
                        .Name("AutoComplete")
                        .Multiple(multi => 
                        {
                            multi.Separator(", ");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartAxisLabels">
            <summary>
            Represents the options of the axis labels
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartLabels">
            <summary>
            Represents the options of the chart labels
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IChartLabels">
            <summary>
            Defines a generic Chart labels
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IChartLabels.CreateSerializer">
            <summary>
            Gets the axis serializer.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartLabels.Font">
            <summary>
            Gets or sets the label font.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartLabels.Visible">
            <summary>
            Gets or sets a value indicating if the label is visible
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartLabels.Background">
            <summary>
            Gets or sets the label background.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartLabels.Border">
            <summary>
            Gets or sets the label border.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartLabels.Margin">
            <summary>
            Gets or sets the label margin.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartLabels.Padding">
            <summary>
            Gets or sets the label padding.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartLabels.Color">
            <summary>
            Gets or sets the label color.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartLabels.Format">
            <summary>
            Gets or sets the label format.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartLabels.Template">
            <summary>
            Gets or sets the label template.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartLabels.Opacity">
            <summary>
            Gets or sets the label opacity.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartLabels.Rotation">
            <summary>
            Gets or sets the label rotation.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartLabels.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartLabels"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartLabels.CreateSerializer">
            <summary>
            Creates a serializer
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLabels.Font">
            <summary>
            Gets or sets the label font.
            </summary>
            <value>
            Specify a font in CSS format. For example "12px Arial,Helvetica,sans-serif".
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLabels.Visible">
            <summary>
            Gets or sets a value indicating if the label is visible
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLabels.Background">
            <summary>
            Gets or sets the label background.
            </summary>
            <value>
            The label background.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLabels.Border">
            <summary>
            Gets or sets the label border.
            </summary>
            <value>
            The label border.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLabels.Margin">
            <summary>
            Gets or sets the label margin.
            </summary>
            <value>
            The label margin.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLabels.Padding">
            <summary>
            Gets or sets the label padding.
            </summary>
            <value>
            The label padding.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLabels.Color">
            <summary>
            Gets or sets the label color.
            </summary>
            <value>
            The label color.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLabels.Format">
            <summary>
            Gets or sets the label format.
            </summary>
            <value>
            The label format.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLabels.Template">
            <summary>
            Gets or sets the label template.
            </summary>
            <value>
            The label template.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLabels.Opacity">
            <summary>
            Gets or sets the label opacity.
            </summary>
            <value>
            The label opacity.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLabels.Rotation">
            <summary>
            Gets or sets the label opacity.
            </summary>
            <value>
            The label opacity.
            </value>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartAxisLabels.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartAxisLabels"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartAxisLabels.CreateSerializer">
            <summary>
            Creates a serializer
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartCategoryAxis`1">
            <summary>
            Represents a category axis in the <see cref="T:Telerik.Web.Mvc.UI.Chart`1"/> component
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartAxisBase`1">
            <summary>
            Represents a chart axis
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IChartAxis">
            <summary>
            Defines a generic Chart axis
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IChartAxis.CreateSerializer">
            <summary>
            Gets the axis serializer.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartAxis.MinorTickSize">
            <summary>
            Gets or sets the minor tick size.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartAxis.MajorTickSize">
            <summary>
            Gets or sets the major tick size.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartAxis.MajorTickType">
            <summary>
            The major tick type.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartAxis.MinorTickType">
            <summary>
            The minor tick type.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartAxis.MajorGridLines">
            <summary>
            The major grid lines configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartAxis.MinorGridLines">
            <summary>
            The minor grid lines configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartAxis.Line">
            <summary>
            The axis line configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartAxis.AxisCrossingValue">
            <summary>
            The value at which the first perpendicular axis crosses this axis
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartAxis.Labels">
            <summary>
            The axis labels
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartAxis.Orientation">
            <summary>
            The axis orientation
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartAxisBase`1.#ctor(Telerik.Web.Mvc.UI.Chart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartAxisBase`1"/> class.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartAxisBase`1.CreateSerializer">
            <summary>
            Gets the axis serializer.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartAxisBase`1.Chart">
            <summary>
            Gets or sets the chart.
            </summary>
            <value>The chart.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartAxisBase`1.MinorTickSize">
            <summary>
            Gets or sets the minor tick size. The default is 3.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartAxisBase`1.MajorTickSize">
            <summary>
            Gets or sets the major tick size. The default is 4.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartAxisBase`1.MajorTickType">
            <summary>
            The major tick type. The default is <see cref="F:Telerik.Web.Mvc.UI.ChartAxisTickType.Outside"/>.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartAxisBase`1.MinorTickType">
            <summary>
            The minor tick type. The default is <see cref="F:Telerik.Web.Mvc.UI.ChartAxisTickType.None"/>.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartAxisBase`1.MajorGridLines">
            <summary>
            The major grid lines configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartAxisBase`1.MinorGridLines">
            <summary>
            The minor grid lines configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartAxisBase`1.Line">
            <summary>
            The axis line configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartAxisBase`1.AxisCrossingValue">
            <summary>
            The value at which the first perpendicular axis crosses this axis
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartAxisBase`1.Labels">
            <summary>
            The axis labels
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartAxisBase`1.Orientation">
            <summary>
            The axis orientation
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IChartCategoryAxis">
            <summary>
            Represents a category axis
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartCategoryAxis.Categories">
            <summary>
            The categories displayed on the axis
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartCategoryAxis.Member">
            <summary>
            The Model member used to populate the <see cref="P:Telerik.Web.Mvc.UI.IChartCategoryAxis.Categories"/>
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartCategoryAxis`1.#ctor(Telerik.Web.Mvc.UI.Chart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartCategoryAxis`1"/> class.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartCategoryAxis`1.CreateSerializer">
            <summary>
            Gets the axis serializer.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartCategoryAxis`1.Categories">
            <summary>
            The categories displayed on the axis
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartCategoryAxis`1.Member">
            <summary>
            Gets the member name to be used as category.
            </summary>
            <value>The member.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartNumericAxis`1">
            <summary>
            Represents a numeric axis in the <see cref="T:Telerik.Web.Mvc.UI.Chart`1"/> component
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IChartNumericAxis">
            <summary>
            Represents a numeric axis
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IChartValueAxis">
            <summary>
            Represents a generic value axis
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartNumericAxis.Min">
            <summary>
            The axis minimum value
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartNumericAxis.Max">
            <summary>
            The axis maximum value
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartNumericAxis.MajorUnit">
            <summary>
            The interval between major divisions
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartNumericAxis.Format">
            <summary>
            The axis label format
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartNumericAxis`1.#ctor(Telerik.Web.Mvc.UI.Chart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartNumericAxis`1"/> class.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartNumericAxis`1.CreateSerializer">
            <summary>
            Gets the axis serializer.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartNumericAxis`1.Min">
            <summary>
            The minimum axis value.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartNumericAxis`1.Max">
            <summary>
            The axis maximum value.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartNumericAxis`1.MajorUnit">
            <summary>
            The interval between major divisions
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartNumericAxis`1.Format">
            <summary>
            The axis label format
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartAxisDefaults`1">
            <summary>
            Represents a category axis in the <see cref="T:Telerik.Web.Mvc.UI.Chart`1"/> component
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IChartAxisDefaults">
            <summary>
            Represents a axis defaults.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartAxisDefaults`1.#ctor(Telerik.Web.Mvc.UI.Chart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartCategoryAxis`1"/> class.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartAxisDefaults`1.CreateSerializer">
            <summary>
            Gets the axis serializer.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Chart`1">
            <summary>
            Telerik Chart for ASP.NET MVC is a view component for rendering charts.
            Features:
            <list type="bullet">
                <item>Bar Chart</item>
                <item>Column Chart</item>
            </list>
            For more information, see the online documentation.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IChart">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChart.UrlGenerator">
            <summary>
            The component UrlGenerator
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChart.ViewContext">
            <summary>
            The component view context
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Chart`1.#ctor(System.Web.Mvc.ViewContext,Telerik.Web.Mvc.UI.IClientSideObjectWriterFactory,Telerik.Web.Mvc.IUrlGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Chart`1"/> class.
            </summary>
            <param name="viewContext">The view context.</param>
            <param name="clientSideObjectWriterFactory">The client side object writer factory.</param>
            <param name="urlGenerator">The URL Generator.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Chart`1.WriteInitializationScript(System.IO.TextWriter)">
            <summary>
            Writes the initialization script.
            </summary>
            <param name="writer">The writer object.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Chart`1.WriteHtml(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the Chart HTML.
            </summary>
            <param name="writer">The writer object.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Chart`1.DataSource">
            <summary>
            Gets or sets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Chart`1.ClientEvents">
            <summary>
            Represents the client-side event handlers for the component
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Chart`1.UrlGenerator">
            <summary>
            Gets or sets the URL generator.
            </summary>
            <value>The URL generator.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Chart`1.ChartArea">
            <summary>
            Gets or sets the Chart area.
            </summary>
            <value>
            The Chart area.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Chart`1.PlotArea">
            <summary>
            Gets or sets the Plot area.
            </summary>
            <value>
            The Plot area.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Chart`1.Theme">
            <summary>
            Gets or sets the Chart theme.
            </summary>
            <value>
            The Chart theme.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Chart`1.Title">
            <summary>
            Gets or sets the Chart title.
            </summary>
            <value>
            The Chart title.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Chart`1.Legend">
            <summary>
            Gets or sets the Chart legend.
            </summary>
            <value>
            The Chart legend.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Chart`1.Transitions">
            <summary>
            Gets or sets the Chart transitions.
            </summary>
            <value>
            The Chart Transitions.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Chart`1.Series">
            <summary>
            Gets the chart series.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Chart`1.SeriesDefaults">
            <summary>
            Gets the default settings for all series.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Chart`1.CategoryAxis">
            <summary>
            Configuration for the default category axis (if any)
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Chart`1.ValueAxis">
            <summary>
            Configuration for the default value axis
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Chart`1.XAxis">
            <summary>
            Configuration for the default X axis in scatter charts
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Chart`1.YAxis">
            <summary>
            Configuration for the default Y axis in scatter charts
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Chart`1.AxisDefaults">
            <summary>
            Configuration for the default axis 
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Chart`1.DataBinding">
            <summary>
            Gets the data binding configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Chart`1.SeriesColors">
            <summary>
            Gets or sets the series colors.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Chart`1.Tooltip">
            <summary>
            Gets or sets the data point tooltip options
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartClientEvents">
            <summary>
            Represents the client-side events of the <see cref="T:Telerik.Web.Mvc.UI.Chart`1"/> component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartClientEvents.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartClientEvents"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartClientEvents.SerializeTo(Telerik.Web.Mvc.UI.IClientSideObjectWriter)">
            <summary>
            Serializes the client-side events.
            </summary>
            <param name="writer">The writer object to serialize to.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartClientEvents.OnLoad">
            <summary>
            Defines the Load client-side event handler
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartClientEvents.OnDataBound">
            <summary>
            Defines the DataBound client-side event handler
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartClientEvents.OnSeriesClick">
            <summary>
            Defines the SeriesClick client-side event handler
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartTitle">
            <summary>
            Represents the chart title
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartTitle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartTitle"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartTitle.CreateSerializer">
            <summary>
            Creates a serializer
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartTitle.Text">
            <summary>
            Gets or sets the title text
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartTitle.Font">
            <summary>
            Gets or sets the title font.
            </summary>
            <value>
            Specify a font in CSS format. For example "16px Arial,Helvetica,sans-serif".
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartTitle.Position">
            <summary>
            Gets or sets the title position.
            </summary>
            <remarks>
            The default value is <see cref="F:Telerik.Web.Mvc.UI.ChartTitlePosition.Top"/>
            </remarks>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartTitle.Align">
            <summary>
            Gets or sets the title text alignment.
            </summary>
            <remarks>
            The default value is <see cref="F:Telerik.Web.Mvc.UI.ChartTextAlignment.Center"/>
            </remarks>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartTitle.Visible">
            <summary>
            Gets or sets a value indicating if the title is visible
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartTitle.Margin">
            <summary>
            Gets or sets the title margin
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartTitle.Background">
            <summary>
            Gets or sets the title background color
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartTitle.Padding">
            <summary>
            Gets or sets the title padding
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartTitle.Border">
            <summary>
            Gets or sets the legend border
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartLegend">
            <summary>
            Represents the chart legend
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartLegend.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartLegend"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartLegend.CreateSerializer">
            <summary>
            Creates a serializer
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLegend.Font">
            <summary>
            Gets or sets the legend font.
            </summary>
            <value>
            Specify a font in CSS format. For example "16px Arial,Helvetica,sans-serif".
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLegend.Color">
            <summary>
            Gets or sets the legend labels color.
            </summary>
            <value>
            Specify the color of the labels.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLegend.Position">
            <summary>
            Gets or sets the legend position.
            </summary>
            <remarks>
            The default value is <see cref="F:Telerik.Web.Mvc.UI.ChartLegendPosition.Right"/>
            </remarks>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLegend.OffsetX">
            <summary>
            Gets or sets the legend X-offset from its position.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLegend.OffsetY">
            <summary>
            Gets or sets the legend Y-offset from its position.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLegend.Visible">
            <summary>
            Gets or sets a value indicating if the legend is visible
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLegend.Margin">
            <summary>
            Gets or sets the legend margin
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLegend.Padding">
            <summary>
            Gets or sets the legend margin
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLegend.Background">
            <summary>
            Gets or sets the legend background color
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLegend.Border">
            <summary>
            Gets or sets the legend border
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartSpacing">
            <summary>
            Represents chart element spacing
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartSpacing.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartSpacing"/> class.
            </summary>
            <param name="margin">The spacing to be applied in all directions.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartSpacing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartSpacing"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartSpacing.CreateSerializer">
            <summary>
            Creates a serializer
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartSpacing.Top">
            <summary>
            Gets or sets the top spacing.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartSpacing.Right">
            <summary>
            Gets or sets the right spacing.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartSpacing.Bottom">
            <summary>
            Gets or sets the bottom spacing.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartSpacing.Left">
            <summary>
            Gets or sets the left spacing.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartElementBorder">
            <summary>
            Represents chart element border
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartElementBorder.#ctor(System.Int32,System.String,Telerik.Web.Mvc.UI.ChartDashType)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartSpacing"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartElementBorder.CreateSerializer">
            <summary>
            Creates a serializer
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartElementBorder.Width">
            <summary>
            Gets or sets the width of the border.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartElementBorder.Color">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartElementBorder.DashType">
            <summary>
            Gets or sets the dash type of the border.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartArea">
            <summary>
            Represents the Chart area options
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartArea.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartArea"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartArea.CreateSerializer">
            <summary>
            Creates a serializer
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartArea.Background">
            <summary>
            Gets or sets the Chart area background.
            </summary>
            <value>
            The Chart area background.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartArea.Border">
            <summary>
            Gets or sets the Chart area border.
            </summary>
            <value>
            The Chart area border.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartArea.Margin">
            <summary>
            Gets or sets the Chart area margin.
            </summary>
            <value>
            The Chart area margin.
            </value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartLine">
            <summary>
            Represents chart line styling
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartLine.#ctor(System.Int32,System.String,Telerik.Web.Mvc.UI.ChartDashType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartLine"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartLine"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartLine.CreateSerializer">
            <summary>
            Creates a serializer
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLine.Width">
            <summary>
            Gets or sets the line width.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLine.Color">
            <summary>
            Gets or sets the line color.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLine.Visible">
            <summary>
            Gets or sets the line visibility.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLine.DashType">
            <summary>
            Gets or sets the line dash type.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartTooltip">
            <summary>
            Represents the chart data point tootlip
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartTooltip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartLegend"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartTooltip.CreateSerializer">
            <summary>
            Creates a serializer
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartTooltip.Font">
            <summary>
            Gets or sets the legend font.
            </summary>
            <value>
            Specify a font in CSS format. For example "16px Arial,Helvetica,sans-serif".
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartTooltip.Visible">
            <summary>
            Gets or sets a value indicating if the legend is visible
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartTooltip.Padding">
            <summary>
            Gets or sets the legend margin
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartTooltip.Border">
            <summary>
            Gets or sets the legend border
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartTooltip.Background">
            <summary>
            Gets or sets the label background.
            </summary>
            <value>
            The label background.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartTooltip.Color">
            <summary>
            Gets or sets the label color.
            </summary>
            <value>
            The label color.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartTooltip.Format">
            <summary>
            Gets or sets the label format.
            </summary>
            <value>
            The label format.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartTooltip.Template">
            <summary>
            Gets or sets the tooltip template.
            </summary>
            <value>
            The tooltip template.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartTooltip.Opacity">
            <summary>
            Gets or sets the tooltip opacity.
            </summary>
            <value>
            The tooltip opacity.
            </value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartAxisTickType">
            <summary>
            Defines the position of axis ticks
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartAxisTickType.Outside">
            <summary>
            The tick is drawn on the outer side of the axis
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartAxisTickType.None">
            <summary>
            No tick is drawn
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartBarLabelsPosition">
            <summary>
            Defines the position of bar/column chart labels
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartBarLabelsPosition.Center">
            <summary>
            The label is positioned at the bar center
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartBarLabelsPosition.InsideEnd">
            <summary>
            The label is positioned inside, near the end of the bar
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartBarLabelsPosition.InsideBase">
            <summary>
            The label is positioned inside, near the base of the bar 
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartBarLabelsPosition.OutsideEnd">
            <summary>
            The label is positioned outside, near the end of the bar.
            Not applicable for stacked bar series.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartLegendPosition">
            <summary>
            Defines the position chart legend
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartLegendPosition.Top">
            <summary>
            The legend is positioned on the top
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartLegendPosition.Bottom">
            <summary>
            The legend is positioned on the bottom
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartLegendPosition.Left">
            <summary>
            The legend is positioned on the left
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartLegendPosition.Right">
            <summary>
            The legend is positioned on the right
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartLegendPosition.Custom">
            <summary>
            The legend is positioned using OffsetX and OffsetY
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartPointLabelsPosition">
            <summary>
            Defines the position of point labels.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartPointLabelsPosition.Above">
            <summary>
            The label is positioned at the top of the point marker.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartPointLabelsPosition.Right">
            <summary>
            The label is positioned at the right of the point marker.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartPointLabelsPosition.Below">
            <summary>
            The label is positioned at the bottom of the point marker.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartPointLabelsPosition.Left">
            <summary>
            The label is positioned at the left of the point marker.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartLineLabelsPosition">
            <summary>
            Defines the position of line chart labels.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartLineLabelsPosition.Above">
            <summary>
            The label is positioned at the top of the line chart marker.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartLineLabelsPosition.Right">
            <summary>
            The label is positioned at the right of the line chart marker.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartLineLabelsPosition.Below">
            <summary>
            The label is positioned at the bottom of the line chart marker.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartLineLabelsPosition.Left">
            <summary>
            The label is positioned at the left of the line chart marker.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartLineMissingValues">
            <summary>
            Defines the behavior for handling missing values in line series.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartLineMissingValues.Interpolate">
            <summary>
            The value is interpolated from neighboring points.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartLineMissingValues.Zero">
            <summary>
            The value is assumed to be zero.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartLineMissingValues.Gap">
            <summary>
            The line stops before the missing point and continues after it.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartMarkerShape">
            <summary>
            Defines the shape of the marker.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartMarkerShape.Square">
            <summary>
            The marker shape is square.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartMarkerShape.Triangle">
            <summary>
            The marker shape is triangle.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartMarkerShape.Circle">
            <summary>
            The marker shape is circle.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartTextAlignment">
            <summary>
            Defines text alignment options
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartTextAlignment.Left">
            <summary>
            The text is aligned to the left
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartTextAlignment.Center">
            <summary>
            The text is aligned to the middle
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartTextAlignment.Right">
            <summary>
            The text is aligned to the right
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartTitlePosition">
            <summary>
            Defines the position chart title
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartTitlePosition.Top">
            <summary>
            The title is positioned on the top
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartTitlePosition.Bottom">
            <summary>
            The title is positioned on the bottom
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartDashType">
            <summary>
            Specifies a line dash type.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartDashType.Solid">
            <summary>
            Specifies a solid line.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartDashType.Dot">
            <summary>
            Specifies a line consisting of dots.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartDashType.Dash">
            <summary>
            Specifies a line consisting of dashes.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartDashType.LongDash">
            <summary>
            Specifies a line consisting of a repeating pattern of long-dash.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartDashType.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartDashType.LongDashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of lond-dash-dot.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartDashType.LongDashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of long-dash-dot-dot.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartPieSeriesOverlay">
            <summary>
            Defines the available pie series effects overlays
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartPieSeriesOverlay.None">
            <summary>
            The pies have no effect overlay
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartPieSeriesOverlay.SharpBevel">
            <summary>
            The pie segments have sharp bevel effect overlay
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartPieSeriesOverlay.RoundedBevel">
            <summary>
            The pie segments have sharp bevel effect overlay
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartPieLabelsAlign">
            <summary>
            Defines the alignment of the pie labels.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartPieLabelsAlign.Circle">
            <summary>
            The labels are positioned in circle around the pie chart.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartPieLabelsAlign.Column">
            <summary>
            The labels are positioned in columns to the left and right of the pie chart.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartScatterLineMissingValues">
            <summary>
            Defines the behavior for handling missing values in scatter line series.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartScatterLineMissingValues.Interpolate">
            <summary>
            The value is interpolated from neighboring points.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartScatterLineMissingValues.Gap">
            <summary>
            The line stops before the missing point and continues after it.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartPieLabelsPosition">
            <summary>
            Defines the position of pie chart labels.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartPieLabelsPosition.Center">
            <summary>
            The label is positioned at the center of the pie segment.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartPieLabelsPosition.InsideEnd">
            <summary>
            The label is positioned inside, near the end of the pie segment.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartPieLabelsPosition.OutsideEnd">
            <summary>
            The label is positioned outside, near the end of the pie segment.
            The label and the pie segment are connected with connector line.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartAxisOrientation">
            <summary>
            Defines chart axis orientation
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartAxisOrientation.Vertical">
            <summary>
            The axis is verical
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartAxisOrientation.Horizontal">
            <summary>
            The axis is horizontal
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartAxisDefaultsBuilder`1">
            <summary>
            Defines the fluent interface for configuring of all axes.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartAxisBuilderBase`2">
            <summary>
            Defines the fluent interface for configuring axes.
            </summary>
            <typeparam name="TAxis"></typeparam>
            <typeparam name="TAxisBuilder">The type of the series builder.</typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAxisBuilderBase`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartAxisBuilderBase`2"/> class.
            </summary>
            <param name="axis">The axis.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAxisBuilderBase`2.MinorTickSize(System.Int32)">
            <summary>
            Sets the axis minor tick size.
            </summary>
            <param name="minorTickSize">The minor tick size.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .ValueAxis(a => a.Numeric().MinorTickSize(10))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAxisBuilderBase`2.MajorTickSize(System.Int32)">
            <summary>
            Sets the axis major tick size.
            </summary>
            <param name="majorTickSize">The major tick size.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .ValueAxis(a => a.Numeric().MajorTickSize(10))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAxisBuilderBase`2.MajorTickType(Telerik.Web.Mvc.UI.ChartAxisTickType)">
            <summary>
            Sets the major tick type.
            </summary>
            <param name="majorTickType">The major tick type.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .ValueAxis(a => a.Numeric().MajorTickType(ChartAxisTickType.Inside))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAxisBuilderBase`2.MinorTickType(Telerik.Web.Mvc.UI.ChartAxisTickType)">
            <summary>
            Sets the minor tick type.
            </summary>
            <param name="minorTickType">The minor tick type.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .ValueAxis(a => a.Numeric().MinorTickType(ChartAxisTickType.Inside))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAxisBuilderBase`2.MajorGridLines(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartLineBuilder})">
            <summary>
            Configures the major grid lines.
            </summary>
            <param name="configurator">The configuration action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .CategoryAxis(axis => axis
                            .Categories(s => s.DateString)
                            .MajorGridLines(lines => lines.Visible(true))
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAxisBuilderBase`2.MajorGridLines(System.Int32,System.String,Telerik.Web.Mvc.UI.ChartDashType)">
            <summary>
            Sets color and width of the major grid lines and enables them.
            </summary>
            <param name="color">The major gridlines width</param>
            <param name="width">The major gridlines color (CSS syntax)</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .CategoryAxis(axis => axis
                            .Categories(s => s.DateString)
                            .MajorGridLines(2, "red", ChartDashType.Dot)
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAxisBuilderBase`2.MinorGridLines(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartLineBuilder})">
            <summary>
            Configures the minor grid lines.
            </summary>
            <param name="configurator">The configuration action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .CategoryAxis(axis => axis
                            .Categories(s => s.DateString)
                            .MinorGridLines(lines => lines.Visible(true))
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAxisBuilderBase`2.MinorGridLines(System.Int32,System.String,Telerik.Web.Mvc.UI.ChartDashType)">
            <summary>
            Sets color and width of the minor grid lines and enables them.
            </summary>
            <param name="color">The minor gridlines width</param>
            <param name="width">The minor gridlines color (CSS syntax)</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .CategoryAxis(axis => axis
                            .Categories(s => s.DateString)
                            .MinorGridLines(2, "red", ChartDashType.Dot)
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAxisBuilderBase`2.Line(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartLineBuilder})">
            <summary>
            Configures the axis line.
            </summary>
            <param name="configurator">The configuration action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .CategoryAxis(axis => axis
                            .Categories(s => s.DateString)
                            .Line(line => line.Color("#f00"))
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAxisBuilderBase`2.Line(System.Int32,System.String,Telerik.Web.Mvc.UI.ChartDashType)">
            <summary>
            Sets color and width of the lines and enables them.
            </summary>
            <param name="color">The axis line width</param>
            <param name="width">The axis line color (CSS syntax)</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .CategoryAxis(axis => axis
                            .Categories(s => s.DateString)
                            .Line(2, "#f00", ChartDashType.Dot)
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAxisBuilderBase`2.AxisCrossingValue(System.Double)">
            <summary>
            Sets value at which the first perpendicular axis crosses this axis.
            </summary>
            <param name="axisCrossingValue">The value at which the first perpendicular axis crosses this axis.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .CategoryAxis(axis => axis.AxisCrossingValue(4))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAxisBuilderBase`2.Labels(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartAxisLabelsBuilder})">
            <summary>
            Configures the axis labels.
            </summary>
            <param name="configurator">The configuration action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .CategoryAxis(axis => axis
                            .Labels(labels => labels
                                .Color("Red")
                                .Visible(true)
                            );
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAxisBuilderBase`2.Labels(System.Boolean)">
            <summary>
            Sets the visibility of numeric axis chart labels.
            </summary>
            <param name="visible">The visibility. The default value is false.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .CategoryAxis(axis => axis.Labels(true))
            %&gt;
            </code>
            </example>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Fluent.ChartAxisBuilderBase`2.Axis">
            <summary>
            Gets or sets the axis.
            </summary>
            <value>The axis.</value>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAxisDefaultsBuilder`1.#ctor(Telerik.Web.Mvc.UI.Chart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartAxisDefaultsBuilder`1"/> class.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartAxisLabelsBuilder">
            <summary>
            Defines the fluent interface for configuring the chart labels.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartLabelsBuilderBase`1">
            <summary>
            Defines the fluent interface for configuring the chart labels.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLabelsBuilderBase`1.#ctor(Telerik.Web.Mvc.UI.ChartLabels)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartLabelsBuilderBase`1"/> class.
            </summary>
            <param name="chartLabels">The labels configuration.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLabelsBuilderBase`1.Font(System.String)">
            <summary>
            Sets the labels font
            </summary>
            <param name="font">The labels font (CSS format).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                        .Name("Chart")
                        .Series(series => series
                            .Bar(s => s.Sales)
                            .Labels(labels => labels
                                .Font("14px Arial,Helvetica,sans-serif")
                                .Visible(true)
                            );
                        )
                        .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLabelsBuilderBase`1.Visible(System.Boolean)">
            <summary>
            Sets the labels visibility
            </summary>
            <param name="visible">The labels visibility.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                          .Bar(s => s.Sales)
                          .Labels(labels => labels
                              .Visible(true)
                          );
                      )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLabelsBuilderBase`1.Background(System.String)">
            <summary>
            Sets the labels background color
            </summary>
            <param name="background">The labels background color.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                            .Bar(s => s.Sales)
                            .Labels(labels => labels
                                .Background("Red")
                                .Visible(true);
                            );
                      )          
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLabelsBuilderBase`1.Color(System.String)">
            <summary>
            Sets the labels text color
            </summary>
            <param name="color">The labels text color.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                            .Bar(s => s.Sales)
                            .Labels(labels => labels
                                .Color("Red")
                                .Visible(true);
                            );
                      )    
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLabelsBuilderBase`1.Margin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the labels margin
            </summary>
            <param name="top">The labels top margin.</param>
            <param name="right">The labels right margin.</param>
            <param name="bottom">The labels bottom margin.</param>
            <param name="left">The labels left margin.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                            .Bar(s => s.Sales)
                            .Labels(labels => labels
                                .Margin(0, 5, 5, 0)
                                .Visible(true);
                            );
                      ) 
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLabelsBuilderBase`1.Margin(System.Int32)">
            <summary>
            Sets the labels margin
            </summary>
            <param name="margin">The labels margin.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                            .Bar(s => s.Sales)
                            .Labels(labels => labels
                                .Margin(20)
                                .Visible(true);
                            );
                      ) 
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLabelsBuilderBase`1.Padding(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the labels padding
            </summary>
            <param name="top">The labels top padding.</param>
            <param name="right">The labels right padding.</param>
            <param name="bottom">The labels bottom padding.</param>
            <param name="left">The labels left padding.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                           .Bar(s => s.Sales)
                           .Labels(labels => labels
                                .Padding(0, 5, 5, 0)
                                .Visible(true);
                           );
                      )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLabelsBuilderBase`1.Padding(System.Int32)">
            <summary>
            Sets the labels padding
            </summary>
            <param name="padding">The labels padding.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                           .Bar(s => s.Sales)
                           .Labels(labels => labels
                                .Padding(20)
                                .Visible(true);
                           );
                      )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLabelsBuilderBase`1.Border(System.Int32,System.String,Telerik.Web.Mvc.UI.ChartDashType)">
            <summary>
            Sets the labels border
            </summary>
            <param name="width">The labels border width.</param>
            <param name="color">The labels border color (CSS syntax).</param>
            <param name="dashType">The labels border dash type.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                           .Bar(s => s.Sales)
                           .Labels(labels => labels
                                .Border(1, "Red", ChartDashType.Dot)
                                .Visible(true);
                           );
                      )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLabelsBuilderBase`1.Format(System.String)">
            <summary>
            Sets the labels format.
            </summary>
            <param name="format">The labels format.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                            .Bar(s => s.Sales)
                            .Labels(labels => labels
                                .Format("{0:C}")
                                .Visible(true);
                            );
                      )          
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLabelsBuilderBase`1.Template(System.String)">
            <summary>
            Sets the labels template.
            </summary>
            <param name="template">The labels template.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                            .Bar(s => s.Sales)
                            .Labels(labels => labels
                                .Template("${TotalSales}")
                                .Visible(true);
                            );
                      )          
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLabelsBuilderBase`1.Opacity(System.Double)">
            <summary>
            Sets the labels opacity.
            </summary>
            <param name="opacity">
            The series opacity in the range from 0 (transparent) to 1 (opaque).
            The default value is 1.
            </param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                            .Bar(s => s.Sales)
                            .Labels(labels => labels
                                .Opacity(0.5)
                                .Visible(true);
                            );
                      )          
                      .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLabelsBuilderBase`1.Rotation(System.Int32)">
            <summary>
            Sets the labels text rotation
            </summary>
            <param name="rotation">The labels text rotation.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                            .Bar(s => s.Sales)
                            .Labels(labels => labels
                                .Rotation(45)
                                .Visible(true);
                            );
                      )    
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAxisLabelsBuilder.#ctor(Telerik.Web.Mvc.UI.ChartAxisLabels)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartAxisLabelsBuilder"/> class.
            </summary>
            <param name="chartLabels">The labels configuration.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartPieLabelsBuilder">
            <summary>
            Defines the fluent interface for configuring the chart data labels.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPieLabelsBuilder.#ctor(Telerik.Web.Mvc.UI.ChartPieLabels)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartPieLabelsBuilder"/> class.
            </summary>
            <param name="chartBarLabels">The data labels configuration.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPieLabelsBuilder.Align(Telerik.Web.Mvc.UI.ChartPieLabelsAlign)">
            <summary>
            Sets the labels align
            </summary>
            <param name="align">The labels align.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                          .Pie(p => p.Sales)
                          .Labels(labels => labels
                              .Align(ChartPieLabelsAlign.Column)
                              .Visible(true)
                          );
                       )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPieLabelsBuilder.Distance(System.Int32)">
            <summary>
            Sets the labels distance
            </summary>
            <param name="distance">The labels distance.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                          .Pie(p => p.Sales)
                          .Labels(labels => labels
                              .Distance(20)
                              .Visible(true)
                          );
                       )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPieLabelsBuilder.Position(Telerik.Web.Mvc.UI.ChartPieLabelsPosition)">
            <summary>
            Sets the labels position
            </summary>
            <param name="position">The labels position.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                          .Pie(p => p.Sales)
                          .Labels(labels => labels
                              .Position(ChartPieLabelsPosition.Center)
                              .Visible(true)
                          );
                       )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartTooltipBuilder">
            <summary>
            Defines the fluent interface for configuring the chart data points tooltip.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTooltipBuilder.#ctor(Telerik.Web.Mvc.UI.ChartTooltip)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartTooltipBuilder"/> class.
            </summary>
            <param name="chartTooltip">The data point tooltip configuration.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTooltipBuilder.Font(System.String)">
            <summary>
            Sets the tooltip font
            </summary>
            <param name="font">The tooltip font (CSS format).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Tooltip(tooltip => tooltip
                          .Font("14px Arial,Helvetica,sans-serif")
                          .Visible(true)
                      )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTooltipBuilder.Visible(System.Boolean)">
            <summary>
            Sets the tooltip visibility
            </summary>
            <param name="visible">The tooltip visibility. The tooltip is not visible by default.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Tooltip(tooltip => tooltip
                          .Visible(true)
                      )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTooltipBuilder.Background(System.String)">
            <summary>
            Sets the tooltip background color
            </summary>
            <param name="background">
            The tooltip background color.
            The default is determined from the series color.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Tooltip(tooltip => tooltip
                          .Background("Red")
                          .Visible(true)
                      )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTooltipBuilder.Color(System.String)">
            <summary>
            Sets the tooltip text color
            </summary>
            <param name="color">
            The tooltip text color.
            The default is the same as the series labels color.
            </param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Tooltip(tooltip => tooltip
                          .Color("Red")
                          .Visible(true)
                      )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTooltipBuilder.Padding(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the tooltip padding
            </summary>
            <param name="top">The tooltip top padding.</param>
            <param name="right">The tooltip right padding.</param>
            <param name="bottom">The tooltip bottom padding.</param>
            <param name="left">The tooltip left padding.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Tooltip(tooltip => tooltip
                          .Padding(0, 5, 5, 0)
                          .Visible(true)
                      )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTooltipBuilder.Padding(System.Int32)">
            <summary>
            Sets the tooltip padding
            </summary>
            <param name="padding">The tooltip padding.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Tooltip(tooltip => tooltip
                          .Padding(20)
                          .Visible(true)
                      )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTooltipBuilder.Border(System.Int32,System.String)">
            <summary>
            Sets the tooltip border
            </summary>
            <param name="width">The tooltip border width.</param>
            <param name="color">The tooltip border color (CSS syntax).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Tooltip(tooltip => tooltip
                          .Border(1, "Red")
                          .Visible(true)
                      )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTooltipBuilder.Format(System.String)">
            <summary>
            Sets the tooltip format
            </summary>
            <param name="format">The tooltip format.</param>
            <remarks>
            The format string is ignored if a template is set.
            </remarks>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Tooltip(tooltip => tooltip
                          .Format("{0:C}")
                          .Visible(true)
                      )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTooltipBuilder.Template(System.String)">
            <summary>
            Sets the tooltip template
            </summary>
            <param name="template">The tooltip template.</param>
            <value>
            A client-side template for the tooltip.
            <list type="bullet">
                <listheader>
                Available template variables:
                </listheader>
                <item>value - the point value</item>
                <item>category - the category name</item>
                <item>series - the data series configuration object</item>
                <item>dataItem - the original data item (client-side binding only)</item>
            </list>
            </value>
            <remarks>
            The format string is ignored if a template is set.
            </remarks>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Tooltip(tooltip => tooltip
                          .Template("&lt;#= category #&gt; - &lt;#= value #&gt;")
                          .Visible(true)
                      )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTooltipBuilder.Opacity(System.Double)">
            <summary>
            Sets the tooltip opacity.
            </summary>
            <param name="opacity">
            The series opacity in the range from 0 (transparent) to 1 (opaque).
            The default value is 1.
            </param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Tooltip(tooltip => tooltip
                          .Opacity(0.5)
                          .Visible(true)
                      )          
                      .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartPieSeriesBuilder`1">
            <summary>
            Defines the fluent interface for configuring pie series.
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPieSeriesBuilder`1.#ctor(Telerik.Web.Mvc.UI.IChartPieSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartPieSeriesBuilder`1"/> class.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPieSeriesBuilder`1.Name(System.String)">
            <summary>
            Sets the name of the series.
            </summary>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Chart(Model)
                       .Name("Chart")
                       .Series(series => series.Pie(s => s.Sales, s => s.DateString).Name("Sales"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPieSeriesBuilder`1.Opacity(System.Double)">
            <summary>
            Sets the series opacity.
            </summary>
            <param name="opacity">
            The series opacity in the range from 0 (transparent) to 1 (opaque).
            The default value is 1.
            </param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Chart(Model)
                       .Name("Chart")
                       .Series(series => series.Pie(s => s.Sales, s => s.DateString).Opacity(0.5))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPieSeriesBuilder`1.Padding(System.Int32)">
            <summary>
            Sets the padding of the chart.
            </summary>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Series(series => series.Pie(s => s.Sales, s => s.DateString).Padding(100))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPieSeriesBuilder`1.StartAngle(System.Int32)">
            <summary>
            Sets the start angle of the first pie segment.
            </summary>
            <param name="startAngle">The pie start angle(in degrees).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Series(series => series.Pie(s => s.Sales, s => s.DateString).StartAngle(100))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPieSeriesBuilder`1.Labels(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartPieLabelsBuilder})">
            <summary>
            Configures the pie chart labels.
            </summary>
            <param name="configurator">The configuration action.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Chart()
                       .Name("Chart")
                       .Series(series => series
                           .Pie(s => s.Sales, s => s.DateString)
                           .Labels(labels => labels
                               .Color("red")
                               .Visible(true)
                           );
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPieSeriesBuilder`1.Labels(System.Boolean)">
            <summary>
            Sets the visibility of pie chart labels.
            </summary>
            <param name="visible">The visibility. The default value is false.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Chart()
                       .Name("Chart")
                       .Series(series => series
                           .Pie(s => s.Sales, s => s.DateString)
                           .Labels(true);
                       )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPieSeriesBuilder`1.Border(System.Int32,System.String,Telerik.Web.Mvc.UI.ChartDashType)">
            <summary>
            Sets the pie segments border
            </summary>
            <param name="width">The pie segments border width.</param>
            <param name="color">The pie segments border color (CSS syntax).</param>
            <param name="dashType">The pie segments border dash type.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series.Pie(s => s.Sales, s => s.DateString).Border(1, "#000", ChartDashType.Dot))
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPieSeriesBuilder`1.Overlay(Telerik.Web.Mvc.UI.ChartPieSeriesOverlay)">
            <summary>
            Sets the pie segments effects overlay
            </summary>
            <param name="overlay">
            The pie segment effects overlay.
            The default value is set in the theme.
            </param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series.Pie(s => s.Sales, s => s.DateString).Overlay(ChartPieSeriesOverlay.None))
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPieSeriesBuilder`1.Connectors(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartPieConnectorsBuilder})">
            <summary>
            Configures the pie chart connectors.
            </summary>
            <param name="configurator">The configuration action.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Chart()
                       .Name("Chart")
                       .Series(series => series
                           .Pie(s => s.Sales, s => s.DateString)
                           .Connectors(c => c
                               .Color("red")
                           );
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Fluent.ChartPieSeriesBuilder`1.Series">
            <summary>
            Gets or sets the series.
            </summary>
            <value>The series.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartScatterSeriesBuilder`1">
            <summary>
            Defines the fluent interface for configuring scatter series.
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartScatterSeriesBuilderBase`2">
            <summary>
            Defines the fluent interface for configuring scatter series.
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartSeriesBuilderBase`2">
            <summary>
            Defines the fluent interface for configuring series.
            </summary>
            <typeparam name="TSeries"></typeparam>
            <typeparam name="TSeriesBuilder">The type of the series builder.</typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesBuilderBase`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartSeriesBuilderBase`2"/> class.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesBuilderBase`2.Name(System.String)">
            <summary>
            Sets the series title displayed in the legend.
            </summary>
            <param name="text">The title.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .Series(series => series.Bar(s => s.Sales).Name("Sales"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesBuilderBase`2.Opacity(System.Double)">
            <summary>
            Sets the series opacity.
            </summary>
            <param name="opacity">
            The series opacity in the range from 0 (transparent) to 1 (opaque).
            The default value is 1.
            </param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .Series(series => series.Bar(s => s.Sales).Opacity(0.5))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesBuilderBase`2.Color(System.String)">
            <summary>
            Sets the bar fill color
            </summary>
            <param name="color">The bar fill color (CSS syntax).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Series(series => series.Bar(s => s.Sales).Color("Red"))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Fluent.ChartSeriesBuilderBase`2.Series">
            <summary>
            Gets or sets the series.
            </summary>
            <value>The series.</value>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartScatterSeriesBuilderBase`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="!:ChartScatterSeriesBuilderBase&lt;T&gt;"/> class.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartScatterSeriesBuilderBase`2.Labels(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartPointLabelsBuilder})">
            <summary>
            Configures the scatter chart labels.
            </summary>
            <param name="configurator">The configuration action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Series(series => series
                            .Scatter(s => s.x, s => s.y)
                            .Labels(labels => labels
                                .Position(ChartBarLabelsPosition.Above)
                                .Visible(true)
                            );
                         )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartScatterSeriesBuilderBase`2.Labels(System.Boolean)">
            <summary>
            Sets the visibility of scatter chart labels.
            </summary>
            <param name="visible">The visibility. The default value is false.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Series(series => series
                            .Scatter(s => s.x, s => s.y)
                            .Labels(true);
                         )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartScatterSeriesBuilderBase`2.Markers(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartMarkersBuilder})">
            <summary>
            Configures the scatter chart markers.
            </summary>
            <param name="configurator">The configuration action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Series(series => series
                            .Scatter(s => s.x, s => s.y)
                            .Markers(markers => markers
                                .Type(ChartMarkerShape.Triangle)
                            );
                         )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartScatterSeriesBuilderBase`2.Markers(System.Boolean)">
            <summary>
            Sets the visibility of scatter chart markers.
            </summary>
            <param name="visible">The visibility. The default value is true.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Series(series => series
                            .Scatter(s => s.x, s => s.y)
                            .Markers(true);
                         )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartScatterSeriesBuilder`1.#ctor(Telerik.Web.Mvc.UI.IChartScatterSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartScatterSeriesBuilder`1"/> class.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartScatterLineSeriesBuilder`1">
            <summary>
            Defines the fluent interface for configuring scatter line series.
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartScatterLineSeriesBuilder`1.#ctor(Telerik.Web.Mvc.UI.IChartScatterLineSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartScatterLineSeriesBuilder`1"/> class.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartScatterLineSeriesBuilder`1.Width(System.Double)">
            <summary>
            Sets the chart line width.
            </summary>
            <param name="width">The line width.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Series(series => series.ScatterLine(s => s.x, s => s.y).Width(2))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartScatterLineSeriesBuilder`1.DashType(Telerik.Web.Mvc.UI.ChartDashType)">
            <summary>
            Sets the chart line dash type.
            </summary>
            <param name="dashType">The line dash type.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Series(series => series.ScatterLine(s => s.x, s => s.y).DashType(ChartDashType.Dot))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartScatterLineSeriesBuilder`1.MissingValues(Telerik.Web.Mvc.UI.ChartScatterLineMissingValues)">
            <summary>
            Configures the behavior for handling missing values in scatter line series.
            </summary>
            <param name="missingValues">The missing values behavior. The default is to leave gaps.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Series(series => series
                            .ScatterLine(s => s.x, s => s.y)
                            .MissingValues(ChartScatterLineMissingValues.Interpolate);
                         )
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartPieConnectorsBuilder">
            <summary>
            Defines the fluent interface for configuring the chart connectors.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPieConnectorsBuilder.#ctor(Telerik.Web.Mvc.UI.ChartPieConnectors)">
            <summary>
            Initializes a new instance of the <see cref="!:ChartPieConnectosBuilder"/> class.
            </summary>
            <param name="chartBarLabels">The connectors configuration.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPieConnectorsBuilder.Width(System.Int32)">
            <summary>
            Sets the connectors width
            </summary>
            <param name="width">The connectors width.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                          .Pie(p => p.Sales)
                          .Connectors(c => c
                              .Width(3)
                          );
                       )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPieConnectorsBuilder.Color(System.String)">
            <summary>
            Sets the connectors color
            </summary>
            <param name="color">The connectors color.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                          .Pie(p => p.Sales)
                          .Connectors(c => c
                              .Color(red)
                          );
                       )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPieConnectorsBuilder.Padding(System.Int32)">
            <summary>
            Sets the connectors padding
            </summary>
            <param name="padding">The connectors padding.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                          .Pie(p => p.Sales)
                          .Connectors(c => c
                              .Padding(10)
                          );
                       )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IChartSerializer">
            <summary>
            Represents an object that can serialize itself
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IChartSerializer.Serialize">
            <summary>
            Serializes the current instance
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartMarkers">
            <summary>
            Represents chart line markers styling
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartMarkers.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartMarkers"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartMarkers.CreateSerializer">
            <summary>
            Creates a serializer
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartMarkers.Size">
            <summary>
            Gets or sets the markers size.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartMarkers.Background">
            <summary>
            Gets or sets the markers background.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartMarkers.Type">
            <summary>
            Gets or sets the markers type.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartMarkers.Visible">
            <summary>
            Gets or sets the markers visibility.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartMarkers.Border">
            <summary>
            Gets or sets the markers border.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartLineSeriesBuilder`1">
            <summary>
            Defines the fluent interface for configuring line series.
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLineSeriesBuilder`1.#ctor(Telerik.Web.Mvc.UI.IChartLineSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartLineSeriesBuilder`1"/> class.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLineSeriesBuilder`1.Stack(System.Boolean)">
            <summary>
            Sets a value indicating if the lines should be stacked.
            </summary>
            <param name="stacked">A value indicating if the lines should be stacked.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .Series(series => series.Line(s => s.Sales).Stack(true))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLineSeriesBuilder`1.Labels(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartPointLabelsBuilder})">
            <summary>
            Configures the line chart labels.
            </summary>
            <param name="configurator">The configuration action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Series(series => series
                            .Line(s => s.Sales)
                            .Labels(labels => labels
                                .Position(ChartBarLabelsPosition.Above)
                                .Visible(true)
                            );
                         )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLineSeriesBuilder`1.Labels(System.Boolean)">
            <summary>
            Sets the visibility of line chart labels.
            </summary>
            <param name="visible">The visibility. The default value is false.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Series(series => series
                            .Line(s => s.Sales)
                            .Labels(true);
                         )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLineSeriesBuilder`1.Width(System.Double)">
            <summary>
            Sets the line chart line width.
            </summary>
            <param name="width">The line width.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Series(series => series.Line(s => s.Sales).Width(2))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLineSeriesBuilder`1.DashType(Telerik.Web.Mvc.UI.ChartDashType)">
            <summary>
            Sets the line chart line dash type.
            </summary>
            <param name="dashType">The line dash type.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Series(series => series.Line(s => s.Sales).DashType(ChartDashType.Dot))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLineSeriesBuilder`1.Markers(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartMarkersBuilder})">
            <summary>
            Configures the line chart markers.
            </summary>
            <param name="configurator">The configuration action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Series(series => series
                            .Line(s => s.Sales)
                            .Markers(markers => markers
                                .Type(ChartMarkerShape.Triangle)
                            );
                         )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLineSeriesBuilder`1.Markers(System.Boolean)">
            <summary>
            Sets the visibility of line chart markers.
            </summary>
            <param name="visible">The visibility. The default value is true.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Series(series => series
                            .Line(s => s.Sales)
                            .Markers(true);
                         )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLineSeriesBuilder`1.MissingValues(Telerik.Web.Mvc.UI.ChartLineMissingValues)">
            <summary>
            Configures the behavior for handling missing values in line series.
            </summary>
            <param name="missingValues">The missing values behavior. The default is to leave gaps.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Series(series => series
                            .Line(s => s.Sales)
                            .MissingValues(ChartLineMissingValues.Interpolate);
                         )
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartPointLabelsBuilder">
            <summary>
            Defines the fluent interface for configuring the chart data labels.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPointLabelsBuilder.#ctor(Telerik.Web.Mvc.UI.ChartPointLabels)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartPointLabelsBuilder"/> class.
            </summary>
            <param name="chartPointLabels">The data labels configuration.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPointLabelsBuilder.Position(Telerik.Web.Mvc.UI.ChartPointLabelsPosition)">
            <summary>
            Sets the labels position
            </summary>
            <param name="position">The labels position.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                          .Line(s => s.Sales)
                          .Labels(labels => labels
                              .Position(ChartPointLabelsPosition.Above)
                              .Visible(true)
                          );
                       )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartPointLabelsBuilder.Position(Telerik.Web.Mvc.UI.ChartLineLabelsPosition)">
            <summary>
            This method will be removed in future versions. Use Position(ChartPointLabelsPosition) instead.
            </summary>
            <param name="position">The labels position.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartMarkersBuilder">
            <summary>
            Defines the fluent interface for configuring the chart data labels.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartMarkersBuilder.#ctor(Telerik.Web.Mvc.UI.ChartMarkers)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartMarkersBuilder"/> class.
            </summary>
            <param name="chartLineMarkers">The line chart markers configuration.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartMarkersBuilder.Type(Telerik.Web.Mvc.UI.ChartMarkerShape)">
            <summary>
            Sets the markers shape type.
            </summary>
            <param name="type">The markers shape type.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                          .Line(s => s.Sales)
                          .Markers(markers => markers
                              .Type(ChartMarkerShape.Triangle)
                          );
                       )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartMarkersBuilder.Size(System.Int32)">
            <summary>
            Sets the markers size.
            </summary>
            <param name="size">The markers size.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                          .Line(s => s.Sales)
                          .Markers(markers => markers
                              .Size(10)
                          );
                       )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartMarkersBuilder.Visible(System.Boolean)">
            <summary>
            Sets the markers visibility
            </summary>
            <param name="visible">The markers visibility.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                          .Line(s => s.Sales)
                          .Markers(markers => markers
                              .Visible(true)
                          );
                      )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartMarkersBuilder.Border(System.Int32,System.String,Telerik.Web.Mvc.UI.ChartDashType)">
            <summary>
            Sets the markers border
            </summary>
            <param name="width">The markers border width.</param>
            <param name="color">The markers border color (CSS syntax).</param>
            <param name="dashType">The markers border dash type.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                           .Line(s => s.Sales)
                           .Markers(markers => markers
                               .Border(1, "Red", ChartDashType.Dot)
                           );
                      )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartMarkersBuilder.Background(System.String)">
            <summary>
            The background color of the current series markers.
            </summary>
            <param name="backgorund">The background color of the current series markers. The background color is series color.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Series(series => series
                            .Line(s => s.Sales)
                            .Markers(markers => markers
                                .Background("Red");
                            );
                         )
                         .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.PlotAreaBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.PlotArea"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.PlotAreaBuilder.#ctor(Telerik.Web.Mvc.UI.PlotArea)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.PlotAreaBuilder"/> class.
            </summary>
            <param name="plotArea">The plot area.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.PlotAreaBuilder.Background(System.String)">
            <summary>
            Sets the Plot area background color
            </summary>
            <param name="background">The background color.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .PlotArea(plotArea => plotArea.Background("Red"))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.PlotAreaBuilder.Margin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the Plot area margin
            </summary>
            <param name="top">The plot area top margin.</param>
            <param name="right">The plot area right margin.</param>
            <param name="bottom">The plot area bottom margin.</param>
            <param name="left">The plot area left margin.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .PlotArea(plotArea => plotArea.Margin(0, 5, 5, 0))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.PlotAreaBuilder.Margin(System.Int32)">
            <summary>
            Sets the Plot area margin
            </summary>
            <param name="margin">The plot area margin.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .PlotArea(plotArea => plotArea.Margin(5))
                       .Render();
            %&gt;
            </code>
            </example>          
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.PlotAreaBuilder.Border(System.Int32,System.String,Telerik.Web.Mvc.UI.ChartDashType)">
            <summary>
            Sets the Plot area border
            </summary>
            <param name="width">The border width.</param>
            <param name="color">The border color (CSS syntax).</param>
            <param name="dashType">The border dash type.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .PlotArea(plotArea => plotArea.Border(1, "#000", ChartDashType.Dot))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="T:Telerik.Web.Mvc.UI.PlotArea">
            <summary>
            Represents the Plot area options
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PlotArea.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.PlotArea"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PlotArea.CreateSerializer">
            <summary>
            Creates a serializer
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.PlotArea.Background">
            <summary>
            Gets or sets the Plot area background.
            </summary>
            <value>
            The Plot area background.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.PlotArea.Border">
            <summary>
            Gets or sets the Plot area border.
            </summary>
            <value>
            The Chart area border.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.PlotArea.Margin">
            <summary>
            Gets or sets the Plot area margin.
            </summary>
            <value>
            The Chart area margin.
            </value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartBarLabelsBuilder">
            <summary>
            Defines the fluent interface for configuring the chart data labels.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBarLabelsBuilder.#ctor(Telerik.Web.Mvc.UI.ChartBarLabels)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartBarLabelsBuilder"/> class.
            </summary>
            <param name="chartBarLabels">The data labels configuration.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBarLabelsBuilder.Position(Telerik.Web.Mvc.UI.ChartBarLabelsPosition)">
            <summary>
            Sets the labels position
            </summary>
            <param name="position">The labels position.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                      .Name("Chart")
                      .Series(series => series
                          .Bar(s => s.Sales)
                          .Labels(labels => labels
                              .Position(ChartBarLabelsPosition.InsideEnd)
                              .Visible(true)
                          );
                       )
                      .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartAreaBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.ChartArea"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAreaBuilder.#ctor(Telerik.Web.Mvc.UI.ChartArea)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartAreaBuilder"/> class.
            </summary>
            <param name="chartArea">The chart area.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAreaBuilder.Background(System.String)">
            <summary>
            Sets the Chart area background color
            </summary>
            <param name="background">The background color.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .ChartArea(chartArea => chartArea.Background("Red"))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAreaBuilder.Margin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the Chart area margin
            </summary>
            <param name="top">The chart area top margin.</param>
            <param name="right">The chart area right margin.</param>
            <param name="bottom">The chart area bottom margin.</param>
            <param name="left">The chart area left margin.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .ChartArea(chartArea => chartArea.Margin(0, 5, 5, 0))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAreaBuilder.Margin(System.Int32)">
            <summary>
            Sets the Chart area margin
            </summary>
            <param name="margin">The chart area margin.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .ChartArea(chartArea => chartArea.Margin(5))
                       .Render();
            %&gt;
            </code>
            </example>          
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartAreaBuilder.Border(System.Int32,System.String,Telerik.Web.Mvc.UI.ChartDashType)">
            <summary>
            Sets the Chart area border
            </summary>
            <param name="width">The border width.</param>
            <param name="color">The border color (CSS syntax).</param>
            <param name="dashType">The border dash type.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .ChartArea(chartArea => chartArea.Border(1, "#000", ChartDashType.Dot))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartLineBuilder">
            <summary>
            Defines the fluent interface for configuring <see cref="T:Telerik.Web.Mvc.UI.ChartLine"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLineBuilder.#ctor(Telerik.Web.Mvc.UI.ChartLine)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartLineBuilder"/> class.
            </summary>
            <param name="chartLine">The chart line.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLineBuilder.Color(System.String)">
            <summary>
            Sets the line color
            </summary>
            <param name="color">The line color (CSS format).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .CategoryAxis(axis => axis.MajorGridLines(lines => lines.Color("#f00")))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLineBuilder.Width(System.Int32)">
            <summary>
            Sets the line width
            </summary>
            <param name="width">The line width.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .CategoryAxis(axis => axis.MajorGridLines(lines => lines.Width(2)))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLineBuilder.Visible(System.Boolean)">
            <summary>
            Sets the line visibility
            </summary>
            <param name="visible">The line visibility.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .CategoryAxis(axis => axis.MajorGridLines(lines => lines.Visible(true)))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesDefaultsBuilder`1.Bar">
            <summary>
            Defines the default settings for bar series.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesDefaultsBuilder`1.Column">
            <summary>
            Defines the default settings for column series.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesDefaultsBuilder`1.Line">
            <summary>
            Defines the default settings for line series.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesDefaultsBuilder`1.Pie">
            <summary>
            Defines the default settings for pie series.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesDefaultsBuilder`1.Scatter">
            <summary>
            Defines the default settings for scatter series.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesDefaultsBuilder`1.ScatterLine">
            <summary>
            Defines the default settings for scatter line series.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartBarLabels">
            <summary>
            Represents the options of the bar chart labels
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartBarLabels.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartBarLabels"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartBarLabels.CreateSerializer">
            <summary>
            Creates a serializer
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartBarLabels.Position">
            <summary>
            Gets or sets the label position.
            </summary>
            <remarks>
            The default value is <see cref="F:Telerik.Web.Mvc.UI.ChartBarLabelsPosition.OutsideEnd"/> for clustered series and
            <see cref="F:Telerik.Web.Mvc.UI.ChartBarLabelsPosition.InsideEnd"/> for stacked series.
            </remarks>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartBindingSettingsBuilder">
            <summary>
            Defines the fluent interface for building <see cref="T:Telerik.Web.Mvc.UI.ChartBindingSettings"/>
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBindingSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.ChartBindingSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartBindingSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBindingSettingsBuilder.Enabled(System.Boolean)">
            <summary>
            Enables or disables binding.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("SalesData", "Home").Enabled((bool)ViewData["bindSales"]);
                        })
            %&gt;
            </code>
            </example>
            <remarks>
            The Enabled method is useful when you need to enable binding based on certain conditions.
            </remarks>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBindingSettingsBuilder.Select(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller and route values for the select operation
            </summary>
            <param name="routeValues">The route values of the Action method.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select(MVC.Home.SalesData().GetRouteValueDictionary());
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBindingSettingsBuilder.Select(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller and route values for the select operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("SalesData", "Home", new RouteValueDictionary{ {"month", 1} });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBindingSettingsBuilder.Select(System.String,System.String,System.Object)">
            <summary>
            Sets the action, controller and route values for the select operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("SalesData", "Home", new { month = 1 });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBindingSettingsBuilder.Select(System.String,System.String)">
            <summary>
            Sets the action and controller for the select operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("SalesData", "Home");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBindingSettingsBuilder.Select(System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the route and values for the select operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Default", "Home", new RouteValueDictionary{ {"month", 1} });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBindingSettingsBuilder.Select(System.String,System.Object)">
            <summary>
            Sets the route and values for the select operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Default", new {month = 1});
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBindingSettingsBuilder.Select(System.String)">
            <summary>
            Sets the route name for the select operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Default");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBindingSettingsBuilder.Select``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Sets the action, controller and route values for the select operation
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="controllerAction">The action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select&lt;HomeController&gt;(controller => controller.SalesData()));
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartValueAxisFactory`1">
            <summary>
            Creates value axis for the <see cref="T:Telerik.Web.Mvc.UI.Chart`1"/>.
            </summary>
            <typeparam name="TModel">The type of the data item to which the chart is bound to</typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartValueAxisFactory`1.#ctor(Telerik.Web.Mvc.UI.Chart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartValueAxisFactory`1"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartValueAxisFactory`1.Numeric">
            <summary>
            Defines a numeric value axis.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Fluent.ChartValueAxisFactory`1.Container">
            <summary>
            The parent Chart
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartNumericAxisBuilder">
            <summary>
            Defines the fluent interface for configuring numeric axis.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartNumericAxisBuilder.#ctor(Telerik.Web.Mvc.UI.IChartNumericAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartNumericAxisBuilder"/> class.
            </summary>
            <param name="axis">The axis.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartNumericAxisBuilder.Min(System.Double)">
            <summary>
            Sets the axis minimum value.
            </summary>
            <param name="min">The axis minimum value.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .ValueAxis(a => a.Numeric().Min(4))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartNumericAxisBuilder.Max(System.Double)">
            <summary>
            Sets the axis maximum value.
            </summary>
            <param name="max">The axis maximum value.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .ValueAxis(a => a.Numeric().Max(4))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartNumericAxisBuilder.MajorUnit(System.Double)">
            <summary>
            Sets the interval between major divisions.
            </summary>
            <param name="majorUnit">The interval between major divisions.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .ValueAxis(a => a.Numeric().MajorUnit(4))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartNumericAxisBuilder.Orientation(Telerik.Web.Mvc.UI.ChartAxisOrientation)">
            <summary>
            Sets the axis orientation. The CategoryAxis orientation should be set to match.
            </summary>
            <param name="orientation">The orientation. The default value is inferred from the series type.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .CategoryAxis(c => c.Orientation(ChartAxisOrientation.Vertical))
                        .ValueAxis(v => v.Orientation(ChartAxisOrientation.Horizontal))
                        .Series(series => series.Line(s => s.Sales))
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartTitleBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.ChartTitle"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTitleBuilder.#ctor(Telerik.Web.Mvc.UI.ChartTitle)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartTitleBuilder"/> class.
            </summary>
            <param name="chartTitle">The chart title.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTitleBuilder.Text(System.String)">
            <summary>
            Sets the title text
            </summary>
            <param name="text">The text title.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Title(title => title.Text("Chart"))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTitleBuilder.Font(System.String)">
            <summary>
            Sets the title font
            </summary>
            <param name="font">The title font (CSS format).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Title(title => title.Font("16px Arial,Helvetica,sans-serif"))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTitleBuilder.Background(System.String)">
            <summary>
            Sets the title background color
            </summary>
            <param name="background">The background color.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Title(title => title.Background("red"))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTitleBuilder.Position(Telerik.Web.Mvc.UI.ChartTitlePosition)">
            <summary>
            Sets the title position
            </summary>
            <param name="position">The title position.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Title(title => title.Position(ChartTitlePosition.Bottom))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTitleBuilder.Align(Telerik.Web.Mvc.UI.ChartTextAlignment)">
            <summary>
            Sets the title alignment
            </summary>
            <param name="align">The title alignment.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Title(title => title.Align(ChartTextAlignment.Left))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTitleBuilder.Visible(System.Boolean)">
            <summary>
            Sets the title visibility
            </summary>
            <param name="visible">The title visibility.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Title(title => title.Visible(false))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTitleBuilder.Margin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the title margin
            </summary>
            <param name="top">The title top margin.</param>
            <param name="right">The title right margin.</param>
            <param name="bottom">The title bottom margin.</param>
            <param name="left">The title left margin.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Title(title => title.Margin(20))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTitleBuilder.Margin(System.Int32)">
            <summary>
            Sets the title margin
            </summary>
            <param name="margin">The title margin.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Title(title => title.Margin(20))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTitleBuilder.Padding(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the title padding
            </summary>
            <param name="top">The title top padding.</param>
            <param name="right">The title right padding.</param>
            <param name="bottom">The title bottom padding.</param>
            <param name="left">The title left padding.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Title(title => title.Padding(20))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTitleBuilder.Padding(System.Int32)">
            <summary>
            Sets the title padding
            </summary>
            <param name="padding">The title padding.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Title(title => title.Padding(20))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartTitleBuilder.Border(System.Int32,System.String,Telerik.Web.Mvc.UI.ChartDashType)">
            <summary>
            Sets the title border
            </summary>
            <param name="width">The title border width.</param>
            <param name="color">The title border color.</param>
            <param name="dashType">The title dash type.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Title(title => title.Border(1, "#000", ChartDashType.Dot))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartLegendBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.ChartLegend"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLegendBuilder.#ctor(Telerik.Web.Mvc.UI.ChartLegend)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartLegendBuilder"/> class.
            </summary>
            <param name="chartLegend">The chart legend.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLegendBuilder.Font(System.String)">
            <summary>
            Sets the legend labels font
            </summary>
            <param name="font">The legend labels font (CSS format).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Legend(legend => legend.Font("16px Arial,Helvetica,sans-serif"))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLegendBuilder.Color(System.String)">
            <summary>
            Sets the legend labels color
            </summary>
            <param name="color">The labels color (CSS format).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Legend(legend => legend.Color("red"))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLegendBuilder.Background(System.String)">
            <summary>
            Sets the legend background color
            </summary>
            <param name="background">The background color.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Legend(legend => legend.Background("red"))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLegendBuilder.Position(Telerik.Web.Mvc.UI.ChartLegendPosition)">
            <summary>
            Sets the legend position
            </summary>
            <param name="position">The legend position.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Legend(legend => legend.Position(ChartLegendPosition.Bottom))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLegendBuilder.Visible(System.Boolean)">
            <summary>
            Sets the legend visibility
            </summary>
            <param name="visible">The legend visibility.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Legend(legend => legend.Visible(false))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLegendBuilder.Offset(System.Int32,System.Int32)">
            <summary>
            Sets the legend X and Y offset from its position
            </summary>
            <param name="offsetX">The legend X offset from its position.</param>
            <param name="offsetY">The legend Y offset from its position.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Legend(legend => legend.Offset(10, 50))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLegendBuilder.Margin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the legend margin
            </summary>
            <param name="top">The legend top margin.</param>
            <param name="right">The legend right margin.</param>
            <param name="bottom">The legend bottom margin.</param>
            <param name="left">The legend top margin.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Legend(legend => legend.Margin(0, 5, 5, 0))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLegendBuilder.Margin(System.Int32)">
            <summary>
            Sets the legend margin
            </summary>
            <param name="margin">The legend margin.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Legend(legend => legend.Margin(20))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLegendBuilder.Padding(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the legend padding
            </summary>
            <param name="top">The legend top padding.</param>
            <param name="right">The legend right padding.</param>
            <param name="bottom">The legend bottom padding.</param>
            <param name="left">The legend left padding.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Legend(legend => legend.Padding(0, 5, 5, 0))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLegendBuilder.Padding(System.Int32)">
            <summary>
            Sets the legend padding
            </summary>
            <param name="padding">The legend padding.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Legend(legend => legend.Padding(20))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartLegendBuilder.Border(System.Int32,System.String,Telerik.Web.Mvc.UI.ChartDashType)">
            <summary>
            Sets the legend border
            </summary>
            <param name="width">The legend border width.</param>
            <param name="color">The legend border color (CSS syntax).</param>
            <param name="dashType">The legend border dash type.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Legend(legend => legend.Border(1, "#000", ChartDashType.Dot))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartClientEventsBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.ChartClientEvents"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartClientEventsBuilder.#ctor(Telerik.Web.Mvc.UI.ChartClientEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartClientEventsBuilder"/> class.
            </summary>
            <param name="clientEvents">The client events.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartClientEventsBuilder.OnLoad(System.Action)">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="codeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .ClientEvents(events => events.OnLoad(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartClientEventsBuilder.OnLoad(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="inlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .ClientEvents(events => events.OnLoad(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartClientEventsBuilder.OnLoad(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnLoad client-side event.
            </summary>
            <param name="onLoadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .ClientEvents(events => events.OnLoad("onLoad"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartClientEventsBuilder.OnDataBound(System.Action)">
            <summary>
            Defines the inline handler of the OnDataBound client-side event
            </summary>
            <param name="codeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .ClientEvents(events => events.OnDataBound(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartClientEventsBuilder.OnDataBound(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnDataBound client-side event
            </summary>
            <param name="inlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .ClientEvents(events => events.OnDataBound(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartClientEventsBuilder.OnDataBound(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnDataBound client-side event.
            </summary>
            <param name="onDataBoundHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .ClientEvents(events => events.OnDataBound("onDataBound"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartClientEventsBuilder.OnSeriesClick(System.Action)">
            <summary>
            Defines the inline handler of the OnSeriesClick client-side event
            </summary>
            <param name="codeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .ClientEvents(events => events.OnSeriesClick(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartClientEventsBuilder.OnSeriesClick(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnSeriesClick client-side event
            </summary>
            <param name="inlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .ClientEvents(events => events.OnSeriesClick(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartClientEventsBuilder.OnSeriesClick(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnSeriesClick client-side event.
            </summary>
            <param name="onSeriesClickHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .ClientEvents(events => events.OnSeriesClick("onSeriesClick"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.Chart`1"/> component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.#ctor(Telerik.Web.Mvc.UI.Chart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1"/> class.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.ClientEvents(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartClientEventsBuilder})">
            <summary>
            Configures the client-side events.
            </summary>
            <param name="configurator">The client events configuration action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .ClientEvents(events => events
                            .OnLoad("onLoad")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.Theme(System.String)">
            <summary>
            Sets the theme of the chart.
            </summary>
            <param name="theme">The Chart theme.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Theme("Telerik")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.ChartArea(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartAreaBuilder})">
            <summary>
            Sets the Chart area.
            </summary>
            <param name="configurator">The Chart area.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .ChartArea(chartArea => chartArea.margin(20))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.PlotArea(System.Action{Telerik.Web.Mvc.UI.Fluent.PlotAreaBuilder})">
            <summary>
            Sets the Plot area.
            </summary>
            <param name="configurator">The Plot area.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .PlotArea(plotArea => plotArea.margin(20))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.Title(System.String)">
            <summary>
            Sets the title of the chart.
            </summary>
            <param name="title">The Chart title.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Title("Yearly sales")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.Title(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartTitleBuilder})">
            <summary>
            Defines the title of the chart.
            </summary>
            <param name="configurator">The configuration action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Title(title => title.Text("Yearly sales"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.Legend(System.Boolean)">
            <summary>
            Sets the legend visibility.
            </summary>
            <param name="visible">A value indicating whether to show the legend.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Legend(false)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.Legend(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartLegendBuilder})">
            <summary>
            Configures the legend.
            </summary>
            <param name="configurator">The configuration action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Legend(legend => legend.Visible(true).Position(ChartLegendPosition.Bottom))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.Series(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory{`0}})">
            <summary>
            Defines the chart series.
            </summary>
            <param name="configurator">The add action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .Series(series =>
                        {
                            series.Bar(s => s.SalesAmount);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.SeriesDefaults(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartSeriesDefaultsBuilder{`0}})">
            <summary>
            Defines the options for all chart series of the specified type.
            </summary>
            <param name="configurator">The configurator.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .SeriesDefaults(series => series.Bar().Stack(true))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.AxisDefaults(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartAxisDefaultsBuilder{`0}})">
            <summary>
            Defines the options for all chart axes of the specified type.
            </summary>
            <param name="configurator">The configurator.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .AxisDefaults(axisDefaults => axisDefaults.MinorTickSize(5))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.CategoryAxis(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartCategoryAxisBuilder{`0}})">
            <summary>
            Configures the category axis
            </summary>
            <param name="configurator">The configurator</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .CategoryAxis(axis => axis
                            .Categories(s => s.DateString)
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.ValueAxis(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartValueAxisFactory{`0}})">
            <summary>
            Configures the value axis
            </summary>
            <param name="configurator">The configurator</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .ValueAxis(a => a.Numeric().TickSize(4))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.XAxis(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartNumericAxisBuilder})">
            <summary>
            Configures the X-axis for scatter charts.
            </summary>
            <param name="configurator">The configurator</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .XAxis(a => a.Max(4))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.YAxis(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartNumericAxisBuilder})">
            <summary>
            Configures the Y-axis for scatter charts.
            </summary>
            <param name="configurator">The configurator</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .YAxis(a => a.Max(4))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.DataBinding(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartDataBindingConfigurationBuilder})">
            <summary>
            Use it to configure binding.
            </summary>
            <param name="configurator">Use the configurator to set different data binding options.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .DataBinding(dataBinding =>
                        {
                            dataBinding.Ajax().Select("SalesData", "Chart").Enabled((bool)ViewData["bindSales"]);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.SeriesColors(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the series colors.
            </summary>
            <param name="colors">A list of the series colors.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .SeriesColors(new string[] { "#f00", "#0f0", "#00f" })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.SeriesColors(System.String[])">
            <summary>
            Sets the series colors.
            </summary>
            <param name="colors">The series colors.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .SeriesColors("#f00", "#0f0", "#00f")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.Tooltip(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartTooltipBuilder})">
            <summary>
            Use it to configure the data point tooltip.
            </summary>
            <param name="configurator">Use the configurator to set data tooltip options.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Tooltip(tooltip =>
                        {
                            tooltip.Visible(true).Format("{0:C}");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.Tooltip(System.Boolean)">
            <summary>
            Sets the data point tooltip visibility.
            </summary>
            <param name="visible">
            A value indicating if the data point tooltip should be displayed.
            The tooltip is not visible by default.
            </param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Tooltip(true)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBuilder`1.Transitions(System.Boolean)">
            <summary>
            Enables or disabled animated transitions on initial load and refresh. 
            </summary>
            <param name="transitions">
            A value indicating if transition animations should be played.
            </param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Transitions(false)
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1">
            <summary>
            Creates series for the <see cref="T:Telerik.Web.Mvc.UI.Chart`1"/>.
            </summary>
            <typeparam name="TModel">The type of the data item to which the chart is bound to</typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.#ctor(Telerik.Web.Mvc.UI.Chart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Bar``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Defines bound bar series.
            </summary>
            <param name="expression">
            The expression used to extract the series value from the chart model
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Bar(System.String)">
            <summary>
            Defines bound bar series.
            </summary>
            <param name="memberName">
            The name of the value member.
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Bar(System.Type,System.String)">
            <summary>
            Defines bound bar series.
            </summary>
            <param name="memberType">
            The type of the value member.
            </param>
            <param name="memberName">
            The name of the value member.
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Bar(System.Collections.IEnumerable)">
            <summary>
            Defines bar series bound to inline data.
            </summary>
            <param name="data">
            The data to bind to.
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Column``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Defines bound column series.
            </summary>
            <param name="expression">
            The expression used to extract the series value from the chart model
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Column(System.String)">
            <summary>
            Defines bound bar series.
            </summary>
            <param name="memberName">
            The name of the value member.
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Column(System.Type,System.String)">
            <summary>
            Defines bound bar series.
            </summary>
            <param name="memberType">
            The type of the value member.
            </param>
            <param name="memberName">
            The name of the value member.
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Column(System.Collections.IEnumerable)">
            <summary>
            Defines bar series bound to inline data.
            </summary>
            <param name="data">
            The data to bind to
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Line``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Defines bound line series.
            </summary>
            <param name="expression">
            The expression used to extract the series value from the chart model
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Line(System.String)">
            <summary>
            Defines bound line series.
            </summary>
            <param name="memberName">
            The name of the value member.
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Line(System.Type,System.String)">
            <summary>
            Defines bound line series.
            </summary>
            <param name="memberType">
            The type of the value member.
            </param>
            <param name="memberName">
            The name of the value member.
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Line(System.Collections.IEnumerable)">
            <summary>
            Defines line series bound to inline data.
            </summary>
            <param name="data">
            The data to bind to
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Scatter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Defines bound scatter series.
            </summary>
            <param name="xValueExpression">
            The expression used to extract the X value from the chart model
            </param>
            <param name="yValueExpression">
            The expression used to extract the Y value from the chart model
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Scatter(System.String,System.String)">
            <summary>
            Defines bound scatter series.
            </summary>
            <param name="xMemberName">
            The name of the X value member.
            </param>
            <param name="yMemberName">
            The name of the Y value member.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Scatter(System.Type,System.String,System.String)" -->
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Scatter(System.Collections.IEnumerable)">
            <summary>
            Defines scatter series bound to inline data.
            </summary>
            <param name="data">
            The data to bind to
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.ScatterLine``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Defines bound scatter line series.
            </summary>
            <param name="xValueExpression">
            The expression used to extract the X value from the chart model
            </param>
            <param name="yValueExpression">
            The expression used to extract the Y value from the chart model
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.ScatterLine(System.String,System.String)">
            <summary>
            Defines bound scatter line series.
            </summary>
            <param name="xMemberName">
            The name of the X value member.
            </param>
            <param name="yMemberName">
            The name of the Y value member.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.ScatterLine(System.Type,System.String,System.String)" -->
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.ScatterLine(System.Collections.IEnumerable)">
            <summary>
            Defines scatter line series bound to inline data.
            </summary>
            <param name="data">
            The data to bind to
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Pie``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Defines bound pie series.
            </summary>
            <param name="expressionValue">
            The expression used to extract the series value from the chart model
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Pie``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Defines bound pie series.
            </summary>
            <param name="expressionValue">
            The expression used to extract the series value from the chart model
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Pie(System.String,System.String)">
            <summary>
            Defines bound pie series.
            </summary>
            <param name="memberName">
            The name of the value member.
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Pie(System.String,System.String,System.String,System.String)">
            <summary>
            Defines bound pie series.
            </summary>
            <param name="valueMemberName">
            The name of the value member.
            </param>
            <param name="categoryMemberName">
            The name of the category member.
            </param>
            <param name="explodeMemberName">
            The name of the explode member.
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Pie(System.Type,System.String,System.String,System.String,System.String)">
            <summary>
            Defines bound pie series.
            </summary>
            <param name="memberType">
            The type of the value member.
            </param>
            <param name="valueMemberName">
            The name of the value member.
            </param>
            <param name="categoryMemberName">
            The name of the category member.
            </param>
            <param name="explodeMemberName">
            The name of the explode member.
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Pie(System.Collections.IEnumerable)">
            <summary>
            Defines pie series bound to inline data.
            </summary>
            <param name="data">
            The data to bind to
            </param>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Fluent.ChartSeriesFactory`1.Container">
            <summary>
            The parent Chart
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartBarSeriesBuilder`1">
            <summary>
            Defines the fluent interface for configuring bar series.
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBarSeriesBuilder`1.#ctor(Telerik.Web.Mvc.UI.IChartBarSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartBarSeriesBuilder`1"/> class.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBarSeriesBuilder`1.Stack(System.Boolean)">
            <summary>
            Sets a value indicating if the bars should be stacked.
            </summary>
            <param name="stacked">A value indicating if the bars should be stacked.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .Series(series => series.Bar(s => s.Sales).Stack(true))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBarSeriesBuilder`1.Gap(System.Double)">
            <summary>
            Set distance between category clusters. 
            <param name="gap">
            A value of 1 means that there is a total of 1 column width / bar height between categories.
            The distance is distributed evenly on each side.
            The default value is 1.5
            </param>
            </summary>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Chart(Model)
                .Name("Chart")
                .Series(series => series.Bar(s => s.Sales).Gap(1))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBarSeriesBuilder`1.Spacing(System.Double)">
            <summary>
            Sets a value indicating the distance between bars / categories.
            </summary>
            <param name="spacing">
            Value of 1 means that the distance between bars is equal to their width.
            The default value is 0
            </param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Chart(Model)
                .Name("Chart")
                .Series(series => series.Spacing(s => s.Sales).Spacing(1))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBarSeriesBuilder`1.Labels(System.Action{Telerik.Web.Mvc.UI.Fluent.ChartBarLabelsBuilder})">
            <summary>
            Configures the bar chart labels.
            </summary>
            <param name="configurator">The configuration action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Series(series => series
                            .Bar(s => s.Sales)
                            .Labels(labels => labels
                                .Position(ChartBarLabelsPosition.InsideEnd)
                                .Visible(true)
                            );
                         )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBarSeriesBuilder`1.Labels(System.Boolean)">
            <summary>
            Sets the visibility of bar chart labels.
            </summary>
            <param name="visible">The visibility. The default value is false.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .Series(series => series
                            .Bar(s => s.Sales)
                            .Labels(true);
                         )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBarSeriesBuilder`1.Border(System.Int32,System.String,Telerik.Web.Mvc.UI.ChartDashType)">
            <summary>
            Sets the bars border
            </summary>
            <param name="width">The bars border width.</param>
            <param name="color">The bars border color (CSS syntax).</param>
            <param name="dashType">The bars border dash type.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Series(series => series.Bar(s => s.Sales).Border("1", "#000", ChartDashType.Dot))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartBarSeriesBuilder`1.Overlay(Telerik.Web.Mvc.UI.ChartBarSeriesOverlay)">
            <summary>
            Sets the bar effects overlay
            </summary>
            <param name="overlay">The bar effects overlay. The default is ChartBarSeriesOverlay.Glass</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Chart()
                       .Name("Chart")
                       .Series(series => series.Bar(s => s.Sales).Overlay(ChartBarSeriesOverlay.None))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartCategoryAxisBuilder`1">
            <summary>
            Configures the category axis for the <see cref="T:Telerik.Web.Mvc.UI.Chart`1"/>.
            </summary>
            <typeparam name="TModel">The type of the data item to which the chart is bound to</typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartCategoryAxisBuilder`1.#ctor(Telerik.Web.Mvc.UI.Chart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartCategoryAxisBuilder`1"/> class.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartCategoryAxisBuilder`1.Categories``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Defines bound categories.
            </summary>
            <param name="expression">
            The expression used to extract the categories value from the chart model
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartCategoryAxisBuilder`1.Categories(System.Collections.IEnumerable)">
            <summary>
            Defines categories.
            </summary>
            <param name="categories">
            The list of categories
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartCategoryAxisBuilder`1.Categories(System.String[])">
            <summary>
            Defines categories.
            </summary>
            <param name="categories">
            The list of categories
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartCategoryAxisBuilder`1.Orientation(Telerik.Web.Mvc.UI.ChartAxisOrientation)">
            <summary>
            Sets the axis orientation. The ValueAxis orientation should be set to match.
            </summary>
            <param name="orientation">The orientation. The default value is inferred from the series type.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
                        .CategoryAxis(c => c.Orientation(ChartAxisOrientation.Vertical))
                        .ValueAxis(v => v.Orientation(ChartAxisOrientation.Horizontal))
                        .Series(series => series.Line(s => s.Sales))
            %&gt;
            </code>
            </example>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Fluent.ChartCategoryAxisBuilder`1.Container">
            <summary>
            The parent Chart
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ChartDataBindingConfigurationBuilder">
            <summary>
            Defines the fluent interface for configuring data binding.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartDataBindingConfigurationBuilder.#ctor(Telerik.Web.Mvc.UI.ChartDataBindingSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ChartDataBindingConfigurationBuilder"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ChartDataBindingConfigurationBuilder.Ajax">
            <summary>
            Use it to configure Ajax binding.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("SalesData", "Chart");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Html.ChartHtmlBuilder`1">
            <summary>
            An HTML Builder for the Chart component
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Html.ChartHtmlBuilder`1.#ctor(Telerik.Web.Mvc.UI.Chart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Html.ChartHtmlBuilder`1"/> class.
            </summary>
            <param name="component">The Chart component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Html.ChartHtmlBuilder`1.CreateChart">
            <summary>
            Creates the chart top-level div.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Html.ChartHtmlBuilder`1.BuildCore">
            <summary>
            Builds the Chart component markup.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartBarSeries`2">
            <summary>
            Represents chart bar or column series
            </summary>
            <typeparam name="TModel">The Chart model type</typeparam>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartBoundSeries`2">
            <summary>
            Represents Chart series bound to data.
            </summary>
            <typeparam name="TModel">The Chart model type</typeparam>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartSeriesBase`1">
            <summary>
            Represents a series in the <see cref="T:Telerik.Web.Mvc.UI.Chart`1"/> component
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IChartSeries">
            <summary>
            Represents chart series
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IChartSeries.CreateSerializer">
            <summary>
            Creates a serializer for the series
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartSeries.Name">
            <summary>
            The series name.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartSeries.Opacity">
            <summary>
            The series opacity
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartSeries.Color">
            <summary>
            The series base color
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartSeriesBase`1.#ctor(Telerik.Web.Mvc.UI.Chart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartSeriesBase`1"/> class.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartSeriesBase`1.CreateSerializer">
            <summary>
            Creates a serializer for the series
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartSeriesBase`1.Chart">
            <summary>
            Gets or sets the chart.
            </summary>
            <value>The chart.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartSeriesBase`1.Name">
            <summary>
            Gets or sets the title of the series.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartSeriesBase`1.Opacity">
            <summary>
            Gets or sets the series opacity.
            </summary>
            <value>A value between 0 (transparent) and 1 (opaque).</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartSeriesBase`1.Color">
            <summary>
            Gets or sets the series base color
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IChartBoundSeries">
            <summary>
            Represents Chart series bound to data.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartBoundSeries.Member">
            <summary>
            Gets the data member of the series.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartBoundSeries.Data">
            <summary>
            The data used for binding.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartBoundSeries`2.#ctor(Telerik.Web.Mvc.UI.Chart{`0},System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartBoundSeries`2"/> class.
            </summary>
            <param name="chart">The chart.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartBoundSeries`2.#ctor(Telerik.Web.Mvc.UI.Chart{`0},System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartBoundSeries`2"/> class.
            </summary>
            <param name="chart">The chart.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartBoundSeries`2.#ctor(Telerik.Web.Mvc.UI.Chart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartBoundSeries`2"/> class.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartBoundSeries`2.BindChartData">
            <summary>
            Binds the series
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartBoundSeries`2.Value">
            <summary>
            Gets a function which returns the value of the property to which the column is bound to.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartBoundSeries`2.Data">
            <summary>
            The data used for binding.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartBoundSeries`2.Expression">
            <summary>
            The expression used to extract the value from the model
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartBoundSeries`2.Member">
            <summary>
            Gets the model data member name.
            </summary>
            <value>The model data member name.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IChartBarSeries">
            <summary>
            Represents chart bar or column series
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartBarSeries.Stacked">
            <summary>
            A value indicating if the bars should be stacked.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartBarSeries.Gap">
            <summary>
            The distance between category clusters.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartBarSeries.Spacing">
            <summary>
            Space between bars.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartBarSeries.Orientation">
            <summary>
            The orientation of the bars.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartBarSeries.Labels">
            <summary>
            Gets the bar chart data labels configuration
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartBarSeries.Border">
            <summary>
            Gets or sets the bar's border
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartBarSeries.Overlay">
            <summary>
            Gets or sets the effects overlay
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartBarSeries`2.#ctor(Telerik.Web.Mvc.UI.Chart{`0},System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartBarSeries`2"/> class.
            </summary>
            <param name="chart">The parent chart</param>
            <param name="expression">The expression used to extract the series value from the chart model.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartBarSeries`2.#ctor(Telerik.Web.Mvc.UI.Chart{`0},System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartBarSeries`2"/> class.
            </summary>
            <param name="chart">The parent chart</param>
            <param name="data">The data to bind to.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartBarSeries`2.#ctor(Telerik.Web.Mvc.UI.Chart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartBarSeries`2"/> class.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartBarSeries`2.CreateSerializer">
            <summary>
            Creates a serializer for the series
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartBarSeries`2.Stacked">
            <summary>
            A value indicating if the bars should be stacked.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartBarSeries`2.Gap">
            <summary>
            The distance between category clusters.
            </summary>
            <value>
            A value of 1 means that there is a total of 1 column width / bar height between categories. 
            The distance is distributed evenly on each side.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartBarSeries`2.Spacing">
            <summary>
            Space between bars.
            </summary>
            <value>
            Value of 1 means that the distance between bars is equal to their width.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartBarSeries`2.Orientation">
            <summary>
            The orientation of the bars.
            </summary>
            <value>
            Can be either <see cref="F:Telerik.Web.Mvc.UI.ChartBarSeriesOrientation.Horizontal">horizontal</see> (bar chart)
            or vertical <see cref="F:Telerik.Web.Mvc.UI.ChartBarSeriesOrientation.Vertical">vertical</see> (column chart).
            The default value is horizontal.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartBarSeries`2.Labels">
            <summary>
            Gets the bar chart data labels configuration
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartBarSeries`2.Border">
            <summary>
            Gets or sets the bar border
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartBarSeries`2.Overlay">
            <summary>
            Gets or sets the effects overlay
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartPieConnectors">
            <summary>
            Represents the options of the pie chart connectors
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartPieConnectors.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartPieConnectors"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartPieConnectors.CreateSerializer">
            <summary>
            Creates a serializer
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieConnectors.Width">
            <summary>
            Defines the width of the line.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieConnectors.Color">
            <summary>
            Defines the color of the line.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieConnectors.Padding">
            <summary>
            Defines the padding of the line.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartPieLabels">
            <summary>
            Represents the options of the pie chart labels
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartPieLabels.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartPieLabels"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartPieLabels.CreateSerializer">
            <summary>
            Creates a serializer
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieLabels.Align">
            <summary>
            Defines the alignment of the pie labels.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieLabels.Distance">
            <summary>
            Defines the distance between the pie chart and labels.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieLabels.Position">
            <summary>
            Defines the position of the pie labels.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartPieSeries`2">
            <summary>
            Represents chart pie series
            </summary>
            <typeparam name="TModel">The Chart model type</typeparam>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IChartPieSeries">
            <summary>
            Represents pie chart series
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartPieSeries.CategoryMember">
            <summary>
            Gets the data category member of the series.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartPieSeries.ExplodeMember">
            <summary>
            Gets the data expand member of the series.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartPieSeries.ColorMember">
            <summary>
            Gets the data color member of the series.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartPieSeries.Labels">
            <summary>
            Gets the pie chart data labels configuration
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartPieSeries.Border">
            <summary>
            Gets or sets the pie's border
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartPieSeries.Overlay">
            <summary>
            Gets or sets the effects overlay
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartPieSeries.Padding">
            <summary>
            Gets or sets the padding of the pie chart
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartPieSeries.StartAngle">
            <summary>
            Gets or sets the start angle of the first pie segment
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartPieSeries.Connectors">
            <summary>
            Gets the pie chart connectors configuration
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartPieSeries`2.#ctor(Telerik.Web.Mvc.UI.Chart{`0},System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartPieSeries`2"/> class.
            </summary>
            <param name="chart">The chart.</param>
            <param name="expressionValue">The value expression.</param>
            <param name="expressionCategory">The category expression.</param>
            <param name="expressionColor">The color expression.</param>
            <param name="expressionExplode">The explode expression.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartPieSeries`2.#ctor(Telerik.Web.Mvc.UI.Chart{`0},System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartPieSeries`2"/> class.
            </summary>
            <param name="chart">The chart.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartPieSeries`2.#ctor(Telerik.Web.Mvc.UI.Chart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartPieSeries`2"/> class.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartPieSeries`2.BindChartData">
            <summary>
            Binds the series
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartPieSeries`2.CreateSerializer">
            <summary>
            Creates a serializer for the series
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieSeries`2.Expression">
            <summary>
            The expression used to extract the value from the model
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieSeries`2.Member">
            <summary>
            Gets the model data member name.
            </summary>
            <value>The model data member name.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieSeries`2.CategoryMember">
            <summary>
            Gets the model data category member name.
            </summary>
            <value>The model data category member name.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieSeries`2.ExplodeMember">
            <summary>
            Gets the model data explode member name.
            </summary>
            <value>The model data explode member name.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieSeries`2.ColorMember">
            <summary>
            Gets the model data color member name.
            </summary>
            <value>The model data color member name.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieSeries`2.Value">
            <summary>
            Gets a function which returns the value of the property to which the column is bound to.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieSeries`2.Category">
            <summary>
            Gets a function which returns the category of the property to which the column is bound to.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieSeries`2.Explode">
            <summary>
            Gets a function which returns the explode of the property to which the column is bound to.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieSeries`2.Color">
            <summary>
            Gets a function which returns the color of the property to which the column is bound to.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieSeries`2.Labels">
            <summary>
            Gets the pie chart data labels configuration
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieSeries`2.Border">
            <summary>
            Gets or sets the pie border
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieSeries`2.Data">
            <summary>
            The pie chart data configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieSeries`2.Overlay">
            <summary>
            Gets or sets the effects overlay.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieSeries`2.Padding">
            <summary>
            Gets or sets the padding of the chart.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieSeries`2.StartAngle">
            <summary>
            Gets or sets the start angle of the first pie segment.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPieSeries`2.Connectors">
            <summary>
            Gets the pie chart connectors configuration
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartBarSeriesOrientation">
            <summary>
            Defines the possible bar series orientation.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartBarSeriesOrientation.Horizontal">
            <summary>
            The bars are horizontal (bar chart)
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartBarSeriesOrientation.Vertical">
            <summary>
            The bars are vertical (column chart)
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartSeriesDefaults`1">
            <summary>
            Represents the default settings for all series in the <see cref="T:Telerik.Web.Mvc.UI.Chart`1"/> component
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IChartSeriesDefaults">
            <summary>
            Represents default chart series settings
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartSeriesDefaults.Bar">
            <summary>
            The default settings for all bar series
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartSeriesDefaults.Column">
            <summary>
            The default settings for all column series
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartSeriesDefaults.Line">
            <summary>
            The default settings for all line series
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartSeriesDefaults.Pie">
            <summary>
            The default settings for all line series
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartSeriesDefaults.Scatter">
            <summary>
            The default settings for all scatter series
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartSeriesDefaults.ScatterLine">
            <summary>
            The default settings for all scatter line series
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartSeriesDefaults`1.#ctor(Telerik.Web.Mvc.UI.Chart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartSeriesDefaults`1"/> class.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartSeriesDefaults`1.CreateSerializer">
            <summary>
            Creates a serializer for the series defaults
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartSeriesDefaults`1.Bar">
            <summary>
            The default settings for all bar series.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartSeriesDefaults`1.Column">
            <summary>
            The default settings for all column series.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartSeriesDefaults`1.Line">
            <summary>
            The default settings for all line series.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartSeriesDefaults`1.Pie">
            <summary>
            The default settings for all pie series.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartSeriesDefaults`1.Scatter">
            <summary>
            The default settings for all scatter series.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartSeriesDefaults`1.ScatterLine">
            <summary>
            The default settings for all scatter line series.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartPointLabels">
            <summary>
            Represents the options of the chart point labels
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartPointLabels.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartPointLabels"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartPointLabels.CreateSerializer">
            <summary>
            Creates a serializer
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartPointLabels.Position">
            <summary>
            Gets or sets the label position.
            </summary>
            <remarks>
            The default value is <see cref="F:Telerik.Web.Mvc.UI.ChartPointLabelsPosition.Above"/> for clustered series and
            <see cref="F:Telerik.Web.Mvc.UI.ChartPointLabelsPosition.Above"/> for stacked series.
            </remarks>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartLineSeries`2">
            <summary>
            Represents chart line series
            </summary>
            <typeparam name="TModel">The Chart model type</typeparam>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IChartLineSeries">
            <summary>
            Represents chart line chart series
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartLineSeries.Stacked">
            <summary>
            A value indicating if the lines should be stacked.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartLineSeries.Labels">
            <summary>
            Gets the line chart data labels configuration
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartLineSeries.Markers">
            <summary>
            The line chart markers configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartLineSeries.Width">
            <summary>
            The line chart line width.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartLineSeries.DashType">
            <summary>
            The line chart line dash type.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartLineSeries.MissingValues">
            <summary>
            The behavior for handling missing values in line series.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartLineSeries`2.#ctor(Telerik.Web.Mvc.UI.Chart{`0},System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartBarSeries`2"/> class.
            </summary>
            <param name="chart">The parent chart</param>
            <param name="expression">The expression used to extract the series value from the chart model.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartLineSeries`2.#ctor(Telerik.Web.Mvc.UI.Chart{`0},System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartLineSeries`2"/> class.
            </summary>
            <param name="chart">The parent chart</param>
            <param name="data">The data to bind to.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartLineSeries`2.#ctor(Telerik.Web.Mvc.UI.Chart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartLineSeries`2"/> class.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartLineSeries`2.CreateSerializer">
            <summary>
            Creates a serializer for the series
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLineSeries`2.Stacked">
            <summary>
            A value indicating if the lines should be stacked.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLineSeries`2.Labels">
            <summary>
            Gets the line chart data labels configuration
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLineSeries`2.Markers">
            <summary>
            The line chart markers configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLineSeries`2.Width">
            <summary>
            The line chart line width.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLineSeries`2.MissingValues">
            <summary>
            The behavior for handling missing values in line series.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartLineSeries`2.DashType">
            <summary>
            The line chart line dashType.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartBarSeriesOverlay">
            <summary>
            Defines the available bar series effects overlays
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartBarSeriesOverlay.None">
            <summary>
            The bars have no effect overlay
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ChartBarSeriesOverlay.Glass">
            <summary>
            The bars have glass effect overlay
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartScatterSeries`2">
            <summary>
            Represents chart scatter (XY) series
            </summary>
            <typeparam name="TModel">The Chart model type</typeparam>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IChartScatterSeries">
            <summary>
            Represents chart scatter series
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartScatterSeries.XMember">
            <summary>
            Gets the X data member of the series.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartScatterSeries.YMember">
            <summary>
            Gets the Y data member of the series.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartScatterSeries.Labels">
            <summary>
            Gets the scatter chart data labels configuration
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartScatterSeries.Markers">
            <summary>
            The scatter chart markers configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartScatterSeries.Data">
            <summary>
            The data used for binding.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartScatterSeries`2.#ctor(Telerik.Web.Mvc.UI.Chart{`0},System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartScatterSeries`2"/> class.
            </summary>
            <param name="chart">The chart.</param>
            <param name="expressionXValue">The X expression.</param>
            <param name="expressionYValue">The Y expression.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartScatterSeries`2.#ctor(Telerik.Web.Mvc.UI.Chart{`0},System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartScatterSeries`2"/> class.
            </summary>
            <param name="chart">The chart.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartScatterSeries`2.#ctor(Telerik.Web.Mvc.UI.Chart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartScatterSeries`2"/> class.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartScatterSeries`2.BindChartData">
            <summary>
            Binds the series
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartScatterSeries`2.CreateSerializer">
            <summary>
            Creates a serializer for the series
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartScatterSeries`2.XValueExpression">
            <summary>
            The expression used to extract the X value from the model
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartScatterSeries`2.YValueExpression">
            <summary>
            The expression used to extract the Y value from the model
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartScatterSeries`2.XMember">
            <summary>
            Gets the model X data member name.
            </summary>
            <value>The model X data member name.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartScatterSeries`2.YMember">
            <summary>
            Gets the model Y data member name.
            </summary>
            <value>The model Y data member name.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartScatterSeries`2.XValue">
            <summary>
            Gets a function which returns the value of the property to which the X value is bound to.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartScatterSeries`2.YValue">
            <summary>
            Gets a function which returns the value of the property to which the Y value is bound to.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartScatterSeries`2.Labels">
            <summary>
            Gets the scatter chart data labels configuration
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartScatterSeries`2.Markers">
            <summary>
            The line chart markers configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartScatterSeries`2.Data">
            <summary>
            The scatter chart data source.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartScatterLineSeries`2">
            <summary>
            Represents chart scatter line series
            </summary>
            <typeparam name="TModel">The Chart model type</typeparam>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IChartScatterLineSeries">
            <summary>
            Represents chart scatter line series
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartScatterLineSeries.Width">
            <summary>
            The line chart line width.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartScatterLineSeries.DashType">
            <summary>
            The chart line dash type.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IChartScatterLineSeries.MissingValues">
            <summary>
            The behavior for handling missing values in scatter line series.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartScatterLineSeries`2.#ctor(Telerik.Web.Mvc.UI.Chart{`0},System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartScatterLineSeries`2"/> class.
            </summary>
            <param name="chart">The chart.</param>
            <param name="expressionXValue">The X expression.</param>
            <param name="expressionYValue">The Y expression.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartScatterLineSeries`2.#ctor(Telerik.Web.Mvc.UI.Chart{`0},System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartScatterLineSeries`2"/> class.
            </summary>
            <param name="chart">The chart.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartScatterLineSeries`2.#ctor(Telerik.Web.Mvc.UI.Chart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartScatterLineSeries`2"/> class.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartScatterLineSeries`2.CreateSerializer">
            <summary>
            Creates a serializer for the series
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartScatterLineSeries`2.Width">
            <summary>
            The chart line width.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartScatterLineSeries`2.DashType">
            <summary>
            The chart line dashType.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartScatterLineSeries`2.MissingValues">
            <summary>
            The behavior for handling missing values in scatter line series.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartBindingSettings">
            <summary>
            Represents the chart binding settings
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartBindingSettings.#ctor(Telerik.Web.Mvc.UI.IChart)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartBindingSettings"/> class.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartBindingSettings.SerializeTo(System.String,Telerik.Web.Mvc.UI.IClientSideObjectWriter)">
            <summary>
            Serializes the binding settings to the specified writer
            </summary>
            <param name="key">The settings key</param>
            <param name="writer">The writer</param>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartBindingSettings.Enabled">
            <summary>
            Gets or sets a value indicating if the binding is enabled
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartBindingSettings.Select">
            <summary>
            The request settings for the Select operation
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ChartDataBindingSettings">
            <summary>
            Represents the chart data binding settings
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ChartDataBindingSettings.#ctor(Telerik.Web.Mvc.UI.IChart)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ChartDataBindingSettings"/> class.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ChartDataBindingSettings.Ajax">
            <summary>
            Represents the chart Ajax binding settings
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ComboBox.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ComboBox.Items">
            <summary>
            Gets the items of the ComboBox.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ComboBoxFilterSettingsBuilder">
            <summary>
            Defines the fluent interface for building <see cref="T:Telerik.Web.Mvc.UI.Fluent.ComboBoxFilterSettingsBuilder"/>
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ComboBoxFilterSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.ComboBoxFilterSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ComboBoxFilterSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ComboBoxFilterSettingsBuilder.Enabled(System.Boolean)">
            <summary>
            Enables or disables filtering.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBox()
                        .Name("ComboBox")
                        .Filterable(filtering => 
                        {
                            filtering.Enabled((bool)ViewData["filtering"]);
                        })
            %&gt;
            </code>
            </example>
            <remarks>
            The Enabled method is useful when you need to enable/disable filtering based on certain conditions.
            </remarks>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ComboBoxFilterSettingsBuilder.FilterMode(Telerik.Web.Mvc.UI.AutoCompleteFilterMode)">
            <summary>
            Defines filter mode.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBox()
                        .Name("ComboBox")
                        .Filterable(filtering => 
                        {
                            filtering.FilterMode(AutoCompleteFilterMode.StartsWith);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ComboBoxFilterSettingsBuilder.MinimumChars(System.Int32)">
            <summary>
            Set minimum chars number needed to start filtering.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBox()
                        .Name("ComboBox")
                        .Filterable(filtering => 
                        {
                            filtering.MinimumChars(2);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.ComboBoxBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.ComboBox"/> component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownBuilderBase`2.ClientEvents(System.Action{Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder})">
            <summary>
            Configures the client-side events.
            </summary>
            <param name="clientEventsAction">The client events action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .ClientEvents(events =>
                            events.OnLoad("onLoad")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownBuilderBase`2.Effects(System.Action{Telerik.Web.Mvc.UI.EffectsBuilder})">
            <summary>
            Configures the effects of the dropdownlist.
            </summary>
            <param name="effectsAction">The action which configures the effects.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().DropDownList()
                       .Name("DropDownList")
                       .Effects(fx =>
                       {
            	            fx.Slide()
            				  .OpenDuration(AnimationDuration.Normal)
            				  .CloseDuration(AnimationDuration.Normal);
                       })
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownBuilderBase`2.Items(System.Action{Telerik.Web.Mvc.UI.Fluent.DropDownItemFactory})">
            <summary>
            Defines the items in the DropDownList
            </summary>
            <param name="addAction">The add action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .Items(items =>
                        {
                            items.Add().Text("First Item");
                            items.Add().Text("Second Item");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.Fluent.DropDownBuilderBase`2.BindTo(System.Collections.Generic.IEnumerable{Telerik.Web.Mvc.UI.DropDownItem})" -->
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.Fluent.DropDownBuilderBase`2.BindTo(System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})" -->
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownBuilderBase`2.HiddenInputHtmlAttributes(System.Object)">
            <summary>
            Sets the HTML attributes of the hidden input element.
            </summary>
            <param name="attributes">The HTML attributes.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownBuilderBase`2.HiddenInputHtmlAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the HTML attributes of the hidden input element.
            </summary>
            <param name="attributes">The HTML attributes.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.Fluent.DropDownBuilderBase`2.Encode(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.Fluent.DropDownBuilderBase`2.Value(System.String)" -->
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ComboBoxBuilder.#ctor(Telerik.Web.Mvc.UI.ComboBox)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.ComboBoxBuilder"/> class.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ComboBoxBuilder.Filterable">
            <summary>
            Use it to enable filtering of items.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBox()
                        .Name("ComboBox")
                        .Filterable();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ComboBoxBuilder.Filterable(System.Action{Telerik.Web.Mvc.UI.Fluent.ComboBoxFilterSettingsBuilder})">
            <summary>
            Use it to configure filtering settings.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBox()
                        .Name("ComboBox")
                        .Filterable(filtering => filtering.Enabled(true)
                                                          .FilterMode(AutoCompleteFilterMode.Contains));
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ComboBoxBuilder.InputHtmlAttributes(System.Object)">
            <summary>
            Sets the HTML attributes of the input element.
            </summary>
            <param name="attributes">The HTML attributes.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ComboBoxBuilder.InputHtmlAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the HTML attributes of the input element.
            </summary>
            <param name="attributes">The HTML attributes.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ComboBoxBuilder.AutoFill(System.Boolean)">
            <summary>
            Use it to enable filling the first matched item text.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBox()
                        .Name("ComboBox")
                        .AutoFill(true)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ComboBoxBuilder.DataBinding(System.Action{Telerik.Web.Mvc.UI.Fluent.AutoCompleteDataBindingConfigurationBuilder})">
            <summary>
            Use it to configure Data binding.
            </summary>
            <param name="configurator">Action that configures the data binding options.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBox()
                        .Name("ComboBox")
                        .DataBinding(dataBinding => dataBinding
                           .Ajax().Select("_AjaxLoading", "ComboBox")
                        );
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ComboBoxBuilder.HighlightFirstMatch(System.Boolean)">
            <summary>
            Use it to enable highlighting of first matched item.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBox()
                        .Name("ComboBox")
                        .HighlightFirstMatch(true)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ComboBoxBuilder.SelectedIndex(System.Int32)">
            <summary>
            Use it to set selected item index
            </summary>
            <param name="index">Item index.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBox()
                        .Name("ComboBox")
                        .SelectedIndex(0);
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ComboBoxBuilder.Enable(System.Boolean)">
            <summary>
            Enables or disables the combobox.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.ComboBoxBuilder.OpenOnFocus(System.Boolean)">
            <summary>
            Sets whether to open items list on focus.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBindingSettingsBuilder">
            <summary>
            Defines the fluent interface for building <see cref="T:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBindingSettingsBuilder"/>
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.DropDownBindingSettingsBuilder`1">
            <summary>
            Defines the fluent interface for building <see cref="T:Telerik.Web.Mvc.UI.Fluent.DropDownBindingSettingsBuilder`1"/>
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownBindingSettingsBuilder`1.#ctor(Telerik.Web.Mvc.UI.IDropDownBindingSettings)">
            <summary>
            Initializes a new instance of the <see cref="!:DropDownBindingSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownBindingSettingsBuilder`1.Enabled(System.Boolean)">
            <summary>
            Enables or disables binding.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Index", "Home").Enabled((bool)ViewData["ajax"]);
                        })
            %&gt;
            </code>
            </example>
            <remarks>
            The Enabled method is useful when you need to enable binding based on certain conditions.
            </remarks>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownBindingSettingsBuilder`1.Select(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller and route values for the select operation
            </summary>
            <param name="routeValues">The route values of the Action method.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select(MVC.Home.Indec(1).GetRouteValueDictionary());
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownBindingSettingsBuilder`1.Select(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller and route values for the select operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Index", "Home", new RouteValueDictionary{ {"id", 1} });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownBindingSettingsBuilder`1.Select(System.String,System.String,System.Object)">
            <summary>
            Sets the action, controller and route values for the select operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Index", "Home", new { {"id", 1} });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownBindingSettingsBuilder`1.Select(System.String,System.String)">
            <summary>
            Sets the action, controller and route values for the select operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Index", "Home");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownBindingSettingsBuilder`1.Select(System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the route and values for the select operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Default", "Home", new RouteValueDictionary{ {"id", 1} });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownBindingSettingsBuilder`1.Select(System.String,System.Object)">
            <summary>
            Sets the route and values for the select operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Default", new {id=1});
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownBindingSettingsBuilder`1.Select(System.String)">
            <summary>
            Sets the route name for the select operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Default");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBindingSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.AutoCompleteBindingSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBindingSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBindingSettingsBuilder.Cache(System.Boolean)">
            <summary>
            Enables or disables cache of items.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBox()
                        .Name("ComboBox")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Index", "Home").Cache((bool)ViewData["cache"]);
                        })
            %&gt;
            </code>
            </example>
            <remarks>
            The Cache method is useful when you need to enable/disable caching based on certain conditions.
            Default value is true.
            </remarks>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBindingSettingsBuilder.Delay(System.Int32)">
            <summary>
            Specifies delay of the Ajax/WebServer request.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBox()
                        .Name("ComboBox")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Index", "Home").Delay(400);
                        })
            %&gt;
            </code>
            </example>
            <remarks>
            The Delay method is useful when you need to postpone request to the server for some time.
            </remarks>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.AutoCompleteFilterSettingsBuilder">
            <summary>
            Defines the fluent interface for building <see cref="T:Telerik.Web.Mvc.UI.Fluent.AutoCompleteFilterSettingsBuilder"/>
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteFilterSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.AutoCompleteFilterSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.AutoCompleteFilterSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteFilterSettingsBuilder.FilterMode(Telerik.Web.Mvc.UI.AutoCompleteFilterMode)">
            <summary>
            Defines filter mode.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBox()
                        .Name("ComboBox")
                        .Filterable(filtering => 
                        {
                            filtering.FilterMode(AutoCompleteFilterMode.StartsWith);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteFilterSettingsBuilder.MinimumChars(System.Int32)">
            <summary>
            Set minimum chars number needed to start filtering.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBox()
                        .Name("ComboBox")
                        .Filterable(filtering => 
                        {
                            filtering.MinimumChars(2);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.AutoCompleteDataBindingConfigurationBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.AutoCompleteDataBindingConfiguration"/> data binding.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteDataBindingConfigurationBuilder.#ctor(Telerik.Web.Mvc.UI.IDropDownDataBindingConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.AutoCompleteDataBindingConfigurationBuilder"/> class.
            </summary>
            <param name="settings">The configuration.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteDataBindingConfigurationBuilder.Ajax">
            <summary>
            Use it to configure Ajax binding.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBox()
                        .Name("ComboBox")
                        .DataBinding(dataBinding => dataBinding
                           .Ajax().Select("_AjaxLoading", "TreeView")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteDataBindingConfigurationBuilder.WebService">
            <summary>
            Use it to configure web service binding.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBox()
                        .Name("ComboBox")
                        .DataBinding(dataBinding => dataBinding
                           .WebService().Select("~/Models/ProductDDI.asmx/GetProducts")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.AutoCompleteWebServiceBindingSettingsBuilder">
            <summary>
            Defines the fluent interface for building <see cref="T:Telerik.Web.Mvc.UI.Fluent.AutoCompleteWebServiceBindingSettingsBuilder"/>
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.DropDownWebServiceBindingSettingsBuilder`1">
            <summary>
            Defines the fluent interface for configuring the treeview webservice.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownWebServiceBindingSettingsBuilder`1.#ctor(Telerik.Web.Mvc.UI.IDropDownBindingSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.DropDownWebServiceBindingSettingsBuilder`1"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownWebServiceBindingSettingsBuilder`1.Select(System.String)">
            <summary>
            Specify the web service url for loading data
            </summary>
            <param name="value">The web service url</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .DataBinding(dataBinding => dataBinding
                           .WebService().Select("~/Models/ProductDDI.asmx/GetProducts")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownWebServiceBindingSettingsBuilder`1.Enabled(System.Boolean)">
            <summary>
            Enables / disables web service functionality.
            </summary>
            <param name="value">Whether to enable or to disable the web service.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .DataBinding(dataBinding => dataBinding
                           .Ajax().Enabled(true).Select("_AjaxLoading", "DropDownList")
                        )
            %&gt;
            </code>
            </example>
            <remarks>
            The Enabled method is useful when you need to enable ajax based on certain conditions.
            </remarks>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteWebServiceBindingSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.AutoCompleteBindingSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.AutoCompleteBindingSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteWebServiceBindingSettingsBuilder.Cache(System.Boolean)">
            <summary>
            Enables or disables cache of items.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBox()
                        .Name("ComboBox")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.WebService().Select("~/Models/Product.asmx/GetProducts").Cache((bool)ViewData["cache"]);
                        })
            %&gt;
            </code>
            </example>
            <remarks>
            The Cache method is useful when you need to enable/disable caching based on certain conditions.
            Default value is true.
            </remarks>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.AutoCompleteWebServiceBindingSettingsBuilder.Delay(System.Int32)">
            <summary>
            Specifies delay of the Ajax/WebServer request.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBox()
                        .Name("ComboBox")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.WebService().Select("~/Models/Product.asmx/GetProducts").Delay(400);
                        })
            %&gt;
            </code>
            </example>
            <remarks>
            The Delay method is useful when you need to postpone request to the server for some time.
            </remarks>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ClientEvent">
            <summary>
            Represents a client-side event of a view component
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ClientEvent.InlineCode">
            <summary>
            An action that renders the code of the client-side handler upon execution.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ClientEvent.CodeBlock">
            <summary>
            An action that renders the code of the client-side handler upon execution.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ClientEvent.InlineCodeBlock">
            <summary>
            A function that returns the code of the client-side handler.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ClientEvent.HandlerName">
            <summary>
            The name of the client-side handler function.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.DatePickerBase.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.DatePickerBaseBuilder`2">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.DatePickerBase"/> component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerBaseBuilder`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="!:DatePickerBaseBuilder"/> class.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerBaseBuilder`2.Effects(System.Action{Telerik.Web.Mvc.UI.EffectsBuilder})">
            <summary>
            Configures the effects of the datepicker.
            </summary>
            <param name="effectsAction">The action which configures the effects.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().DatePicker()
                       .Name("DatePicker")
                       .Effects(fx =>
                       {
            	            fx.Height()
            		          .Opacity()
            				  .OpenDuration(AnimationDuration.Normal)
            				  .CloseDuration(AnimationDuration.Normal);
                       })
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerBaseBuilder`2.OpenOnFocus(System.Boolean)">
            <summary>
            Sets whether calendar should open on focus.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerBaseBuilder`2.Format(System.String)">
            <summary>
            Sets the date format, which will be used to parse and format the machine date.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerBaseBuilder`2.Min(System.DateTime)">
            <summary>
            Sets the minimal date, which can be selected in DatePicker.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerBaseBuilder`2.Max(System.DateTime)">
            <summary>
            Sets the maximal date, which can be selected in DatePicker.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerBaseBuilder`2.ClientEvents(System.Action{Telerik.Web.Mvc.UI.Fluent.DatePickerClientEventsBuilder})">
            <summary>
            Configures the client-side events.
            </summary>
            <param name="clientEventsAction">The client events action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DatePicker()
                        .Name("DatePicker")
                        .ClientEvents(events =>
                            events.OnLoad("onLoad").OnSelect("onSelect")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerBaseBuilder`2.InputHtmlAttributes(System.Object)">
            <summary>
            Sets the Input HTML attributes.
            </summary>
            <param name="attributes">The HTML attributes.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerBaseBuilder`2.InputHtmlAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the Input HTML attributes.
            </summary>
            <param name="attributes">The HTML attributes.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerBaseBuilder`2.Enable(System.Boolean)">
            <summary>
            Enables or disables the datepicker.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.DatePickerClientEventsBuilder">
            <summary>
            Defines the fluent interface for configuring datepicker client events.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerClientEventsBuilder.#ctor(Telerik.Web.Mvc.UI.DatePickerClientEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.DatePickerClientEventsBuilder"/> class.
            </summary>
            <param name="clientEvents">Datepicker client-side events.</param>
            <param name="viewContext">The context of the View.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerClientEventsBuilder.OnChange(System.Action)">
            <summary>
            Defines the inline handler of the OnChange client-side event
            </summary>
            <param name="onChangeAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DatePicker()
                       .Name("DatePicker")
                       .ClientEvents(events => events.OnChange(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerClientEventsBuilder.OnChange(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnChange client-side event
            </summary>
            <param name="onChangeAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DatePicker()
                       .Name("DatePicker")
                       .ClientEvents(events => events.OnChange(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerClientEventsBuilder.OnChange(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnChange client-side event.
            </summary>
            <param name="onChangeHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DatePicker()
                        .Name("DatePicker")
                        .ClientEvents(events => events.OnChange("onChange"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerClientEventsBuilder.OnLoad(System.Action)">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DatePicker()
                       .Name("DatePicker")
                       .ClientEvents(events => events.OnLoad(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerClientEventsBuilder.OnLoad(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DatePicker()
                       .Name("DatePicker")
                       .ClientEvents(events => events.OnLoad(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerClientEventsBuilder.OnLoad(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnLoad client-side event.
            </summary>
            <param name="onLoadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DatePicker()
                        .Name("DatePicker")
                        .ClientEvents(events => events.OnLoad("onLoad"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerClientEventsBuilder.OnOpen(System.Action)">
            <summary>
            Defines the inline handler of the OnOpen client-side event
            </summary>
            <param name="onOpenInlineCode">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DatePicker()
                       .Name("DatePicker")
                       .ClientEvents(events => events.OnOpen(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerClientEventsBuilder.OnOpen(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnOpen client-side event
            </summary>
            <param name="onOpenInlineCode">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DatePicker()
                       .Name("DatePicker")
                       .ClientEvents(events => events.OnOpen(
                            @&lt;text&gt;
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerClientEventsBuilder.OnOpen(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the OnOpen client-side event.
            </summary>
            <param name="onOpenHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DatePicker()
                        .Name("DatePicker")
                        .ClientEvents(events => events.OnOpen("onOpen"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerClientEventsBuilder.OnClose(System.Action)">
            <summary>
            Defines the inline handler of the OnClose client-side event
            </summary>
            <param name="onCloseInlineCode">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DatePicker()
                       .Name("DatePicker")
                       .ClientEvents(events => events.OnClose(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerClientEventsBuilder.OnClose(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnClose client-side event
            </summary>
            <param name="onCloseInlineCode">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DatePicker()
                       .Name("DatePicker")
                       .ClientEvents(events => events.OnClose(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerClientEventsBuilder.OnClose(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the OnClose client-side event.
            </summary>
            <param name="onCloseHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DatePicker()
                        .Name("DatePicker")
                        .ClientEvents(events => events.OnClose("onClose"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.DateTimePickerBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.TimePicker"/> component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DateTimePickerBuilder.#ctor(Telerik.Web.Mvc.UI.DateTimePicker)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.TimePickerBuilder"/> class.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DateTimePickerBuilder.Value(System.Nullable{System.DateTime})">
            <summary>
            Sets the value of the dateTimePicker input
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DateTimePickerBuilder.Value(System.String)">
            <summary>
            Sets the value of the dateTimePicker input
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DateTimePickerBuilder.Min(System.String)">
            <summary>
            Sets the minimal date, which can be selected in DateTimePicker.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DateTimePickerBuilder.Max(System.String)">
            <summary>
            Sets the maximal date, which can be selected in DateTimePicker.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DateTimePickerBuilder.StartTime(System.DateTime)">
            <summary>
            Sets the minimal time, which can be selected in DateTimePicker.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DateTimePickerBuilder.StartTime(System.String)">
            <summary>
            Sets the minimal time, which can be selected in DateTimePicker.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DateTimePickerBuilder.EndTime(System.DateTime)">
            <summary>
            Sets the maximal time, which can be selected in DateTimePicker.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DateTimePickerBuilder.EndTime(System.String)">
            <summary>
            Sets the maximal time, which can be selected in DateTimePicker.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DateTimePickerBuilder.Interval(System.Int32)">
            <summary>
            Sets the interval between hours.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DateTimePickerBuilder.CalendarButtonTitle(System.String)">
            <summary>
            Sets the title of the DateTimePicker button.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DateTimePickerBuilder.TimeButtonTitle(System.String)">
            <summary>
            Sets the title of the DateTimePicker button.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.DateTimePickerClientEventsBuilder">
            <summary>
            Defines the fluent interface for configuring timepicker client events.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.DateTimePickerClientEventsBuilder.#ctor(Telerik.Web.Mvc.UI.DateTimePickerClientEvents,System.Web.Mvc.ViewContext)">
            <summary>
            Initializes a new instance of the <see cref="!:TimePickerClientEventsBuilder"/> class.
            </summary>
            <param name="clientEvents">Timepicker client-side events.</param>
            <param name="viewContext">The context of the View.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.DateTimePickerClientEventsBuilder.OnChange(System.Action)">
            <summary>
            Defines the inline handler of the OnChange client-side event
            </summary>
            <param name="onChangeAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DateTimePicker()
                       .Name("DateTimePicker")
                       .ClientEvents(events => events.OnChange(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.DateTimePickerClientEventsBuilder.OnChange(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnChange client-side event
            </summary>
            <param name="onChangeAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DateTimePicker()
                       .Name("DateTimePicker")
                       .ClientEvents(events => events.OnChange(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.DateTimePickerClientEventsBuilder.OnChange(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnChange client-side event.
            </summary>
            <param name="onChangeHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DateTimePicker()
                        .Name("DateTimePicker")
                        .ClientEvents(events => events.OnChange("onChange"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.DateTimePickerClientEventsBuilder.OnLoad(System.Action)">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DateTimePicker()
                       .Name("DateTimePicker")
                       .ClientEvents(events => events.OnLoad(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.DateTimePickerClientEventsBuilder.OnLoad(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DateTimePicker()
                       .Name("DateTimePicker")
                       .ClientEvents(events => events.OnLoad(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.DateTimePickerClientEventsBuilder.OnLoad(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnLoad client-side event.
            </summary>
            <param name="onLoadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DateTimePicker()
                        .Name("DateTimePicker")
                        .ClientEvents(events => events.OnLoad("onLoad"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.DateTimePickerClientEventsBuilder.OnOpen(System.Action)">
            <summary>
            Defines the inline handler of the OnOpen client-side event
            </summary>
            <param name="onOpenAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DateTimePicker()
                       .Name("DateTimePicker")
                       .ClientEvents(events => events.OnOpen(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.DateTimePickerClientEventsBuilder.OnOpen(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnOpen client-side event
            </summary>
            <param name="onOpenAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DateTimePicker()
                       .Name("DateTimePicker")
                       .ClientEvents(events => events.OnOpen(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.DateTimePickerClientEventsBuilder.OnOpen(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnOpen client-side event.
            </summary>
            <param name="onOpenHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DateTimePicker()
                        .Name("DateTimePicker")
                        .ClientEvents(events => events.OnOpen("onOpen"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.DateTimePickerClientEventsBuilder.OnClose(System.Action)">
            <summary>
            Defines the inline handler of the OnClose client-side event
            </summary>
            <param name="onCloseAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DateTimePicker()
                       .Name("DateTimePicker")
                       .ClientEvents(events => events.OnClose(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.DateTimePickerClientEventsBuilder.OnClose(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnClose client-side event
            </summary>
            <param name="onCloseAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DateTimePicker()
                       .Name("DateTimePicker")
                       .ClientEvents(events => events.OnClose(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.DateTimePickerClientEventsBuilder.OnClose(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnClose client-side event.
            </summary>
            <param name="onCloseHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DateTimePicker()
                        .Name("DateTimePicker")
                        .ClientEvents(events => events.OnClose("onClose"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.DropDownListBindingSettingsBuilder">
            <summary>
            Defines the fluent interface for building <see cref="T:Telerik.Web.Mvc.UI.Fluent.DropDownListBindingSettingsBuilder"/>
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownListBindingSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.IDropDownBindingSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.DropDownListBindingSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.DropDownListWebServiceBindingSettingsBuilder">
            <summary>
            Defines the fluent interface for configuring the treeview webservice.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownListWebServiceBindingSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.IDropDownBindingSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.DropDownListWebServiceBindingSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.DropDownItem">
            <summary>
            Represent item in the DropDownList/ComboBox items.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.DropDownList.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.DropDownList.Items">
            <summary>
            Gets the items of the treeview.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownListBuilder.SelectedIndex(System.Int32)">
            <summary>
            Use it to set selected item index
            </summary>
            <param name="index">Item index.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .SelectedIndex(0);
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownListBuilder.DataBinding(System.Action{Telerik.Web.Mvc.UI.Fluent.DropDownListDataBindingConfigurationBuilder})">
            <summary>
            Use it to configure Data binding.
            </summary>
            <param name="configurator">Action that configures the data binding options.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .DataBinding(dataBinding => dataBinding
                           .Ajax().Select("_AjaxLoading", "DropDownList")
                        );
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownListBuilder.Enable(System.Boolean)">
            <summary>
            Enables or disables the dropdownlist.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.Fluent.DropDownListBuilder.Delay(System.Int32)" -->
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.#ctor(Telerik.Web.Mvc.UI.DropDownClientEvents,System.Web.Mvc.ViewContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder"/> class.
            </summary>
            <param name="clientEvents">The client events.</param>
            <param name="viewContext">The view context.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnLoad(System.Action)">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadCodeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DropDownList()
                       .Name("DropDownList")
                       .ClientEvents(events => events.OnLoad(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnLoad(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadInlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DropDownList()
                       .Name("DropDownList")
                       .ClientEvents(events => events.OnLoad(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnLoad(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnLoad client-side event.
            </summary>
            <param name="onLoadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .ClientEvents(events => events.OnLoad("onLoad"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnChange(System.Action)">
            <summary>
            Defines the inline handler of the OnChange client-side event
            </summary>
            <param name="onChangeCodeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DropDownList()
                       .Name("DropDownList")
                       .ClientEvents(events => events.OnChange(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnChange(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnChange client-side event
            </summary>
            <param name="onChangeInlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DropDownList()
                       .Name("DropDownList")
                       .ClientEvents(events => events.OnChange(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnChange(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnChange client-side event.
            </summary>
            <param name="onChangeHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .ClientEvents(events => events.OnChange("onChange"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnOpen(System.Action)">
            <summary>
            Defines the inline handler of the OnOpen client-side event
            </summary>
            <param name="onOpenInlineCode">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DropDownList()
                       .Name("DropDownList")
                       .ClientEvents(events => events.OnOpen(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnOpen(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnOpen client-side event.
            </summary>
            <param name="onOpenHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .ClientEvents(events => events.OnOpen("onOpen"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnClose(System.Action)">
            <summary>
            Defines the inline handler of the OnClose client-side event
            </summary>
            <param name="onCloseCodeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DropDownList()
                       .Name("DropDownList")
                       .ClientEvents(events => events.OnClose(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnClose(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnClose client-side event
            </summary>
            <param name="onCloseInlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DropDownList()
                       .Name("DropDownList")
                       .ClientEvents(events => events.OnClose(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnClose(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnClose client-side event.
            </summary>
            <param name="onCloseHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .ClientEvents(events => events.OnClose("onClose"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnDataBinding(System.Action)">
            <summary>
            Defines the inline handler of the OnDataBinding client-side event
            </summary>
            <param name="onDataBindingCodeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DropDownList()
                       .Name("DropDownList")
                       .ClientEvents(events => events.OnDataBinding(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnDataBinding(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnDataBinding client-side event
            </summary>
            <param name="onDataBindingInlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DropDownList()
                       .Name("DropDownList")
                       .ClientEvents(events => events.OnDataBinding(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnDataBinding(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnDataBinding client-side event.
            </summary>
            <param name="onDataBindingHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .ClientEvents(events => events.OnDataBinding("OnDataBinding"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnDataBound(System.Action)">
            <summary>
            Defines the inline handler of the OnDataBound client-side event
            </summary>
            <param name="onDataBoundCodeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DropDownList()
                       .Name("DropDownList")
                       .ClientEvents(events => events.OnDataBound(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnDataBound(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnDataBound client-side event
            </summary>
            <param name="onDataBoundInlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DropDownList()
                       .Name("DropDownList")
                       .ClientEvents(events => events.OnDataBound(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnDataBound(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnDataBound client-side event.
            </summary>
            <param name="onDataBoundHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .ClientEvents(events => events.OnDataBound("onDataBound"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnError(System.Action)">
            <summary>
            Defines the inline handler of the OnError client-side event
            </summary>
            <param name="onErrorCodeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DropDownList()
                       .Name("DropDownList")
                       .ClientEvents(events => events.OnError(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnError(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnError client-side event
            </summary>
            <param name="onErrorInlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().DropDownList()
                       .Name("DropDownList")
                       .ClientEvents(events => events.OnError(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownClientEventsBuilder.OnError(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnError client-side event.
            </summary>
            <param name="onDataBoundHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .ClientEvents(events => events.OnError("onError"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.DropDownListDataBindingConfigurationBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.DropDownList"/> data binding.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownListDataBindingConfigurationBuilder.#ctor(Telerik.Web.Mvc.UI.IDropDownDataBindingConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="!:DropDownDataBindingConfigurationBuilder"/> class.
            </summary>
            <param name="settings">The configuration.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownListDataBindingConfigurationBuilder.Ajax">
            <summary>
            Use it to configure Ajax binding.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .DataBinding(dataBinding => dataBinding
                           .Ajax().Select("_AjaxLoading", "TreeView")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownListDataBindingConfigurationBuilder.WebService">
            <summary>
            Use it to configure web service binding.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .DataBinding(dataBinding => dataBinding
                           .WebService().Select("~/Models/ProductDDI.asmx/GetProducts")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.DropDownItemBuilder">
            <summary>
            Defines the fluent interface for configuring child DropDonwList items.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownItemBuilder.#ctor(Telerik.Web.Mvc.UI.DropDownItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.DropDownItemBuilder"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownItemBuilder.Text(System.String)">
            <summary>
            Sets the value for the item.
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .Items(items => items.Add().Text("First item."))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownItemBuilder.Value(System.String)">
            <summary>
            Sets the value for the item.
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .Items(items => items.Add().Value("1"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownItemBuilder.Selected(System.Boolean)">
            <summary>
            Define when the item will be expanded on intial render.
            </summary>
            <param name="value">If true the item will be selected.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .Items(items =>
                        {
                            items.Add().Text("First Item").Selected(true);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.DropDownItemFactory">
            <summary>
            Creates items for the <see cref="T:Telerik.Web.Mvc.UI.DropDownItem"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownItemFactory.#ctor(System.Collections.Generic.IList{Telerik.Web.Mvc.UI.DropDownItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.DropDownItemFactory"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DropDownItemFactory.Add">
            <summary>
            Defines a item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.EditorFileBrowserController.AuthorizeBrowse(System.String)">
            <summary>
            Determines if content of a given path can be browsed.
            </summary>
            <param name="path">The path which will be browsed.</param>
            <returns>true if browsing is allowed, otherwise false.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.EditorFileBrowserController.Browse(System.String)">
            <summary>
            Retrieves the content of a given folder.
            </summary>
            <param name="path">The folder's path, which content will be served.</param>
            <returns>A <see cref="T:System.Web.Mvc.JsonResult"/> containing folder's files and child folders.</returns>
            <exception cref="T:System.Web.HttpException">Throws 403 Forbidden if the supplied <paramref name="path"/> is outside of the valid paths.</exception>
            <exception cref="T:System.Web.HttpException">Throws 404 File Not Found if refered folder does not exist.</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.EditorFileBrowserController.AuthorizeUpload(System.String,System.Web.HttpPostedFileBase)">
            <summary>
            Determines if a file can be uploaded to a given path.
            </summary>
            <param name="path">The path to which the file should be uploaded.</param>
            <param name="file">The file which should be uploaded.</param>
            <returns>true if the upload is allowed, otherwise false.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.EditorFileBrowserController.Upload(System.String,System.Web.HttpPostedFileBase)">
            <summary>
            Uploads a file to a given path.
            </summary>
            <param name="path">The path to which the file should be uploaded.</param>
            <param name="file">The file which should be uploaded.</param>
            <returns>A <see cref="T:System.Web.Mvc.JsonResult"/> containing the uploaded file's size and name.</returns>
            <exception cref="T:System.Web.HttpException">Forbidden</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.EditorFileBrowserController.AuthorizeThumbnail(System.String)">
            <summary>
            Determines if an image's thumbnail should be served.
            </summary>
            <param name="path">The path to image's thumbnail.</param>
            <returns>true if image's thumbnail should be served, otherwise false.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.EditorFileBrowserController.Thumbnail(System.String)">
            <summary>
            Serves an image's thumbnail by given path.
            </summary>
            <param name="path">The path to the image.</param>
            <returns>Thumbnail of an image.</returns>
            <exception cref="T:System.Web.HttpException">Throws 403 Forbidden if the <paramref name="path"/> is outside of the valid paths.</exception>
            <exception cref="T:System.Web.HttpException">Throws 404 File Not Found if the <paramref name="path"/> refers to a non existant image.</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.EditorFileBrowserController.AuthorizeDeleteFile(System.String)">
            <summary>
            Determines if a file can be deleted.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>true if file can be deleted, otherwise false.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.EditorFileBrowserController.DeleteFile(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>An empty <see cref="T:System.Web.Mvc.ContentResult"/>.</returns>
            <exception cref="T:System.Web.HttpException">Forbidden</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.EditorFileBrowserController.AuthorizeDeleteDirectory(System.String)">
            <summary>
            Determines if a folder can be deleted.
            </summary>
            <param name="path">The path to the folder.</param>
            <returns>true if folder can be deleted, otherwise false.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.EditorFileBrowserController.DeleteDirectory(System.String)">
            <summary>
            Deletes a folder.
            </summary>
            <param name="path">The path to the folder.</param>
            <returns>An empty <see cref="T:System.Web.Mvc.ContentResult"/>.</returns>
            <exception cref="T:System.Web.HttpException">Forbidden</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.EditorFileBrowserController.AuthorizeCreateDirectory(System.String,System.String)">
            <summary>
            Determines if a folder can be created. 
            </summary>
            <param name="path">The path to the parent folder in which the folder should be created.</param>
            <param name="name">Name of the folder.</param>
            <returns>true if folder can be created, otherwise false.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.EditorFileBrowserController.CreateDirectory(System.String,System.String)">
            <summary>
            Creates a folder with a given name.
            </summary>
            <param name="path">The path to the parent folder in which the folder should be created.</param>
            <param name="name">Name of the folder.</param>
            <returns>An empty <see cref="T:System.Web.Mvc.ContentResult"/>.</returns>
            <exception cref="T:System.Web.HttpException">Forbidden</exception>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.EditorFileBrowserController.ContentPaths">
            <summary>
            Gets the base paths from which content will be served.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.EditorFileBrowserController.Filter">
            <summary>
            Gets the valid file extensions by which served files will be filtered.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="P:Telerik.Web.Mvc.UI.Editor.ClientEvents"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder.#ctor(Telerik.Web.Mvc.UI.EditorClientEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder"/> class.
            </summary>
            <param name="clientEvents">The client events.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder.OnLoad(System.Action)">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Editor()
                       .Name("Editor")
                       .ClientEvents(events => events.OnLoad(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder.OnLoad(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="inlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             @(Html.Telerik().Editor()
                       .Name("Editor")
                       .ClientEvents(events => events.OnLoad(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       )))
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder.OnLoad(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnLoad client-side event.
            </summary>
            <param name="onLoadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Editor()
                        .Name("Editor")
                        .ClientEvents(events => events.OnLoad("onLoad"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder.OnPaste(System.Action)">
            <summary>
            Defines the inline handler of the OnPaste client-side event
            </summary>
            <param name="onPasteAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Editor()
                       .Name("Editor")
                       .ClientEvents(events => events.OnPaste(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder.OnPaste(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="inlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             @(Html.Telerik().Editor()
                   .Name("Editor")
                   .ClientEvents(events => events.OnPaste(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                    ))
            )
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder.OnPaste(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnPaste client-side event.
            </summary>
            <param name="onPasteHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Editor()
                        .Name("Editor")
                        .ClientEvents(events => events.OnPaste("onPaste"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder.OnExecute(System.Action)">
            <summary>
            Defines the inline handler of the OnExecute client-side event
            </summary>
            <param name="onLoadAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Editor()
                       .Name("Editor")
                       .ClientEvents(events => events.OnExecute(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder.OnExecute(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnExecute client-side event
            </summary>
            <param name="onLoadAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Editor()
                       .Name("Editor")
                       .ClientEvents(events => events.OnExecute(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder.OnExecute(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnExecute client-side event.
            </summary>
            <param name="onLoadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Editor()
                        .Name("Editor")
                        .ClientEvents(events => events.OnExecute("onExecute"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder.OnSelectionChange(System.Action)">
            <summary>
            Defines the inline handler of the OnSelectionChange client-side event
            </summary>
            <param name="onLoadAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Editor()
                       .Name("Editor")
                       .ClientEvents(events => events.OnSelectionChange(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder.OnSelectionChange(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnSelectionChange client-side event
            </summary>
            <param name="onLoadAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Editor()
                       .Name("Editor")
                       .ClientEvents(events => events.OnSelectionChange(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder.OnSelectionChange(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnSelectionChange client-side event.
            </summary>
            <param name="onLoadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Editor()
                        .Name("Editor")
                        .ClientEvents(events => events.OnSelectionChange("onSelectionChange"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder.OnChange(System.Action)">
            <summary>
            Defines the inline handler of the OnChange client-side event
            </summary>
            <param name="onLoadAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Editor()
                       .Name("Editor")
                       .ClientEvents(events => events.OnChange(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder.OnChange(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnChange client-side event
            </summary>
            <param name="onLoadAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Editor()
                       .Name("Editor")
                       .ClientEvents(events => events.OnChange(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder.OnChange(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnChange client-side event.
            </summary>
            <param name="onLoadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Editor()
                        .Name("Editor")
                        .ClientEvents(events => events.OnChange("onChange"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder.OnError(System.Action)">
            <summary>
            Defines the inline handler of the OnError client-side event
            </summary>
            <param name="codeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Editor()
                       .Name("Editor")
                       .ClientEvents(events => events.OnError(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder.OnError(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnError client-side event
            </summary>
            <param name="onLoadAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Editor()
                       .Name("Editor")
                       .ClientEvents(events => events.OnError(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorClientEventsBuilder.OnError(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnError client-side event.
            </summary>
            <param name="onErrorHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Editor()
                        .Name("Editor")
                        .ClientEvents(events => events.OnError("onError"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorBuilder.Value(System.Action)">
            <summary>
            Sets the HTML content that will show initially in the editor.
            </summary>
            <param name="value">The action which renders the HTML content.</param>
            <code lang="CS">
             &lt;% Html.Telerik().Editor()
                       .Name("Editor")
                       .Value(() => { %&gt;
                           &lt;blockquote&gt;
                               According to Deep Thought, the answer to the ultimate question of
                               life, the universe and everything is &lt;strong&gt;42&lt;/strong&gt;.
                           &lt;/blockquote&gt;
                        &lt;% })
                       .Render();
            %&gt;
            </code>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorBuilder.Value(System.String)">
            <summary>
            Sets the HTML content which the item should display as a string.
            </summary>
            <param name="value">An HTML string.</param>
            <code lang="CS">
             &lt;%= Html.Telerik().Editor()
                        .Name("Editor")
                        .Value("&lt;blockquote&gt;A towel has &lt;strong&gt;immense&lt;/strong&gt; psychological value&lt;/blockquote&gt;")
            %&gt;
            </code>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorBuilder.Encode(System.Boolean)">
            <summary>
            Encode HTML content.
            </summary>
            <code lang="CS">
             &lt;%= Html.Telerik().Editor()
                        .Name("Editor")
                        .Value("&lt;blockquote&gt;A towel has &lt;strong&gt;immense&lt;/strong&gt; psychological value&lt;/blockquote&gt;")
                        .Encode(true)
            %&gt;
            </code>   
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.EditorBuilder.Localizable(System.String)">
            <summary>
            Sets the localization culture of the editor.
            </summary>
            <param name="culture">The culture.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Editor()
                        .Name("Editor")
                        .Value("&lt;blockquote&gt;A towel has &lt;strong&gt;immense&lt;/strong&gt; psychological value&lt;/blockquote&gt;")
                        .Localizable("de-DE")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.EffectsBuilderBase.Toggle">
            <summary>
            Enables toggle animation.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.EffectsBuilderBase.Opacity">
            <summary>
            Enables opacity animation.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.EffectsBuilderBase.Opacity(System.Action{Telerik.Web.Mvc.UI.AnimationBuilder})">
            <summary>
            Enables opacity animation.
            </summary>
            <param name="setEffectProperties">Builder, which sets different opacity properties.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.EffectsBuilderBase.Expand">
            <summary>
            Enables expand animation.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.EffectsBuilderBase.Expand(System.Action{Telerik.Web.Mvc.UI.AnimationBuilder})">
            <summary>
            Enables expand animation.
            </summary>
            <param name="setEffectProperties">Builder, which sets different expand properties.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.EffectsBuilder.Slide">
            <summary>
            Enables slide animation.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.EffectsBuilder.Slide(System.Action{Telerik.Web.Mvc.UI.AnimationBuilder})">
            <summary>
            Enables slide animation.
            </summary>
            <param name="setEffectProperties">Builder, which sets different slide properties.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.GridColumnBase`1">
            <summary>
            Represents a column in the <see cref="!:Grid&lt;T&gt;"/> component
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.GridColumnBase`1.Grid">
            <summary>
            Gets or sets the grid.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.GridColumnBase`1.Member">
            <summary>
            Gets the member of the column.
            </summary>
            <value>The member.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.GridColumnBase`1.Template">
            <summary>
            Gets the template of the column.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.GridColumnBase`1.HeaderTemplate">
            <summary>
            Gets the header template of the column.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.GridColumnBase`1.FooterTemplate">
            <summary>
            Gets the footer template of the column.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.GridColumnBase`1.Title">
            <summary>
            Gets or sets the title of the column.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.GridColumnBase`1.Width">
            <summary>
            Gets or sets the width of the column.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.GridColumnBase`1.Hidden">
            <summary>
            Gets or sets a value indicating whether this column is hidden.
            </summary>
            <value><c>true</c> if hidden; otherwise, <c>false</c>.</value>
            <remarks>
            Hidden columns are output as HTML but are not visible by the end-user.
            </remarks>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.GridColumnBase`1.HeaderHtmlAttributes">
            <summary>
            Gets the header HTML attributes.
            </summary>
            <value>The header HTML attributes.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.GridColumnBase`1.FooterHtmlAttributes">
            <summary>
            Gets the footer HTML attributes.
            </summary>
            <value>The footer HTML attributes.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.GridColumnBase`1.Visible">
            <summary>
            Gets or sets a value indicating whether this column is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>. The default value is <c>true</c>.</value>
            <remarks>
            Invisible columns are not output in the HTML.
            </remarks>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.GridColumnBase`1.HtmlAttributes">
            <summary>
            Gets the HTML attributes of the cell rendered for the column
            </summary>
            <value>The HTML attributes.</value>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.GridBoundColumn`2.#ctor(Telerik.Web.Mvc.UI.Grid{`0},System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="!:GridBoundColumn&lt;T&gt;"/> class.
            </summary>
            <param name="value">The property to which the column is bound to.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.GridBoundColumn`2.MemberType">
            <summary>
            Gets type of the property to which the column is bound to.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.GridBoundColumn`2.Groupable">
            <summary>
            Gets or sets a value indicating whether this column is groupable.
            </summary>
            <value><c>true</c> if groupable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.GridBoundColumn`2.Name">
            <summary>
            Gets the name of the column
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.GridBoundColumn`2.Value">
            <summary>
            Gets a function which returns the value of the property to which the column is bound to.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.GridBoundColumn`2.Sortable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Web.Mvc.UI.GridColumnBase`1"/> is sortable.
            </summary>
            <value><c>true</c> if sortable; otherwise, <c>false</c>. The default value is <c>true</c>.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.GridBoundColumn`2.Filterable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Web.Mvc.UI.GridColumnBase`1"/> is filterable.
            </summary>
            <value><c>true</c> if filterable; otherwise, <c>false</c>. The default value is <c>true</c>.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.INavigatable">
            <summary>
            Defines an interface that supports navigation.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.INavigatable.RouteName">
            <summary>
            Gets or sets the name of the route.
            </summary>
            <value>The name of the route.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.INavigatable.ControllerName">
            <summary>
            Gets or sets the name of the controller.
            </summary>
            <value>The name of the controller.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.INavigatable.ActionName">
            <summary>
            Gets or sets the name of the action.
            </summary>
            <value>The name of the action.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.INavigatable.RouteValues">
            <summary>
            Gets the route values.
            </summary>
            <value>The route values.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.INavigatable.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridColumnContextMenuSettingsBuilder">
            <summary>
            Defines the fluent interface for configuring <see cref="P:Telerik.Web.Mvc.UI.Grid`1.ColumnContextMenu"/>
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnContextMenuSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.GridColumnContextMenuSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridColumnContextMenuSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnContextMenuSettingsBuilder.Enabled(System.Boolean)">
            <summary>
            Enables or disables column context menu.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .ColumnContextMenu(setting => setting.Enabled((bool)ViewData["enableColumnContextMenu"]))
            %&gt;
            </code>
            </example>
            <remarks>
            The Enabled method is useful when you need to enable column context menu based on certain conditions.
            </remarks>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1">
            <summary>
            Defines the fluent interface for building <see cref="T:Telerik.Web.Mvc.UI.GridBindingSettings"/>
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.#ctor(Telerik.Web.Mvc.UI.GridBindingSettings)">
            <summary>
            Initializes a new instance of the <see cref="!:GridBindingSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Enabled(System.Boolean)">
            <summary>
            Enables or disables binding.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Index", "Home").Enabled((bool)ViewData["ajax"]);
                        })
            %&gt;
            </code>
            </example>
            <remarks>
            The Enabled method is useful when you need to enable binding based on certain conditions.
            </remarks>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Select(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller and route values for the select operation
            </summary>
            <param name="routeValues">The route values of the Action method.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select(MVC.Home.Index().GetRouteValueDictionary());
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Select(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller and route values for the select operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Index", "Home", new RouteValueDictionary{ {"id", 1} });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Select(System.String,System.String,System.Object)">
            <summary>
            Sets the action, controller and route values for the select operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Index", "Home", new { id = 1 });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Select(System.String,System.String)">
            <summary>
            Sets the action and controller for the select operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Index", "Home");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Select(System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the route and values for the select operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Default", "Home", new RouteValueDictionary{ {"id", 1} });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Select(System.String,System.Object)">
            <summary>
            Sets the route and values for the select operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Default", new {id=1});
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Select(System.String)">
            <summary>
            Sets the route name for the select operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Default");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Select``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Sets the action, controller and route values for the select operation
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="controllerAction">The action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select&lt;HomeController&gt;(controller => controller.Index()));
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Insert(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller and route values for the insert operation
            </summary>
            <param name="routeValues">The route values of the Action method.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Insert(MVC.Home.Index(1).GetRouteValueDictionary());
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Insert(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller and route values for insert operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Index", "Home", new RouteValueDictionary{ {"id", 1} });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Insert(System.String,System.String,System.Object)">
            <summary>
            Sets the action, controller and route values for insert operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Insert("Index", "Home", new { id = 1 });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Insert(System.String,System.String)">
            <summary>
            Sets the action and controller for the select operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Insert("Index", "Home");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Insert(System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the route and values for insert operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Default", "Home", new RouteValueDictionary{ {"id", 1} });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Insert(System.String,System.Object)">
            <summary>
            Sets the route and values for insert operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Insert("Default", new {id=1});
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Insert(System.String)">
            <summary>
            Sets the route name for insert operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Insert("Default");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Insert``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Sets the action, controller and route values for insert operation
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="controllerAction">The action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Insert&lt;HomeController&gt;(controller => controller.Index()));
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Update(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller and route values for the update operation
            </summary>
            <param name="routeValues">The route values of the Action method.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Update(MVC.Home.Index(1).GetRouteValueDictionary());
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Update(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller and route values for update operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Update(MVC.Home.Index(1).GetRouteValueDictionary());
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Update(System.String,System.String,System.Object)">
            <summary>
            Sets the action, controller and route values for update operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Update("Index", "Home", new { id = 1 });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Update(System.String,System.String)">
            <summary>
            Sets the action and controller for the select operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Update("Index", "Home");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Update(System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the route and values for update operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Update("Default", "Home", new RouteValueDictionary{ {"id", 1} });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Update(System.String,System.Object)">
            <summary>
            Sets the route and values for update operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Update("Default", new {id=1});
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Update(System.String)">
            <summary>
            Sets the route name for update operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Update("Default");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Update``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Sets the action, controller and route values for update operation
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="controllerAction">The action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Update&lt;HomeController&gt;(controller => controller.Index()));
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Delete(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller and route values for the delete operation
            </summary>
            <param name="routeValues">The route values of the Action method.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Delete(MVC.Home.Index(1).GetRouteValueDictionary());
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Delete(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller and route values for delete operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Delete("Index", "Home", new RouteValueDictionary{ {"id", 1} });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Delete(System.String,System.String,System.Object)">
            <summary>
            Sets the action, controller and route values for delete operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Delete("Index", "Home", new { id = 1 });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Delete(System.String,System.String)">
            <summary>
            Sets the action and controller for the select operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Delete("Index", "Home");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Delete(System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the route and values for delete operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Delete("Default", "Home", new RouteValueDictionary{ {"id", 1} });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Delete(System.String,System.Object)">
            <summary>
            Sets the route and values for delete operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Delete("Default", new {id=1});
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Delete(System.String)">
            <summary>
            Sets the route name for delete operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Delete("Default");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBindingSettingsBuilder`1.Delete``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Sets the action, controller and route values for delete operation
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="controllerAction">The action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Delete&lt;HomeController&gt;(controller => controller.Index()));
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridAjaxBindingSettingsBuilder.OperationMode(Telerik.Web.Mvc.UI.GridOperationMode)">
            <summary>
            Gets or sets the operation mode of the grid. By default the grid will make a request to the 
            server when it needs data for paging, sorting, filtering or grouping. If you set the
            operation mode to GridOperationMode.Client it will make only one request for all data. Any other
            paging, sorting, filtering or grouping will be performed client-side.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridActionCommandBuilderBase`2">
            <summary>
            Defines the fluent interface for configuring command.
            </summary>
            <typeparam name="TModel">The type of the model</typeparam>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridActionCommandBuilderBase`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="!:GridActionCommandBuilderBase&lt;TModel, TColumn, TBuilder&gt;"/> class.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridActionCommandBuilderBase`2.ButtonType(Telerik.Web.Mvc.UI.GridButtonType)">
            <summary>
            Sets the button type.
            </summary>
            <param name="type">The button type.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridActionCommandBuilderBase`2.HtmlAttributes(System.Object)">
            <summary>
            Sets the HTML attributes.
            </summary>
            <param name="attributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridActionCommandBuilderBase`2.HtmlAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the HTML attributes.
            </summary>
            <param name="attributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridActionCommandBuilderBase`2.ImageHtmlAttributes(System.Object)">
            <summary>
            Sets the image HTML attributes.
            </summary>
            <param name="attributes">The Image HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridActionCommandBuilderBase`2.ImageHtmlAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the image HTML attributes.
            </summary>
            <param name="attributes">The Image HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridKeyboardNavigationSettingsBuilder">
            <summary>
            Defines the fluent interface for configuring <see cref="P:Telerik.Web.Mvc.UI.Grid`1.KeyboardNavigation"/>
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridKeyboardNavigationSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.GridKeyboardNavigationSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridKeyboardNavigationSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridKeyboardNavigationSettingsBuilder.Enabled(System.Boolean)">
            <summary>
            Enables or disables keyboard navigation.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .KeyboardNavigation(setting => setting.Enabled((bool)ViewData["enableKeyBoardNavigation"]))
            %&gt;
            </code>
            </example>
            <remarks>
            The Enabled method is useful when you need to enable keyboard navigation based on certain conditions.
            </remarks>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridKeyboardNavigationSettingsBuilder.EditOnTab(System.Boolean)">
            <summary>
            Enables or disables edit when TAB key is pressed.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .KeyboardNavigation(setting => setting.EditOnTab((bool)ViewData["enableEditOnTab"]))
            %&gt;
            </code>
            </example>
            <remarks>
            The EditOnTab method is useful when InCell edit mode and use TAB key to edit the cell.
            </remarks>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridToolBarCommandBuilderBase`3.ButtonType(Telerik.Web.Mvc.UI.GridButtonType)">
            <summary>
            Sets the button type.
            </summary>
            <param name="type">The button type.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridToolBarCommandBuilderBase`3.HtmlAttributes(System.Object)">
            <summary>
            Sets the HTML attributes.
            </summary>
            <param name="attributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridToolBarCommandBuilderBase`3.HtmlAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the HTML attributes.
            </summary>
            <param name="attributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridToolBarCommandBuilderBase`3.ImageHtmlAttributes(System.Object)">
            <summary>
            Sets the image HTML attributes.
            </summary>
            <param name="attributes">The Image HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridToolBarCommandBuilderBase`3.ImageHtmlAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the image HTML attributes.
            </summary>
            <param name="attributes">The Image HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Html.GridLinkButtonBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IGridCustomGroupingWrapper">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.GridCustomGroupingWrapper`1">
            <exclude/>
            <excludetoc/>
            <summary>
            Simple wrapper used to trick the Grid's generic DataSource when custom binding is used
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridEditingSettingsBuilder`1">
            <summary>
            Defines the fluent interface for configuring grid editing.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridEditingSettingsBuilder`1.#ctor(Telerik.Web.Mvc.UI.GridEditingSettings{`0})">
            <summary>
            Initializes a new instance of the <see cref="!:GridEditingSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridEditingSettingsBuilder`1.Enabled(System.Boolean)">
            <summary>
            Enables or disables grid editing.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid&lt;Order&gt;()
                        .Name("Orders")
                        .Editable(settings => settings.Enabled(true))
            %&gt;
            </code>
            </example>
            <remarks>
            The Enabled method is useful when you need to enable grid editing on certain conditions.
            </remarks>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridEditingSettingsBuilder`1.TemplateName(System.String)">
            <summary>
            Specify an editor template which to be used for InForm or PopUp modes
            </summary>
            <param name="templateName">name of the editor template</param>
            <remarks>This settings is applicable only when Mode is <see cref="F:Telerik.Web.Mvc.UI.GridEditMode.InForm"/> 
            or <see cref="F:Telerik.Web.Mvc.UI.GridEditMode.PopUp"/></remarks>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridEditingSettingsBuilder`1.AdditionalViewData(System.Object)">
            <summary>
            Provides additional view data in the editor template.
            </summary>
            <remarks>
            The additional view data will be provided if the editing mode is set to in-form or popup. For other editing modes 
            use <see cref="M:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1.EditorViewData(System.Object)"/> 
            </remarks>
            <param name="additionalViewData">An anonymous object which contains the additional data</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Editable(editing =&gt; editing.AdditionalViewData(new { customers = Model.Customers }))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridEditingSettingsBuilder`1.DisplayDeleteConfirmation(System.Boolean)">
            <summary>
            Enables or disables delete confirmation.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid&lt;Order&gt;()
                        .Name("Orders")
                        .Editable(settings => settings.DisplayDeleteConfirmation(true))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridEditingSettingsBuilder`1.FormHtmlAttributes(System.Object)">
            <summary>
            Gets the HTML attributes of the form rendered during editing
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridEditingSettingsBuilder`1.FormHtmlAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets the HTML attributes of the form rendered during editing
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridTemplateColumnBuilder`1">
            <summary>
            Defines the fluent interface for configuring template columns
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2">
            <summary>
            Defines the fluent interface for configuring columns.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TColumnBuilder">The type of the column builder.</typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2"/> class.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.Title(System.String)">
            <summary>
            Sets the title displayed in the header of the column.
            </summary>
            <param name="text">The text.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Columns(columns => columns.Bound(o => o.OrderID).Title("ID"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.HeaderHtmlAttributes(System.Object)">
            <summary>
            Sets the HTML attributes applied to the header cell of the column.
            </summary>
            <param name="attributes">The attributes.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Columns(columns => columns.Bound(o => o.OrderID).HeaderHtmlAttributes(new {@class="order-header"}))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.HeaderHtmlAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the HTML attributes applied to the header cell of the column.
            </summary>
            <param name="attributes">The attributes.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Columns(columns => columns.Bound(o => o.OrderID).HeaderHtmlAttributes(new {@class="order-header"}))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.FooterHtmlAttributes(System.Object)">
            <summary>
            Sets the HTML attributes applied to the footer cell of the column.
            </summary>
            <param name="attributes">The attributes.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Columns(columns => columns.Bound(o => o.OrderID).FooterHtmlAttributes(new {@class="order-footer"}))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.FooterHtmlAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the HTML attributes applied to the footer cell of the column.
            </summary>
            <param name="attributes">The attributes.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Columns(columns => columns.Bound(o => o.OrderID).FooterHtmlAttributes(new {@class="order-footer"}))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.HtmlAttributes(System.Object)">
            <summary>
            Sets the HTML attributes applied to the content cell of the column.
            </summary>
            <param name="attributes">The attributes.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Columns(columns => columns.Bound(o => o.OrderID).HtmlAttributes(new {@class="order-cell"}))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.HtmlAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the HTML attributes applied to the content cell of the column.
            </summary>
            <param name="attributes">The attributes.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Columns(columns => columns.Bound(o => o.OrderID).HtmlAttributes(new {@class="order-cell"}))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.Width(System.Int32)">
            <summary>
            Sets the width of the column in pixels.
            </summary>
            <param name="pixelWidth">The width in pixels.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Columns(columns => columns.Bound(o => o.OrderID).Width(100))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.Width(System.String)">
            <summary>
            Sets the width of the column.
            </summary>
            <param name="value">The width to set.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .Columns(columns => columns.Bound(o => 
                       {
                           %&gt;
                                &lt;%= Html.ActionLink("Edit", "Home", new { id = o.OrderID}) %&gt;
                           &lt;%
                       })
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.Visible(System.Boolean)">
            <summary>
            Makes the column visible or not. By default all columns are visible. Invisible columns are not rendered in the output HTML.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Columns(columns => columns.Bound(o => o.OrderID).Visible((bool)ViewData["visible"]))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.Hidden(System.Boolean)">
            <summary>
            Makes the column hidden or not. By default all columns are not hidden. Hidden columns are rendered in the output HTML but are hidden.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Columns(columns => columns.Bound(o => o.OrderID).Hidden((bool)ViewData["hidden"]))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.Hidden">
            <summary>
            Hides a column. By default all columns are not hidden. Hidden columns are rendered in the output HTML but are hidden.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Columns(columns => columns.Bound(o => o.OrderID).Hidden())
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.HeaderTemplate(System.Action)">
            <summary>
            Sets the header template for the column.
            </summary>
            <param name="template">The action defining the template.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.HeaderTemplate(System.String)">
            <summary>
            Sets the header template for the column.
            </summary>
            <param name="template">The string defining the template.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.HeaderTemplate(System.Func{System.Object,System.Object})">
            <summary>
            Sets the header template for the column.
            </summary>
            <param name="template">The action defining the template.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.FooterTemplate(System.Action)">
            <summary>
            Sets the footer template for the column.
            </summary>
            <param name="template">The action defining the template.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.FooterTemplate(System.String)">
            <summary>
            Sets the footer template for the column.
            </summary>
            <param name="template">The string defining the template.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.FooterTemplate(System.Func{System.Object,System.Object})">
            <summary>
            Sets the footer template for the column.
            </summary>
            <param name="template">The action defining the template.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Fluent.GridColumnBuilderBase`2.Column">
            <summary>
            Gets or sets the column.
            </summary>
            <value>The column.</value>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridGroupingSettingsBuilder`1.Visible(System.Boolean)">
            <summary>
            Determines if group header should be shown.
            </summary>
            <param name="value">true if visible, otherwise false.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.ExpressionBuilderOptions.LiftMemberAccessToNull">
            <summary>
            Gets or sets a value indicating whether member access expression used
            by this builder should be lifted to null. The default value is true;
            </summary>
            <value>
            	<c>true</c> if member access should be lifted to null; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.ExpressionFactory.LiftStringExpressionToEmpty(System.Linq.Expressions.Expression)">
            <exception cref="T:System.ArgumentException">Provided expression should have string type</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.FilterExpressionBuilder.CreateFilterExpression">
            <exception cref="T:System.ArgumentException"><c>ArgumentException</c>.</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.FilterDescriptorExpressionBuilder.CreateBodyExpression">
            <exception cref="T:System.ArgumentException"><c>ArgumentException</c>.</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.AggregateFunctionExpressionBuilderBase.#ctor(System.Linq.Expressions.Expression,Telerik.Web.Mvc.AggregateFunction)">
            <exception cref="T:System.ArgumentException">
            Provided <paramref name="enumerableExpression"/>'s <see cref="P:System.Linq.Expressions.Expression.Type"/> is not <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </exception>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.AggregateFunctionExpressionBuilderBase.ExtractItemTypeFromEnumerableType(System.Type)">
            <exception cref="T:System.ArgumentException">Provided type is not <see cref="T:System.Collections.Generic.IEnumerable`1"/></exception>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.EnumerableAggregateFunctionExpressionBuilder.#ctor(System.Linq.Expressions.Expression,Telerik.Web.Mvc.EnumerableAggregateFunction)">
            <exception cref="T:System.ArgumentException">
            Provided <paramref name="enumerableExpression"/>'s <see cref="P:System.Linq.Expressions.Expression.Type"/> is not <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </exception>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.EnumerableSelectorAggregateFunctionExpressionBuilder.#ctor(System.Linq.Expressions.Expression,Telerik.Web.Mvc.EnumerableSelectorAggregateFunction)">
            <exception cref="T:System.ArgumentException">
            Provided <paramref name="enumerableExpression"/>'s <see cref="P:System.Linq.Expressions.Expression.Type"/> is not <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </exception>
        </member>
        <member name="T:Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.CustomTypeDescriptorExtensions">
            <exclude/>
            <excludeToc/>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.CustomTypeDescriptorExtensions.Property``1(System.ComponentModel.ICustomTypeDescriptor,System.String)">
            <exception cref="T:System.ArgumentException"><c>ArgumentException</c>.</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.CustomTypeDescriptorPropertyAccessExpressionBuilder.#ctor(System.Type,System.Type,System.String)">
            <exception cref="T:System.ArgumentException"><paramref name="elementType"/> did not implement <see cref="T:System.ComponentModel.ICustomTypeDescriptor"/>.</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.MemberAccessTokenExtensions.CreateMemberAccessExpression(Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.IMemberAccessToken,System.Linq.Expressions.Expression)">
            <exception cref="T:System.ArgumentException">
            Invalid name for property or field; or indexer with the specified arguments.
            </exception>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.MemberAccessTokenExtensions.GetMemberInfoForType(Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.IMemberAccessToken,System.Type)">
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.UnboxT`1.ValueField(System.Object)">
            <exception cref="T:System.InvalidCastException"><c>InvalidCastException</c>.</exception>
        </member>
        <member name="T:Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.XmlNodeExtensions">
            <summary>
            Holds extension methods for <see cref="T:System.Xml.XmlNode"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.XmlNodeExtensions.ChildElementInnerText(System.Xml.XmlNode,System.String)">
            <exception cref="T:System.ArgumentException">
            Child element with name specified by <paramref name="childName"/> does not exists.
            </exception>
        </member>
        <member name="T:Telerik.Web.Mvc.CompositeFilterDescriptor">
            <summary>
            Represents a filtering descriptor which serves as a container for one or more child filtering descriptors.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.FilterDescriptorBase">
            <summary>
            Base class for all <see cref="T:Telerik.Web.Mvc.IFilterDescriptor"/> used for 
            handling the logic for property changed notifications.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.IFilterDescriptor">
            <summary>
            Represents a filtering abstraction that knows how to create predicate filtering expression.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.IFilterDescriptor.CreateFilterExpression(System.Linq.Expressions.Expression)">
            <summary>
            Creates a predicate filter expression used for collection filtering.
            </summary>
            <param name="instance">The instance expression, which will be used for filtering.</param>
            <returns>A predicate filter expression.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.FilterDescriptorBase.CreateFilterExpression(System.Linq.Expressions.Expression)">
            <summary>
            Creates a filter expression by delegating its creation to 
            <see cref="M:Telerik.Web.Mvc.FilterDescriptorBase.CreateFilterExpression(System.Linq.Expressions.ParameterExpression)"/>, if 
            <paramref name="instance"/> is <see cref="T:System.Linq.Expressions.ParameterExpression"/>, otherwise throws <see cref="T:System.ArgumentException"/>
            </summary>
            <param name="instance">The instance expression, which will be used for filtering.</param>
            <returns>A predicate filter expression.</returns>
            <exception cref="T:System.ArgumentException">Parameter should be of type <see cref="T:System.Linq.Expressions.ParameterExpression"/></exception>
        </member>
        <member name="M:Telerik.Web.Mvc.FilterDescriptorBase.CreateFilterExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Creates a predicate filter expression used for collection filtering.
            </summary>
            <param name="parameterExpression">The parameter expression, which will be used for filtering.</param>
            <returns>A predicate filter expression.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.CompositeFilterDescriptor.CreateFilterExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Creates a predicate filter expression combining <see cref="P:Telerik.Web.Mvc.CompositeFilterDescriptor.FilterDescriptors"/> 
            expressions with <see cref="P:Telerik.Web.Mvc.CompositeFilterDescriptor.LogicalOperator"/>.
            </summary>
            <param name="parameterExpression">The parameter expression, which will be used for filtering.</param>
            <returns>A predicate filter expression.</returns>
        </member>
        <member name="P:Telerik.Web.Mvc.CompositeFilterDescriptor.LogicalOperator">
            <summary>
            Gets or sets the logical operator used for composing of <see cref="P:Telerik.Web.Mvc.CompositeFilterDescriptor.FilterDescriptors"/>.
            </summary>
            <value>The logical operator used for composition.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.CompositeFilterDescriptor.FilterDescriptors">
            <summary>
            Gets or sets the filter descriptors that will be used for composition.
            </summary>
            <value>The filter descriptors used for composition.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.FilterCompositionLogicalOperator">
            <summary>
            Logical operator used for filter descriptor composition.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.FilterCompositionLogicalOperator.And">
            <summary>
            Combines filters with logical AND.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.FilterCompositionLogicalOperator.Or">
            <summary>
            Combines filters with logical OR.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.Infrastructure.Implementation.FilterDescription">
            <summary>
            The class enables implementation of custom filtering logic.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.FilterDescription.SatisfiesFilter(System.Object)">
            <summary>
            The method checks whether the passed parameter satisfies filter criteria. 
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.FilterDescription.CreateFilterExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Creates a predicate filter expression that calls <see cref="M:Telerik.Web.Mvc.Infrastructure.Implementation.FilterDescription.SatisfiesFilter(System.Object)"/>.
            </summary>
            <param name="parameterExpression">The parameter expression, which parameter 
            will be passed to <see cref="M:Telerik.Web.Mvc.Infrastructure.Implementation.FilterDescription.SatisfiesFilter(System.Object)"/> method.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.Implementation.FilterDescription.IsActive">
            <summary>
            If false <see cref="M:Telerik.Web.Mvc.Infrastructure.Implementation.FilterDescription.SatisfiesFilter(System.Object)"/> will not execute.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.FilterDescriptor">
            <summary>
            Represents declarative filtering.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.FilterDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.FilterDescriptor"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.FilterDescriptor.#ctor(System.String,Telerik.Web.Mvc.FilterOperator,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.FilterDescriptor"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="filterOperator">The filter operator.</param>
            <param name="filterValue">The filter value.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.FilterDescriptor.CreateFilterExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Creates a predicate filter expression.
            </summary>
            <param name="parameterExpression">The parameter expression, which will be used for filtering.</param>
            <returns>A predicate filter expression.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.FilterDescriptor.Equals(Telerik.Web.Mvc.FilterDescriptor)">
            <summary>
            Determines whether the specified <paramref name="other"/> descriptor 
            is equal to the current one.
            </summary>
            <param name="other">The other filter descriptor.</param>
            <returns>
            True if all members of the current descriptor are 
            equal to the ones of <paramref name="other"/>, otherwise false.
            </returns>
        </member>
        <member name="M:Telerik.Web.Mvc.FilterDescriptor.Equals(System.Object)">
            <summary>
            Determines whether the specified <paramref name="obj"/>
            is equal to the current descriptor.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.FilterDescriptor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current filter descriptor.
            </returns>
        </member>
        <member name="P:Telerik.Web.Mvc.FilterDescriptor.Member">
            <summary>
            Gets or sets the member name which will be used for filtering.
            </summary>
            <filterValue>The member that will be used for filtering.</filterValue>
        </member>
        <member name="P:Telerik.Web.Mvc.FilterDescriptor.MemberType">
            <summary>
            Gets or sets the type of the member that is used for filtering.
            Set this property if the member type cannot be resolved automatically.
            Such cases are: items with ICustomTypeDescriptor, XmlNode or DataRow.
            Changing this property did not raise 
            <see cref="!:FilterDescriptorBase.PropertyChanged"/> event.
            </summary>
            <value>The type of the member used for filtering.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.FilterDescriptor.Operator">
            <summary>
            Gets or sets the filter operator.
            </summary>
            <filterValue>The filter operator.</filterValue>
        </member>
        <member name="P:Telerik.Web.Mvc.FilterDescriptor.Value">
            <summary>
            Gets or sets the target filter value.
            </summary>
            <filterValue>The filter value.</filterValue>
        </member>
        <member name="T:Telerik.Web.Mvc.Infrastructure.Implementation.FilterDescriptorCollection">
            <summary>
            Represents collection of <see cref="T:Telerik.Web.Mvc.IFilterDescriptor"/>.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.FilterOperator">
            <summary>
            Operator used in <see cref="!:FilterDescription"/>
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.FilterOperator.IsLessThan">
            <summary>
            Left operand must be smaller than the right one.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.FilterOperator.IsLessThanOrEqualTo">
            <summary>
            Left operand must be smaller than or equal to the right one.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.FilterOperator.IsEqualTo">
            <summary>
            Left operand must be equal to the right one.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.FilterOperator.IsNotEqualTo">
            <summary>
            Left operand must be different from the right one.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.FilterOperator.IsGreaterThanOrEqualTo">
            <summary>
            Left operand must be larger than the right one.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.FilterOperator.IsGreaterThan">
            <summary>
            Left operand must be larger than or equal to the right one.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.FilterOperator.StartsWith">
            <summary>
            Left operand must start with the right one.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.FilterOperator.EndsWith">
            <summary>
            Left operand must end with the right one.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.FilterOperator.Contains">
            <summary>
            Left operand must contain the right one.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.FilterOperator.IsContainedIn">
            <summary>
            Left operand must be contained in the right one.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.FilterOperatorExtensions.CreateExpression(Telerik.Web.Mvc.FilterOperator,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean)">
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.IGroup.Key">
            <summary>
            Gets the key for this group.
            </summary>
            <value>The key for this group.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.IGroup.Items">
            <summary>
            Gets the items in this groups.
            </summary>
            <value>The items in this group.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.IGroup.HasSubgroups">
            <summary>
            Gets a value indicating whether this instance has sub groups.
            </summary>
            <value>
            	<c>true</c> if this instance has sub groups; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.IGroup.ItemCount">
            <summary>
            Gets the <see cref="P:Telerik.Web.Mvc.Infrastructure.IGroup.Items"/> count.
            </summary>
            <value>The <see cref="P:Telerik.Web.Mvc.Infrastructure.IGroup.Items"/> count.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.IGroup.Subgroups">
            <summary>
            Gets the subgroups, if <see cref="P:Telerik.Web.Mvc.Infrastructure.IGroup.HasSubgroups"/> is true, otherwise empty collection.
            </summary>
            <value>The subgroups.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.Group.HasSubgroups">
            <summary>
            Gets a value indicating whether this instance has any sub groups.
            </summary>
            <value>
            	<c>true</c> if this instance has sub groups; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.Group.ItemCount">
            <summary>
            Gets the number of items in this group.
            </summary>
            <value>The items count.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.Group.Subgroups">
            <summary>
            Gets the subgroups, if <see cref="P:Telerik.Web.Mvc.Infrastructure.Group.HasSubgroups"/> is true, otherwise empty collection.
            </summary>
            <value>The subgroups.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.Group.Items">
            <summary>
            Gets the items in this groups.
            </summary>
            <value>The items in this group.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.Group.Key">
            <summary>
            Gets the key for this group.
            </summary>
            <value>The key for this group.</value>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.AggregateFunctionsGroup.GetAggregateResults(System.Collections.Generic.IEnumerable{Telerik.Web.Mvc.AggregateFunction})">
            <summary>
            Gets the aggregate results generated for the given aggregate functions.
            </summary>
            <value>The aggregate results for the provided aggregate functions.</value>
            <exception cref="T:System.ArgumentNullException"><c>functions</c> is null.</exception>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.AggregateFunctionsGroup.AggregateFunctionsProjection">
            <summary>
            Gets or sets the aggregate functions projection for this group. 
            This projection is used to generate aggregate functions results for this group.
            </summary>
            <value>The aggregate functions projection.</value>
        </member>
        <member name="M:Telerik.Web.Mvc.AggregateFunction.CreateAggregateExpression(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Creates the aggregate expression that is used for constructing expression 
            tree that will calculate the aggregate result.
            </summary>
            <param name="enumerableExpression">The grouping expression.</param>
            <param name="liftMemberAccessToNull"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.AggregateFunction.GenerateFunctionName">
            <summary>
            Generates default name for this function using this type's name.
            </summary>
            <returns>
            Function name generated with the following pattern: 
            {<see cref="M:System.Object.GetType"/>.<see cref="!:MemberInfo.Name"/>}_{<see cref="M:System.Object.GetHashCode"/>}
            </returns>
        </member>
        <member name="P:Telerik.Web.Mvc.AggregateFunction.Caption">
            <summary>
            Gets or sets the informative message to display as an illustration of the aggregate function.
            </summary>
            <value>The caption to display as an illustration of the aggregate function.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.AggregateFunction.SourceField">
            <summary>
            Gets or sets the name of the field, of the item from the set of items, which value is used as the argument of the aggregate function.
            </summary>
            <value>The name of the field to get the argument value from.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.AggregateFunction.FunctionName">
            <summary>
            Gets or sets the name of the aggregate function, which appears as a property of the group record on which records the function works.
            </summary>
            <value>The name of the function as visible from the group record.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.AggregateFunction.ResultFormatString">
            <summary>
            Gets or sets a string that is used to format the result value.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.Infrastructure.Implementation.AggregateFunctionCollection">
            <summary>
            Represents a collection of <see cref="T:Telerik.Web.Mvc.AggregateFunction"/> items.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.Implementation.AggregateFunctionCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Telerik.Web.Mvc.AggregateFunction"/> with the specified function name.
            </summary>
            <value>
            First <see cref="T:Telerik.Web.Mvc.AggregateFunction"/> with the specified function name 
            if any, otherwise null.
            </value>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.AggregateResult.#ctor(System.Object,System.Int32,Telerik.Web.Mvc.AggregateFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.Infrastructure.AggregateResult"/> class.
            </summary>
            <param name="value">The value of the result.</param>
            <param name="count">The number of arguments used for the calculation of the result.</param>
            <param name="function">Function that generated the result.</param>
            <exception cref="T:System.ArgumentNullException"><c>function</c> is null.</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.AggregateResult.#ctor(Telerik.Web.Mvc.AggregateFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.Infrastructure.AggregateResult"/> class.
            </summary>
            <param name="function"><see cref="T:Telerik.Web.Mvc.AggregateFunction"/> that generated the result.</param>
            <exception cref="T:System.ArgumentNullException"><c>function</c> is null.</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.AggregateResult.#ctor(System.Object,Telerik.Web.Mvc.AggregateFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.Infrastructure.AggregateResult"/> class.
            </summary>
            <param name="value">The value of the result.</param>
            <param name="function"><see cref="T:Telerik.Web.Mvc.AggregateFunction"/> that generated the result.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.AggregateResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.AggregateResult.Value">
            <summary>
            Gets or sets the value of the result.
            </summary>
            <value>The value of the result.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.AggregateResult.FormattedValue">
            <summary>
            Gets the formatted value of the result.
            </summary>
            <value>The formatted value of the result.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.AggregateResult.ItemCount">
            <summary>
            Gets or sets the number of arguments used for the calulation of the result.
            </summary>
            <value>The number of arguments used for the calulation of the result.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.AggregateResult.Caption">
            <summary>
            Gets or sets the text which serves as a caption for the result in a user interface..
            </summary>
            <value>The text which serves as a caption for the result in a user interface.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.AggregateResult.FunctionName">
            <summary>
            Gets the name of the function.
            </summary>
            <value>The name of the function.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.AggregateResultCollection.Item(System.String)">
            <summary>
            Gets the first <see cref="T:Telerik.Web.Mvc.Infrastructure.AggregateResult"/> which
            <see cref="P:Telerik.Web.Mvc.Infrastructure.AggregateResult.FunctionName"/> is equal to <paramref name="functionName"/>.
            </summary>
            <value>
            The <see cref="T:Telerik.Web.Mvc.Infrastructure.AggregateResult"/> for the specified function if any, otherwise null.
            </value>
        </member>
        <member name="T:Telerik.Web.Mvc.AverageFunction">
            <summary>
            Represents a function that returns the arithmetic mean of a set of arguments.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.EnumerableSelectorAggregateFunction">
            <summary>
            Represents an <see cref="T:Telerik.Web.Mvc.AggregateFunction"/> that uses aggregate extension 
            methods provided in <see cref="T:System.Linq.Enumerable"/> using <see cref="!:SourceField"/>
            as a member selector.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.Infrastructure.Implementation.EnumerableAggregateFunctionBase">
            <summary>
            Base class for all aggregate functions that will use extension 
            methods in <see cref="T:System.Linq.Enumerable"/> for aggregation.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.Implementation.EnumerableAggregateFunctionBase.ExtensionMethodsType">
            <summary>
            Gets the type of the extension methods that holds the extension methods for
            aggregation. For example <see cref="T:System.Linq.Enumerable"/> or <see cref="T:System.Linq.Queryable"/>.
            </summary>
            <value>
            The type of that holds the extension methods. The default value is <see cref="T:System.Linq.Enumerable"/>.
            </value>
        </member>
        <member name="M:Telerik.Web.Mvc.EnumerableSelectorAggregateFunction.CreateAggregateExpression(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Creates the aggregate expression using <see cref="T:Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.EnumerableSelectorAggregateFunctionExpressionBuilder"/>.
            </summary>
            <param name="enumerableExpression">The grouping expression.</param>
            <param name="liftMemberAccessToNull"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.AverageFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.AverageFunction"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.AverageFunction.AggregateMethodName">
            <summary>
            Gets the the Average method name.
            </summary>
            <value><c>Average</c>.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.CountFunction">
            <summary>
            Represents a function that returns the number of items in a set of items, including nested sets.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.EnumerableAggregateFunction">
            <summary>
            Represents an <see cref="T:Telerik.Web.Mvc.AggregateFunction"/> that uses aggregate extension 
            methods provided in <see cref="T:System.Linq.Enumerable"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.EnumerableAggregateFunction.CreateAggregateExpression(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Creates the aggregate expression using <see cref="T:Telerik.Web.Mvc.Infrastructure.Implementation.Expressions.EnumerableAggregateFunctionExpressionBuilder"/>.
            </summary>
            <param name="enumerableExpression">The grouping expression.</param>
            <param name="liftMemberAccessToNull"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.CountFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.CountFunction"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.CountFunction.AggregateMethodName">
            <summary>
            Gets the the Count method name.
            </summary>
            <value><c>Count</c>.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.FirstFunction.AggregateMethodName">
            <summary>
            Gets the the First method name.
            </summary>
            <value><c>First</c>.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.LastFunction">
            <summary>
            Represents a function that returns the last item from a set of items.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.LastFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.LastFunction"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.LastFunction.AggregateMethodName">
            <summary>
            Gets the the Last method name.
            </summary>
            <value><c>Last</c>.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.MaxFunction">
            <summary>
            Represents a function that returns the greatest item from a set of items.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.MaxFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.MaxFunction"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.MaxFunction.AggregateMethodName">
            <summary>
            Gets the the Max method name.
            </summary>
            <value><c>Max</c>.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.MinFunction">
            <summary>
            Represents a function that returns the least item from a set of items.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.MinFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.MinFunction"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.MinFunction.AggregateMethodName">
            <summary>
            Gets the the Min method name.
            </summary>
            <value><c>Min</c>.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.SumFunction">
            <summary>
            Represents a function that returns the sum of all items from a set of items.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.SumFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.SumFunction"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.SumFunction.AggregateMethodName">
            <summary>
            Gets the the Min method name.
            </summary>
            <value><c>Min</c>.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.GroupDescriptor">
            <summary>
            Represents grouping criteria.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.SortDescriptor">
            <summary>
            Represents declarative sorting.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.SortDescriptor.Member">
            <summary>
            Gets or sets the member name which will be used for sorting.
            </summary>
            <filterValue>The member that will be used for sorting.</filterValue>
        </member>
        <member name="P:Telerik.Web.Mvc.SortDescriptor.SortDirection">
            <summary>
            Gets or sets the sort direction for this sort descriptor. If the value is null
            no sorting will be applied.
            </summary>
            <value>The sort direction. The default value is null.</value>
        </member>
        <member name="M:Telerik.Web.Mvc.GroupDescriptor.CycleSortDirection">
            <summary>
            Changes the <see cref="T:Telerik.Web.Mvc.SortDescriptor"/> to the next logical value.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.GroupDescriptor.MemberType">
            <summary>
            Gets or sets the type of the member that is used for grouping.
            Set this property if the member type cannot be resolved automatically.
            Such cases are: items with ICustomTypeDescriptor, XmlNode or DataRow.
            Changing this property did not raise 
            <see cref="!:PropertyChanged"/> event.
            </summary>
            <value>The type of the member used for grouping.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.GroupDescriptor.DisplayContent">
            <summary>
            Gets or sets the content which will be used from UI.
            </summary>
            <filterValue>The content that will be used from UI.</filterValue>
        </member>
        <member name="P:Telerik.Web.Mvc.GroupDescriptor.AggregateFunctions">
            <summary>
            Gets or sets the aggregate functions used when grouping is executed.
            </summary>
            <value>The aggregate functions that will be used in grouping.</value>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.GroupExtensions.GetGroupSequenceUniqueKey(System.Collections.Generic.IEnumerable{Telerik.Web.Mvc.Infrastructure.IGroup})">
            <summary>
            Calculates unique int for given group in a group sequence, 
            taking into account groups order, each group key and groups' count.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderTooltipBuilder.Format(System.String)">
            <summary>Gets or sets the format for displaying the value in the tooltip.</summary>
            <param name="value">The value.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Slider()
                        .Name("Slider")
                        .Tooltip(tooltip => tooltip.Format("{0:P"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderTooltipBuilder.Enabled(System.Boolean)">
            <summary>Display tooltip while drag.</summary>
            <param name="value">The value.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Slider()
                        .Name("Slider")
                        .Tooltip(tooltip => tooltip.Enable(false))
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.RangeSliderClientEventsBuilder">
            <summary>Defines the fluent interface for configuring the <see cref="!:RangeSlider.ClientEvents"/>.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.RangeSliderClientEventsBuilder.OnChange(System.Action)">
            <summary>
            Defines the inline handler of the OnChange client-side event
            </summary>
            <param name="action">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().RangeSlider()
                       .Name("RangeSlider")
                       .ClientEvents(events => events.OnChange(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.RangeSliderClientEventsBuilder.OnChange(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnChange client-side event.
            </summary>
            <param name="handlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().RangeSlider()
                        .Name("RangeSlider")
                        .ClientEvents(events => events.OnChange("onChange"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.RangeSliderClientEventsBuilder.OnLoad(System.Action)">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="action">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().RangeSlider()
                       .Name("RangeSlider")
                       .ClientEvents(events => events.OnLoad(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.RangeSliderClientEventsBuilder.OnLoad(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnLoad client-side event.
            </summary>
            <param name="handlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().RangeSlider()
                        .Name("RangeSlider")
                        .ClientEvents(events => events.OnLoad("onLoad"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.RangeSliderClientEventsBuilder.OnSlide(System.Action)">
            <summary>
            Defines the inline handler of the OnSlide client-side event.
            </summary>
            <param name="action">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().RangeSlider()
                       .Name("RangeSlider")
                       .ClientEvents(events => events.OnSlide(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.RangeSliderClientEventsBuilder.OnSlide(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnSlide client-side event.
            </summary>
            <param name="handlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().RangeSlider()
                        .Name("RangeSlider")
                        .ClientEvents(events => events.OnSlide("OnSlide"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.SliderClientEventsBuilder">
            <summary>Defines the fluent interface for configuring the <see cref="!:Slider.ClientEvents"/>.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderClientEventsBuilder.OnChange(System.Action)">
            <summary>
            Defines the inline handler of the OnChange client-side event
            </summary>
            <param name="action">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Slider()
                       .Name("Slider")
                       .ClientEvents(events => events.OnChange(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderClientEventsBuilder.OnChange(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnChange client-side event.
            </summary>
            <param name="handlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Slider()
                        .Name("Slider")
                        .ClientEvents(events => events.OnChange("onChange"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderClientEventsBuilder.OnLoad(System.Action)">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="action">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Slider()
                       .Name("Slider")
                       .ClientEvents(events => events.OnLoad(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderClientEventsBuilder.OnLoad(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnLoad client-side event.
            </summary>
            <param name="handlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Slider()
                        .Name("Slider")
                        .ClientEvents(events => events.OnLoad("onLoad"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderClientEventsBuilder.OnSlide(System.Action)">
            <summary>
            Defines the inline handler of the OnSlide client-side event.
            </summary>
            <param name="action">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Slider()
                       .Name("Slider")
                       .ClientEvents(events => events.OnSlide(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderClientEventsBuilder.OnSlide(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnSlide client-side event.
            </summary>
            <param name="handlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Slider()
                        .Name("Slider")
                        .ClientEvents(events => events.OnSlide("OnSlide"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.RangeSliderBuilder`1">
            <summary>Defines the fluent interface for configuring the <see cref="!:RangeSlider"/>component.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.RangeSliderBuilder`1.#ctor(Telerik.Web.Mvc.UI.RangeSlider{`0})">
            <summary>Initializes a new instance of the <see cref="!:RangeSliderBuilder"/>class.</summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.RangeSliderBuilder`1.Values(System.Nullable{`0},System.Nullable{`0})">
            <summary>Sets the value of the range slider.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.RangeSliderBuilder`1.Values(`0[])">
            <summary>Sets the value of the range slider.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.RangeSliderBuilder`1.Orientation(Telerik.Web.Mvc.UI.SliderOrientation)">
            <summary>Sets orientation of the range slider.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.RangeSliderBuilder`1.TickPlacement(Telerik.Web.Mvc.UI.SliderTickPlacement)">
            <summary>Sets a value indicating how to display the tick marks on the range slider.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.RangeSliderBuilder`1.Min(`0)">
            <summary>Sets the minimum value of the range slider.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.RangeSliderBuilder`1.Max(`0)">
            <summary>Sets the maximum value of the range slider.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.RangeSliderBuilder`1.SmallStep(`0)">
            <summary>Sets the step with which the range slider value will change.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.RangeSliderBuilder`1.LargeStep(`0)">
            <summary>Sets the delta with which the value will change when user click on the track.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.RangeSliderBuilder`1.Tooltip(System.Boolean)">
            <summary>Display tooltip while drag.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.RangeSliderBuilder`1.Tooltip(System.Action{Telerik.Web.Mvc.UI.Fluent.SliderTooltipBuilder})">
            <summary>
            Use it to configure tooltip while drag.
            </summary>
            <param name="configurator">Use builder to set different tooltip options.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Slider()
                        .Name("Slider")
                        .Tooltip(tooltip => tooltip
                            .Enable(true)
                            .Format("{0:P}")
                        );
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.RangeSliderBuilder`1.ClientEvents(System.Action{Telerik.Web.Mvc.UI.Fluent.RangeSliderClientEventsBuilder})">
            <summary>Configures the client-side events.</summary>
            <param name="events">The client events action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().RangeSlider()
                        .Name("RangeSlider")
                        .ClientEvents(events =>
                            events.OnLoad("onLoad").OnChange("onChange"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.RangeSliderBuilder`1.Enable(System.Boolean)">
            <summary>Sets a value indicating whether the range slider can respond to user interaction.</summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.SliderBuilder`1">
            <summary>Defines the fluent interface for configuring the <see cref="!:Slider"/>component.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderBuilder`1.#ctor(Telerik.Web.Mvc.UI.Slider{`0})">
            <summary>Initializes a new instance of the <see cref="!:SliderBuilder"/>class.</summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderBuilder`1.Value(System.Nullable{`0})">
            <summary>Sets the value of the slider.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderBuilder`1.IncreaseButtonTitle(System.String)">
            <summary>Sets the title of the slider increase button.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderBuilder`1.ShowButtons(System.Nullable{System.Boolean})">
            <summary>Sets whether slider to be rendered with increase/decrease button.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderBuilder`1.DecreaseButtonTitle(System.String)">
            <summary>Sets the title of the slider decrease button.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderBuilder`1.Orientation(Telerik.Web.Mvc.UI.SliderOrientation)">
            <summary>Sets orientation of the slider.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderBuilder`1.TickPlacement(Telerik.Web.Mvc.UI.SliderTickPlacement)">
            <summary>Sets a value indicating how to display the tick marks on the slider.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderBuilder`1.Min(`0)">
            <summary>Sets the minimum value of the slider.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderBuilder`1.Max(`0)">
            <summary>Sets the maximum value of the slider.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderBuilder`1.SmallStep(`0)">
            <summary>Sets the step with which the slider value will change.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderBuilder`1.LargeStep(`0)">
            <summary>Sets the delta with which the value will change when user click on the slider.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderBuilder`1.Tooltip(System.Boolean)">
            <summary>Display tooltip while drag.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderBuilder`1.Tooltip(System.Action{Telerik.Web.Mvc.UI.Fluent.SliderTooltipBuilder})">
            <summary>
            Use it to configure tooltip.
            </summary>
            <param name="configurator">Use builder to set different tooltip options.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Slider()
                        .Name("Slider")
                        .Tooltip(tooltip => tooltip
                            .Enable(true)
                            .Format("{0:P}")
                        );
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderBuilder`1.ClientEvents(System.Action{Telerik.Web.Mvc.UI.Fluent.SliderClientEventsBuilder})">
            <summary>Configures the client-side events.</summary>
            <param name="events">The client events action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Slider()
                        .Name("Slider")
                        .ClientEvents(events =>
                            events.OnLoad("onLoad").OnChange("onChange"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SliderBuilder`1.Enable(System.Boolean)">
            <summary>Sets a value indicating whether the slider can respond to user interaction.</summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.SliderOrientation">
            <summary>Specifies the general layout of the slider.</summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.SliderOrientation.Horizontal">
            <summary>The slider is oriented horizontally.</summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.SliderOrientation.Vertical">
            <summary>The slider is oriented vertically.</summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.SliderTickPlacement">
            <summary>Specifies the location of tick marks in a component.</summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.SliderTickPlacement.None">
            <summary>No tick marks appear in the component.</summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.SliderTickPlacement.TopLeft">
            <summary>
            Tick marks are located on the top of a horizontal component or on the
            left of a vertical component.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.SliderTickPlacement.BottomRight">
            <summary>
            Tick marks are located on the bottom of a horizontal component or on the
            right side of a vertical component.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.SliderTickPlacement.Both">
            <summary>Tick marks are located on both sides of the component.</summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterPaneBuilder.Size(System.String)">
            <summary>
            Sets the pane size.
            </summary>
            <param name="value">The desired size. Only sizes in pixels and percentages are allowed.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                        .Name("Splitter")
                        .Panes(panes =>
                        {
                            panes.Add().Size("220px");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterPaneBuilder.MinSize(System.String)">
            <summary>
            Sets the minimum pane size.
            </summary>
            <param name="value">The desired minimum size. Only sizes in pixels and percentages are allowed.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                        .Name("Splitter")
                        .Panes(panes =>
                        {
                            panes.Add().MinSize("220px");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterPaneBuilder.MaxSize(System.String)">
            <summary>
            Sets the maximum pane size.
            </summary>
            <param name="value">The desired maximum size. Only sizes in pixels and percentages are allowed.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                        .Name("Splitter")
                        .Panes(panes =>
                        {
                            panes.Add().MaxSize("220px");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterPaneBuilder.Scrollable(System.Boolean)">
            <summary>
            Sets whether the pane shows a scrollbar when its content overflows.
            </summary>
            <param name="isScrollable">Whether the pane will be scrollable.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                        .Name("Splitter")
                        .Panes(panes =>
                        {
                            panes.Add().Scrollable(false);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterPaneBuilder.Resizable(System.Boolean)">
            <summary>
            Sets whether the pane can be resized by the user.
            </summary>
            <param name="isResizable">Whether the pane will be resizable.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                        .Name("Splitter")
                        .Panes(panes =>
                        {
                            panes.Add().Resizable(true);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterPaneBuilder.Collapsed(System.Boolean)">
            <summary>
            Sets whether the pane is initially collapsed.
            </summary>
            <param name="isCollapsed">Whether the pane will be initially collapsed.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                        .Name("Splitter")
                        .Panes(panes =>
                        {
                            panes.Add().Collapsed(true);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterPaneBuilder.Collapsible(System.Boolean)">
            <summary>
            Sets whether the pane can be collapsed by the user.
            </summary>
            <param name="isCollapsible">Whether the pane can be collapsed by the user.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                        .Name("Splitter")
                        .Panes(panes =>
                        {
                            panes.Add().Collapsible(true);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterPaneBuilder.HtmlAttributes(System.Object)">
            <summary>
            Sets the HTML attributes applied to the outer HTML element rendered for the item
            </summary>
            <param name="attributes">The attributes.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                        .Name("Splitter")
                        .Panes(panes =>
                        {
                            panes.Add().HtmlAttributes(new { style = "background: red" });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterPaneBuilder.HtmlAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the HTML attributes applied to the outer HTML element rendered for the item
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterPaneBuilder.Content(System.Action)">
            <summary>
            Sets the HTML content of the pane.
            </summary>
            <param name="value">The action which renders the HTML content.</param>
            <code lang="CS">
             &lt;%  Html.Telerik().Splitter()
                        .Name("Splitter")
                        .Panes(panes =>
                        {
                            panes.Add()
                                .Content(() =&gt; { &gt;%
                                    &lt;p&gt;Content&lt;/p&gt;
                                %&lt;});
                        })
                        .Render();
            %&gt;
            </code>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterPaneBuilder.Content(System.Func{System.Object,System.Object})">
            <summary>
            Sets the HTML content of the pane.
            </summary>
            <param name="value">The Razor template for the HTML content.</param>
            <code lang="CS">
             @(Html.Telerik().Splitter()
                   .Name("Splitter")
                   .Panes(panes =>
                   {
                       panes.Add()
                            .Content(@&lt;p&gt;Content&lt;/p&gt;);
                   })
                   .Render();)
            </code>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterPaneBuilder.Content(System.String)">
            <summary>
            Sets the HTML content of the pane.
            </summary>
            <param name="value">The HTML content.</param>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                     .Name("Splitter")
                     .Panes(panes =>
                     {
                         panes.Add()
                              .Content("&lt;p&gt;Content&lt;/p&gt;");
                     })
            %&gt;
            </code>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterPaneBuilder.LoadContentFrom(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the Url which will be requested to return the pane content. 
            </summary>
            <param name="routeValues">The route values of the Action method.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                     .Name("Splitter")
                     .Panes(panes => {
                          panes.Add()
                                .LoadContentFrom(MVC.Home.Index().GetRouteValueDictionary());
                     })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterPaneBuilder.LoadContentFrom(System.String,System.String)">
            <summary>
            Sets the Url, which will be requested to return the pane content. 
            </summary>
            <param name="actionName">The action name.</param>
            <param name="controllerName">The controller name.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                     .Name("Splitter")
                     .Panes(panes => {
                          panes.Add()
                               .LoadContentFrom("AjaxView_OpenSource", "Splitter");
                     })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterPaneBuilder.LoadContentFrom(System.String,System.String,System.Object)">
            <summary>
            Sets the Url, which will be requested to return the content.
            </summary>
            <param name="actionName">The action name.</param>
            <param name="controllerName">The controller name.</param>
            <param name="routeValues">Route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                     .Name("Splitter")
                     .Panes(panes => {
                          panes.Add()
                               .LoadContentFrom("AjaxView_OpenSource", "Splitter", new { id = 10 });
                     })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterPaneBuilder.LoadContentFrom(System.String)">
            <summary>
            Sets the Url, which will be requested to return the pane content.
            </summary>
            <param name="value">The url.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                     .Name("Splitter")
                     .Panes(panes => {
                          panes.Add()
                               .LoadContentFrom(Url.Action("AjaxView_OpenSource", "Splitter"));
                     })
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.SplitterPaneFactory">
            <summary>
            Defines the fluent interface for configuring the <see cref="P:Telerik.Web.Mvc.UI.Splitter.Panes"/>.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.SplitterClientEventsBuilder">
            <summary>
            The fluent interface that configures the <see cref="P:Telerik.Web.Mvc.UI.Splitter.ClientEvents"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterClientEventsBuilder.OnLoad(System.Action)">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadCodeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Splitter()
                       .Name("Splitter")
                       .ClientEvents(events => events.OnLoad(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterClientEventsBuilder.OnLoad(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadInlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Splitter()
                       .Name("Splitter")
                       .ClientEvents(events => events.OnLoad(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterClientEventsBuilder.OnLoad(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnLoad client-side event.
            </summary>
            <param name="onLoadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                        .Name("Splitter")
                        .ClientEvents(events => events.OnLoad("onLoad"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterClientEventsBuilder.OnResize(System.Action)">
            <summary>
            Defines the inline handler of the OnResize client-side event
            </summary>
            <param name="onResizeCodeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Splitter()
                       .Name("Splitter")
                       .ClientEvents(events => events.OnResize(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterClientEventsBuilder.OnResize(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnResize client-side event
            </summary>
            <param name="onResizeInlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Splitter()
                       .Name("Splitter")
                       .ClientEvents(events => events.OnResize(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterClientEventsBuilder.OnResize(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnResize client-side event.
            </summary>
            <param name="onResizeHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                        .Name("Splitter")
                        .ClientEvents(events => events.OnResize("onResize"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterClientEventsBuilder.OnExpand(System.Action)">
            <summary>
            Defines the inline handler of the OnExpand client-side event
            </summary>
            <param name="onExpandCodeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Splitter()
                       .Name("Splitter")
                       .ClientEvents(events => events.OnExpand(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterClientEventsBuilder.OnExpand(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnExpand client-side event
            </summary>
            <param name="onExpandInlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Splitter()
                       .Name("Splitter")
                       .ClientEvents(events => events.OnExpand(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterClientEventsBuilder.OnExpand(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnExpand client-side event.
            </summary>
            <param name="onExpandHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                        .Name("Splitter")
                        .ClientEvents(events => events.OnExpand("onExpand"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterClientEventsBuilder.OnCollapse(System.Action)">
            <summary>
            Defines the inline handler of the OnCollapse client-side event
            </summary>
            <param name="onCollapseCodeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Splitter()
                       .Name("Splitter")
                       .ClientEvents(events => events.OnCollapse(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterClientEventsBuilder.OnCollapse(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnCollapse client-side event
            </summary>
            <param name="onCollapseInlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Splitter()
                       .Name("Splitter")
                       .ClientEvents(events => events.OnCollapse(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterClientEventsBuilder.OnCollapse(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnCollapse client-side event.
            </summary>
            <param name="onCollapseHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                        .Name("Splitter")
                        .ClientEvents(events => events.OnCollapse("onCollapse"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterClientEventsBuilder.OnContentLoad(System.Action)">
            <summary>
            Defines the inline handler of the OnContentLoad client-side event
            </summary>
            <param name="onContentLoadCodeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Splitter()
                       .Name("Splitter")
                       .ClientEvents(events => events.OnContentLoad(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterClientEventsBuilder.OnContentLoad(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnContentLoad client-side event
            </summary>
            <param name="onContentLoadInlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Splitter()
                       .Name("Splitter")
                       .ClientEvents(events => events.OnContentLoad(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterClientEventsBuilder.OnContentLoad(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnContentLoad client-side event.
            </summary>
            <param name="onContentLoadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                        .Name("Splitter")
                        .ClientEvents(events => events.OnContentLoad("onContentLoad"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.SplitterOrientation">
            <summary>
            Specifies the orientation in which the splitter panes will be ordered
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.SplitterOrientation.Horizontal">
            <summary>
            Panes are oredered horizontally
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.SplitterOrientation.Vertical">
            <summary>
            Panes are oredered vertically
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterBuilder.Orientation(Telerik.Web.Mvc.UI.SplitterOrientation)">
            <summary>
            Sets the splitter orientation.
            </summary>
            <param name="value">The desired orientation.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                        .Name("Splitter")
                        .Orientation(SplitterOrientation.Vertical)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterBuilder.Panes(System.Action{Telerik.Web.Mvc.UI.Fluent.SplitterPaneFactory})">
            <summary>
            Defines the panes in the splitter.
            </summary>
            <param name="configurePanes">The action that configures the panes.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                        .Name("Splitter")
                        .Panes(panes => {
                            panes.Add().LoadContentFrom("Navigation", "Shared");
                            panes.Add().LoadContentFrom("Index", "Home");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.SplitterBuilder.ClientEvents(System.Action{Telerik.Web.Mvc.UI.Fluent.SplitterClientEventsBuilder})">
            <summary>
            Configures the client events for the splitter.
            </summary>
            <param name="configureClientEvents">The action that configures the client events.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                        .Name("Splitter")
                        .ClientEvents(events => events
                            .OnLoad("onLoad")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.SplitterPane">
            <summary>
            Defines properties for a content pane.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IAsyncContentContainer">
            <summary>
            Defines whether one navigation item can have content loaded asynchroniously.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IAsyncContentContainer.ContentUrl">
            <summary>
            Url, which will be used as a destination for the Ajax request.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.SplitterPane.Size">
            <summary>
            Specifies the size of the pane
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.SplitterPane.MinSize">
            <summary>
            Specifies the minimum size of the pane
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.SplitterPane.MaxSize">
            <summary>
            Specifies the maximum size of the pane
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.SplitterPane.Collapsed">
            <summary>
            Specifies whether the pane is initially collapsed
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.SplitterPane.Collapsible">
            <summary>
            Specifies whether the pane can be collapsed by the user
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.SplitterPane.Resizable">
            <summary>
            Specifies whether the pane can be resized by the user
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.SplitterPane.Scrollable">
            <summary>
            Specifies whether the pane shows a scrollbar when its content overflows
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.SplitterPane.ContentUrl">
            <summary>
            Specifies URL from which to load the pane content
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.SplitterPane.HtmlAttributes">
            <summary>
            Specifies HTML attributes for the pane
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.SplitterPane.Template">
            <summary>
            Specifies the pane contents
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.TextBoxBase`1.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IntegerTextBoxBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.IntegerTextBox"/> component.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.TextBoxBuilderBase`3">
            <summary>
            Defines the fluent interface for configuring the <see cref="!:TextBoxBase"/> component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBuilderBase`3.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="!:TextBoxBaseBuilder"/> class.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBuilderBase`3.Value(System.Nullable{`0})">
            <summary>
            Sets the initial value of the textbox.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBuilderBase`3.IncrementStep(`0)">
            <summary>
            Sets the step, used ti increment/decrement the value of the textbox.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBuilderBase`3.MinValue(System.Nullable{`0})">
            <summary>
            Sets the minimal possible value allowed to the user.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBuilderBase`3.MaxValue(System.Nullable{`0})">
            <summary>
            Sets the maximal possible value allowed to the user.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBuilderBase`3.NumberGroupSize(System.Int32)">
            <summary>
            Sets the group size of the number.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBuilderBase`3.NumberGroupSeparator(System.String)">
            <summary>
            Sets the group separator of the number.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBuilderBase`3.NegativePatternIndex(System.Int32)">
            <summary>
            Sets the index of the negative pattern.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBuilderBase`3.EmptyMessage(System.String)">
            <summary>
            Sets the text which will be displayed if the textbox is empty.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBuilderBase`3.Spinners(System.Boolean)">
            <summary>
            Enables or disables the spin buttons.
            </summary>
            <param name="allowSpinner"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBuilderBase`3.ButtonTitleUp(System.String)">
            <summary>
            Define the tooltip text of the up button.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBuilderBase`3.ButtonTitleDown(System.String)">
            <summary>
            Define the tooltip text of the down button.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBuilderBase`3.ClientEvents(System.Action{Telerik.Web.Mvc.UI.TextBoxBaseClientEventsBuilder})">
            <summary>
            Configures the client-side events.
            </summary>
            <param name="clientEventsAction">The client events action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().NumericTextBox()
                        .Name("NumericTextBox")
                        .ClientEvents(events =>
                            events.OnLoad("onLoad").OnChange("onChange")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBuilderBase`3.InputHtmlAttributes(System.Object)">
            <summary>
            Sets the Input HTML attributes.
            </summary>
            <param name="attributes">The HTML attributes.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBuilderBase`3.InputHtmlAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the Input HTML attributes.
            </summary>
            <param name="attributes">The HTML attributes.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBuilderBase`3.Enable(System.Boolean)">
            <summary>
            Enables or disables the textbox.
            </summary>
            <param name="allowSpinner"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.IntegerTextBoxBuilder.#ctor(Telerik.Web.Mvc.UI.IntegerTextBox)" -->
        <member name="T:Telerik.Web.Mvc.UI.PercentTextBoxBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.PercentTextBox"/> component.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.PercentTextBoxBuilder.#ctor(Telerik.Web.Mvc.UI.PercentTextBox)" -->
        <member name="M:Telerik.Web.Mvc.UI.PercentTextBoxBuilder.DecimalDigits(System.Int32)">
            <summary>
            Defines the number of the decimal digits.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PercentTextBoxBuilder.DecimalSeparator(System.String)">
            <summary>
            Sets the decimal separator.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PercentTextBoxBuilder.PositivePatternIndex(System.Int32)">
            <summary>
            Sets the index of the positive pattern.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PercentTextBoxBuilder.PercentSymbol(System.String)">
            <summary>
            Sets the percent symbol.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.CurrencyTextBoxBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.CurrencyTextBox"/> component.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.CurrencyTextBoxBuilder.#ctor(Telerik.Web.Mvc.UI.CurrencyTextBox)" -->
        <member name="M:Telerik.Web.Mvc.UI.CurrencyTextBoxBuilder.DecimalDigits(System.Int32)">
            <summary>
            Defines the number of the decimal digits.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CurrencyTextBoxBuilder.DecimalSeparator(System.String)">
            <summary>
            Sets the decimal separator.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CurrencyTextBoxBuilder.PositivePatternIndex(System.Int32)">
            <summary>
            Sets the index of the positive pattern.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CurrencyTextBoxBuilder.CurrencySymbol(System.String)">
            <summary>
            Sets the currency symbol.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.QueryableFactory.CreateQueryable(System.Collections.IEnumerable)">
            <exception cref="T:System.ArgumentNullException"><c>source</c> is null.</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.UrlAuthorization.InternalSiteMapNode.IsAccessibleToUser(System.Web.HttpContextBase)">
            ReSharper disable UnusedParameter.Local
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes the provided delegate for each item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <param name="action">The action to be applied.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.EnumerableExtensions.ElementAt(System.Collections.IEnumerable,System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException"><c>index</c> is out of range.</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.EnumerableExtensions.Consolidate``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <exception cref="T:System.ArgumentNullException"><c>first</c> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><c>second</c> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><c>resultSelector</c> is null.</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.EnumerableExtensions.GenericEnumerable`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.Extensions.EnumerableExtensions.GenericEnumerable`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.QueryableExtensions.Sort(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{Telerik.Web.Mvc.SortDescriptor})">
            <summary>
            Sorts the elements of a sequence using the specified sort descriptors.
            </summary>
            <param name="source">A sequence of values to sort.</param>
            <param name="sortDescriptors">The sort descriptors used for sorting.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> whose elements are sorted according to a <paramref name="sortDescriptors"/>.
            </returns>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.QueryableExtensions.Page(System.Linq.IQueryable,System.Int32,System.Int32)">
            <summary>
            Pages through the elements of a sequence until the specified 
            <paramref name="pageIndex"/> using <paramref name="pageSize"/>.
            </summary>
            <param name="source">A sequence of values to page.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> whose elements are at the specified <paramref name="pageIndex"/>.
            </returns>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.QueryableExtensions.Select(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> whose elements are the result of invoking a 
            projection selector on each element of <paramref name="source"/>.
            </returns>
            <param name="source"> A sequence of values to project. </param>
            <param name="selector"> A projection function to apply to each element. </param>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.QueryableExtensions.GroupBy(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Groups the elements of a sequence according to a specified key selector function.
            </summary>
            <param name="source"> An <see cref="T:System.Linq.IQueryable"/> whose elements to group.</param>
            <param name="keySelector"> A function to extract the key for each element.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> with <see cref="T:System.Linq.IGrouping`2"/> items, 
            whose elements contains a sequence of objects and a key.
            </returns>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> whose elements are sorted according to a key.
            </returns>
            <param name="source">
            A sequence of values to order.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> whose elements are sorted in descending order according to a key.
            </returns>
            <param name="source">
            A sequence of values to order.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression,System.Nullable{System.ComponentModel.ListSortDirection})">
            <summary>
            Calls <see cref="M:Telerik.Web.Mvc.Extensions.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)"/> 
            or <see cref="M:Telerik.Web.Mvc.Extensions.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.Linq.Expressions.LambdaExpression)"/> depending on the <paramref name="sortDirection"/>.
            </summary>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="sortDirection">The sort direction.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> whose elements are sorted according to a key.
            </returns>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.QueryableExtensions.GroupBy(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{Telerik.Web.Mvc.GroupDescriptor})">
            <summary>
            Groups the elements of a sequence according to a specified <paramref name="groupDescriptors"/>.
            </summary>
            <param name="source"> An <see cref="T:System.Linq.IQueryable"/> whose elements to group. </param>
            <param name="groupDescriptors">The group descriptors used for grouping.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> with <see cref="T:Telerik.Web.Mvc.Infrastructure.IGroup"/> items, 
            whose elements contains a sequence of objects and a key.
            </returns>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.QueryableExtensions.Aggregate(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{Telerik.Web.Mvc.AggregateFunction})">
            <summary>
            Calculates the results of given aggregates functions on a sequence of elements.
            </summary>
            <param name="source"> An <see cref="T:System.Linq.IQueryable"/> whose elements will 
            be used for aggregate calculation.</param>
            <param name="aggregateFunctions">The aggregate functions.</param>
            <returns>Collection of <see cref="T:Telerik.Web.Mvc.Infrastructure.AggregateResult"/>s calculated for each function.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.QueryableExtensions.Where(System.Linq.IQueryable,System.Linq.Expressions.Expression)">
            <summary> 
            Filters a sequence of values based on a predicate. 
            </summary>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> that contains elements from the input sequence 
            that satisfy the condition specified by <paramref name="predicate"/>.
            </returns>
            <param name="source"> An <see cref="T:System.Linq.IQueryable"/> to filter.</param>
            <param name="predicate"> A function to test each element for a condition.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.QueryableExtensions.Where(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{Telerik.Web.Mvc.IFilterDescriptor})">
            <summary> 
            Filters a sequence of values based on a collection of <see cref="T:Telerik.Web.Mvc.IFilterDescriptor"/>. 
            </summary>
            <param name="source">The source.</param>
            <param name="filterDescriptors">The filter descriptors.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> that contains elements from the input sequence 
            that satisfy the conditions specified by each filter descriptor in <paramref name="filterDescriptors"/>.
            </returns>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.QueryableExtensions.Take(System.Linq.IQueryable,System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> that contains the specified number 
            of elements from the start of <paramref name="source"/>.
            </returns>
            <param name="source"> The sequence to return elements from.</param>
            <param name="count"> The number of elements to return. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null. </exception>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.QueryableExtensions.Skip(System.Linq.IQueryable,System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence 
            and then returns the remaining elements.
            </summary>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> that contains elements that occur 
            after the specified index in the input sequence.
            </returns>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable"/> to return elements from.
            </param>
            <param name="count">
            The number of elements to skip before returning the remaining elements.
            </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.QueryableExtensions.Count(System.Linq.IQueryable)">
            <summary> Returns the number of elements in a sequence.</summary>
            <returns> The number of elements in the input sequence.</returns>
            <param name="source">
            The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be counted.
            </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.QueryableExtensions.ElementAt(System.Linq.IQueryable,System.Int32)">
            <summary> Returns the element at a specified index in a sequence.</summary>
            <returns> The element at the specified position in <paramref name="source"/>.</returns>
            <param name="source"> An <see cref="T:System.Linq.IQueryable"/> to return an element from.</param>
            <param name="index"> The zero-based index of the element to retrieve.</param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index"/> is less than zero.</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.QueryableExtensions.ToIList(System.Linq.IQueryable)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.IList`1"/> from an <see cref="T:System.Linq.IQueryable"/> where T is <see cref="P:System.Linq.IQueryable.ElementType"/>.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> that contains elements from the input sequence.
            </returns>
            <param name="source">
            The <see cref="T:System.Linq.IQueryable"/> to create a <see cref="T:System.Collections.Generic.List`1"/> from.
            </param>
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="T:Telerik.Web.Mvc.PopulateSiteMapAttribute">
            <summary>
            Represents an attribute that is used to populate <see cref="T:Telerik.Web.Mvc.SiteMapBase"/> in view data.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.PopulateSiteMapAttribute.#ctor(Telerik.Web.Mvc.SiteMapDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.PopulateSiteMapAttribute"/> class.
            </summary>
            <param name="siteMaps">The site maps.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.PopulateSiteMapAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.PopulateSiteMapAttribute"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.PopulateSiteMapAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            Called before an action result executes.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.PopulateSiteMapAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
            <summary>
            Called after an action result executes.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.PopulateSiteMapAttribute.DefaultViewDataKey">
            <summary>
            Gets or sets the default view data key.
            </summary>
            <value>The default view data key.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.PopulateSiteMapAttribute.SiteMapName">
            <summary>
            Gets or sets the name of the site map.
            </summary>
            <value>The name of the site map.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.PopulateSiteMapAttribute.ViewDataKey">
            <summary>
            Gets or sets the view data key.
            </summary>
            <value>The view data key.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.PopulateSiteMapAttribute.SiteMaps">
            <summary>
            Gets or sets the site maps.
            </summary>
            <value>The site maps.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.SiteMapBase">
            <summary>
            Defines a base class that represents site map.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.SiteMapBase"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapBase.op_Implicit(Telerik.Web.Mvc.SiteMapBase)~Telerik.Web.Mvc.SiteMapBuilder">
            <summary>
            Performs an implicit conversion from <see cref="T:Telerik.Web.Mvc.SiteMapBase"/> to <see cref="T:Telerik.Web.Mvc.SiteMapBuilder"/>.
            </summary>
            <param name="siteMap">The site map.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapBase.ToBuilder">
            <summary>
            Returns a new builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapBase.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapBase.DefaultCacheDurationInMinutes">
            <summary>
            Gets or sets the default cache duration in minutes.
            </summary>
            <value>The default cache duration in minutes.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapBase.DefaultCompress">
            <summary>
            Gets or sets a value indicating whether [default compress].
            </summary>
            <value><c>true</c> if [default compress]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapBase.DefaultGenerateSearchEngineMap">
            <summary>
            Gets or sets a value indicating whether [default generate search engine map].
            </summary>
            <value>
            <c>true</c> if [default generate search engine map]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapBase.RootNode">
            <summary>
            Gets or sets the root node.
            </summary>
            <value>The root node.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapBase.CacheDurationInMinutes">
            <summary>
            Gets or sets the cache duration in minutes.
            </summary>
            <value>The cache duration in minutes.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapBase.Compress">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Web.Mvc.SiteMapBase"/> is compress.
            </summary>
            <value><c>true</c> if compress; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapBase.GenerateSearchEngineMap">
            <summary>
            Gets or sets a value indicating whether [generate search engine map].
            </summary>
            <value>
            	<c>true</c> if [generate search engine map]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Web.Mvc.SiteMapBuilder">
            <summary>
            The builder to fluently configuring <see cref="T:Telerik.Web.Mvc.SiteMapBase"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapBuilder.#ctor(Telerik.Web.Mvc.SiteMapBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.SiteMapBuilder"/> class.
            </summary>
            <param name="siteMap">The site map.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapBuilder.op_Implicit(Telerik.Web.Mvc.SiteMapBuilder)~Telerik.Web.Mvc.SiteMapBase">
            <summary>
            Performs an implicit conversion from <see cref="T:Telerik.Web.Mvc.SiteMapBuilder"/> to <see cref="T:Telerik.Web.Mvc.SiteMapBase"/>.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapBuilder.ToSiteMap">
            <summary>
            Returns the internal sitemap.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapBuilder.CacheDurationInMinutes(System.Single)">
            <summary>
            Caches the duration in minutes.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapBuilder.Compress(System.Boolean)">
            <summary>
            Compresses the specified value.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapBuilder.GenerateSearchEngineMap(System.Boolean)">
            <summary>
            Generates the search engine map.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapBuilder.RootNode">
            <summary>
            Gets the root node.
            </summary>
            <value>The root node.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.SiteMapChangeFrequency">
            <summary>
            Sitemap change frequency
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.SiteMapChangeFrequency.Automatic">
            <summary>
            Automatic
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.SiteMapChangeFrequency.Daily">
            <summary>
            Daily
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.SiteMapChangeFrequency.Always">
            <summary>
            Always
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.SiteMapChangeFrequency.Hourly">
            <summary>
            Hourly
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.SiteMapChangeFrequency.Weekly">
            <summary>
            Weekly
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.SiteMapChangeFrequency.Monthly">
            <summary>
            Monthly
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.SiteMapChangeFrequency.Yearly">
            <summary>
            Yearly
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.SiteMapChangeFrequency.Never">
            <summary>
            Never
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.SiteMapDictionary">
            <summary>
            Defines a class that is used to store <see cref="T:Telerik.Web.Mvc.SiteMapBase"/> against a key.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapDictionary.Register``1(System.String,System.Action{``0})">
            <summary>
            Registers the specified name.
            </summary>
            <typeparam name="TSiteMap">The type of the site map.</typeparam>
            <param name="name">The name.</param>
            <param name="configure">The configure.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,Telerik.Web.Mvc.SiteMapBase})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapDictionary.Add(System.String,Telerik.Web.Mvc.SiteMapBase)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapDictionary.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,Telerik.Web.Mvc.SiteMapBase})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,Telerik.Web.Mvc.SiteMapBase}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>
            </exception>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,Telerik.Web.Mvc.SiteMapBase})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapDictionary.TryGetValue(System.String,Telerik.Web.Mvc.SiteMapBase@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapDictionary.DefaultSiteMapFactory">
            <summary>
            Gets or sets the default site map factory.
            </summary>
            <value>The default site map factory.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapDictionary.DefaultSiteMap">
            <summary>
            Gets or sets the default site map.
            </summary>
            <value>The default site map.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapDictionary.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapDictionary.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Telerik.Web.Mvc.SiteMapBase"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Telerik.Web.Mvc.SiteMapHandler">
            <summary>
            Defines a class that is used to generate searach engine sitemap xml.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.Infrastructure.HttpHandlerBase">
            <summary>
            Provides a common base set of functionality for IHttpHandler implementations. 
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.HttpHandlerBase.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.HttpHandlerBase.ProcessRequest(System.Web.HttpContextBase)">
            <summary>
            Processes the request.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.Infrastructure.HttpHandlerBase.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"/> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"/> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapHandler.#ctor(Telerik.Web.Mvc.SiteMapDictionary,Telerik.Web.Mvc.Infrastructure.IHttpResponseCompressor,Telerik.Web.Mvc.Infrastructure.IHttpResponseCacher,Telerik.Web.Mvc.IUrlGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.SiteMapHandler"/> class.
            </summary>
            <param name="siteMaps">The site maps.</param>
            <param name="httpResponseCompressor">The HTTP response compressor.</param>
            <param name="httpResponseCacher">The HTTP response cacher.</param>
            <param name="urlGenerator">The URL generator.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.SiteMapHandler"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapHandler.ProcessRequest(System.Web.HttpContextBase)">
            <summary>
            Processes the request.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapHandler.DefaultPath">
            <summary>
            Gets or sets the default path.
            </summary>
            <value>The default path.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.SiteMapManager">
            <summary>
            Defines a class that is used to store global sitemaps.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapManager.SiteMaps">
            <summary>
            Gets the site maps.
            </summary>
            <value>The site maps.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.SiteMapNode">
            <summary>
            Defines a class that is used to store single url.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.LinkedObjectBase`1">
            <summary>
            Serves as the base class for classes that provides linked object information.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.LinkedObjectBase`1.Parent">
            <summary>
            Gets or sets the T object that is the parent of the current node.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.LinkedObjectBase`1.PreviousSibling">
            <summary>
            Gets the previous T object on the same level as the current one, relative to the T.ParentNode object (if one exists).
            </summary>
            <value>The previous sibling.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.LinkedObjectBase`1.NextSibling">
            <summary>
            Gets the next T node on the same hierarchical level as the current one, relative to the T.ParentNode property (if one exists).
            </summary>
            <value>The next sibling.</value>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.SiteMapNode"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNode.op_Implicit(Telerik.Web.Mvc.SiteMapNode)~Telerik.Web.Mvc.SiteMapNodeBuilder">
            <summary>
            Performs an implicit conversion from <see cref="T:Telerik.Web.Mvc.SiteMapNode"/> to <see cref="T:Telerik.Web.Mvc.SiteMapNodeBuilder"/>.
            </summary>
            <param name="node">The node.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapNode.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapNode.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Web.Mvc.SiteMapNode"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapNode.LastModifiedAt">
            <summary>
            Gets or sets the last modified at.
            </summary>
            <value>The last modified at.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapNode.RouteName">
            <summary>
            Gets or sets the name of the route.
            </summary>
            <value>The name of the route.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapNode.ControllerName">
            <summary>
            Gets or sets the name of the controller.
            </summary>
            <value>The name of the controller.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapNode.ActionName">
            <summary>
            Gets or sets the name of the action.
            </summary>
            <value>The name of the action.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapNode.RouteValues">
            <summary>
            Gets or sets the route values.
            </summary>
            <value>The route values.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapNode.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapNode.ChangeFrequency">
            <summary>
            Gets or sets the change frequency.
            </summary>
            <value>The change frequency.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapNode.UpdatePriority">
            <summary>
            Gets or sets the update priority.
            </summary>
            <value>The update priority.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapNode.IncludeInSearchEngineIndex">
            <summary>
            Gets or sets a value indicating whether [include in search engine index].
            </summary>
            <value>
            <c>true</c> if [include in search engine index]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapNode.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.SiteMapNode.ChildNodes">
            <summary>
            Gets or sets the child nodes.
            </summary>
            <value>The child nodes.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.SiteMapNodeBuilder">
            <summary>
            Builder class for fluently configuring <see cref="T:Telerik.Web.Mvc.SiteMapNode"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.#ctor(Telerik.Web.Mvc.SiteMapNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.SiteMapNodeBuilder"/> class.
            </summary>
            <param name="siteMapNode">The site map node.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.op_Implicit(Telerik.Web.Mvc.SiteMapNodeBuilder)~Telerik.Web.Mvc.SiteMapNode">
            <summary>
            Performs an implicit conversion from <see cref="T:Telerik.Web.Mvc.SiteMapNodeBuilder"/> to <see cref="T:Telerik.Web.Mvc.SiteMapNode"/>.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.ToNode">
            <summary>
            Returns the internal node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.Title(System.String)">
            <summary>
            Sets the title.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.Visible(System.Boolean)">
            <summary>
            Sets the visibility.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.LastModifiedAt(System.DateTime)">
            <summary>
            Sets the Lasts the modified date..
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.Route(System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the route.
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.Route(System.String,System.Object)">
            <summary>
            Sets the route.
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.Route(System.String)">
            <summary>
            Sets the route.
            </summary>
            <param name="routeName">Name of the route.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.Action(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action to which the date should navigate
            </summary>
            <param name="routeValues">The route values of the Action method.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.Action(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller and route values.
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.Action(System.String,System.String,System.Object)">
            <summary>
            Sets the action, controller and route values.
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.Action(System.String,System.String)">
            <summary>
            Sets the action and controller.
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.Action``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Expression based controllerAction.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="controllerAction">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.Url(System.String)">
            <summary>
            Sets the url.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.ChangeFrequency(Telerik.Web.Mvc.SiteMapChangeFrequency)">
            <summary>
            Sets the change frequency.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.UpdatePriority(Telerik.Web.Mvc.SiteMapUpdatePriority)">
            <summary>
            Sets the update priority.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.IncludeInSearchEngineIndex(System.Boolean)">
            <summary>
            Marks an item that it would be included in the search engine index.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.Attributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the attributes
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.Attributes(System.Object)">
            <summary>
            Sets the attributes
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeBuilder.ChildNodes(System.Action{Telerik.Web.Mvc.SiteMapNodeFactory})">
            <summary>
            Executes the provided delegate to configure the child node.
            </summary>
            <param name="addActions">The add actions.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.SiteMapNodeFactory">
            <summary>
            Defines a factory that is used to create <see cref="T:Telerik.Web.Mvc.SiteMapNode"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeFactory.#ctor(Telerik.Web.Mvc.SiteMapNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.SiteMapNodeFactory"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.SiteMapNodeFactory.Add">
            <summary>
            Adds this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.SiteMapUpdatePriority">
            <summary>
            Sitemap update priority.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.SiteMapUpdatePriority.Automatic">
            <summary>
            Automatic
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.SiteMapUpdatePriority.Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.SiteMapUpdatePriority.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.SiteMapUpdatePriority.High">
            <summary>
            High
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.SiteMapUpdatePriority.Critical">
            <summary>
            Critical
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.XmlSiteMap">
            <summary>
            Xml file based sitemap.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.XmlSiteMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.XmlSiteMap"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.XmlSiteMap.Load">
            <summary>
            Loads from the default path.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.XmlSiteMap.LoadFrom(System.String)">
            <summary>
            Loads from the specified path.
            </summary>
            <param name="relativeVirtualPath">The relative virtual path.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.XmlSiteMap.DefaultPath">
            <summary>
            Gets or sets the default path.
            </summary>
            <value>The default path.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.CalendarBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.Calendar"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarBuilder.#ctor(Telerik.Web.Mvc.UI.Calendar)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Calendar"/> class.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarBuilder.Value(System.DateTime)">
            <summary>
            Sets selected date.
            </summary>
            <param name="date">DateTime object represents the selected date.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarBuilder.Value(System.String)">
            <summary>
            Sets selected date.
            </summary>
            <param name="date">Date passed as string.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarBuilder.MinDate(System.DateTime)">
            <summary>
            Sets the smallest possible date, which user can choose.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarBuilder.MinDate(System.String)">
            <summary>
            Sets the smallest possible date, which user can choose.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarBuilder.MaxDate(System.DateTime)">
            <summary>
            Sets the biggest possible date, which user can choose.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarBuilder.MaxDate(System.String)">
            <summary>
            Sets the smallest possible date, which user can choose.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarBuilder.ClientEvents(System.Action{Telerik.Web.Mvc.UI.CalendarClientEventsBuilder})">
            <summary>
            Configures the client-side events.
            </summary>
            <param name="clientEventsAction">The client events action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Calendar()
                        .Name("Calendar")
                        .ClientEvents(events =>
                            events.OnLoad("onLoad")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarBuilder.Selection(System.Action{Telerik.Web.Mvc.UI.CalendarSelectionSettingsBuilder})">
            <summary>
            Configures the selection settings of the calendar.
            </summary>
            <param name="selectionAction">SelectAction settings, which includes Action name and IEnumerable of DateTime objects.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.CalendarClientEventsBuilder">
            <summary>
            Defines fluent interface for configuring calendar client events.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarClientEventsBuilder.#ctor(Telerik.Web.Mvc.UI.CalendarClientEvents,System.Web.Mvc.ViewContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.CalendarClientEventsBuilder"/> class.
            </summary>
            <param name="clientEvents">Client events of the calendar.</param>
            <param name="viewContext">The context of the View.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarClientEventsBuilder.OnChange(System.Action)">
            <summary>
            Defines the inline handler of the OnSelect client-side event
            </summary>
            <param name="onSelectAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Calendar()
                       .Name("Calendar")
                       .ClientEvents(events => events.OnChange(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarClientEventsBuilder.OnChange(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnSelect client-side event
            </summary>
            <param name="onSelectAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Calendar()
                       .Name("Calendar")
                       .ClientEvents(events => events.OnChange(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarClientEventsBuilder.OnChange(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the OnDateSelect client-side event.
            </summary>
            <param name="onSelectHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Calendar()
                        .Name("Calendar")
                        .ClientEvents(events => events.OnChange("onChange"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarClientEventsBuilder.OnLoad(System.Action)">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Calendar()
                       .Name("Calendar")
                       .ClientEvents(events => events.OnLoad(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarClientEventsBuilder.OnLoad(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Calendar()
                       .Name("Calendar")
                       .ClientEvents(events => events.OnLoad(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarClientEventsBuilder.OnLoad(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnLoad client-side event.
            </summary>
            <param name="onLoadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DatePicker()
                        .Name("DatePicker")
                        .ClientEvents(events => events.OnLoad("onLoad"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.CalendarNavigation">
            <summary>
            Contains constants for CSS class names, used across all UI extensions
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.CalendarNavigation.Next">
            <summary>
            Next navigation link
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.CalendarNavigation.Prev">
            <summary>
            Previous navigavtion link
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.CalendarNavigation.Fast">
            <summary>
            Previous navigavtion link
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.CalendarSelectionSettingsBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="!:Calendar.CalendarSelectionSettings"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarSelectionSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.CalendarSelectionSettings,System.Web.Mvc.ViewContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.CalendarSelectionSettingsBuilder"/> class.
            </summary>
            <param name="settings">The selection settings.</param>
            <param name="viewContext">The view context.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarSelectionSettingsBuilder.Dates(System.Collections.Generic.IList{System.DateTime})">
            <summary>
            Defines list of dates. This list determines which dates to be rendered with action link.
            </summary>
            <param name="dates">List of <see cref="T:System.DateTime"/> objects</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarSelectionSettingsBuilder.Action(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action to which the date should navigate
            </summary>
            <param name="routeValues">The route values of the Action method.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarSelectionSettingsBuilder.Action(System.String,System.Object)">
            <summary>
            Sets the action to which the date should navigate
            </summary>
            <param name="action">Name of the action.</param>
            <param name="values">The route values.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.CalendarSelectionSettingsBuilder.Action(System.String,System.String,System.Object)">
            <summary>
            Sets the action to which the item should navigate
            </summary>
            <param name="action">Name of the action.</param>
            <param name="controller">Name of the controller.</param>
            <param name="values">The route values.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridDeleteActionCommandBuilder">
            <summary>
            Defines the fluent interface for configuring delete action command.
            </summary>
            <typeparam name=""></typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridDeleteActionCommandBuilder.#ctor(Telerik.Web.Mvc.UI.GridDeleteActionCommand)">
            <summary>
            Initializes a new instance of the <see cref="!:GridDeleteActionCommandBuilder&lt;T&gt;"/> class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridEditActionCommandBuilder">
            <summary>
            Defines the fluent interface for configuring the edit action command.
            </summary>
            <typeparam name=""></typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridEditActionCommandBuilder.#ctor(Telerik.Web.Mvc.UI.GridEditActionCommand)">
            <summary>
            Initializes a new instance of the <see cref="!:GridEditActionCommandBuilder&lt;T&gt;"/> class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridDataBindingConfigurationBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.Grid`1"/> data binding.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridDataBindingConfigurationBuilder.#ctor(Telerik.Web.Mvc.UI.GridDataBindingSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridDataBindingConfigurationBuilder"/> class.
            </summary>
            <param name="settings">The configuration.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridDataBindingConfigurationBuilder.Server">
            <summary>
            Use it to configure Server binding.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Server().Select("FirstLook", "Grid"});
                        })
                        .Pagealbe()
                        .Sortable();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridDataBindingConfigurationBuilder.Ajax">
            <summary>
            Use it to configure Ajax binding.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("_FirstLook", "Grid").Enabled((bool)ViewData["ajax"]);
                        })
                        .Pagealbe()
                        .Sortable();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridDataBindingConfigurationBuilder.WebService">
            <summary>
            Use it to configure web service binding.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.WebService().Select("~/Models/Orders.asmx/GetOrders")
                        })
                        .Columns(columns=>
                        {
                            columns.Add(c => c.OrderID).Width(100);
                            columns.Add(c => c.OrderDate).Width(200).Format("{0:dd/MM/yyyy}");
                            columns.Add(c => c.ShipAddress);
                            columns.Add(c => c.ShipCity).Width(200);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridDataKeyBuilder`1">
            <summary>
            Defines the fluent interface for configuring the data key.
            </summary>
            <typeparam name="TModel">The type of the model</typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridDataKeyBuilder`1.#ctor(Telerik.Web.Mvc.UI.IGridDataKey{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridDataKeyBuilder`1"/> class.
            </summary>
            <param name="dataKey">The dataKey.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridDataKeyBuilder`1.RouteKey(System.String)">
            <summary>
            Sets the RouteKey.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.GridEditingSettings`1.FormHtmlAttributes">
            <summary>
            Gets the HTML attributes of the form rendered during editing
            </summary>
            <value>The HTML attributes.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridDataKeyFactory`1">
            <summary>
            Creates data key for the <see cref="T:Telerik.Web.Mvc.UI.Grid`1"/>.
            </summary>
            <typeparam name="TModel">The type of the data item</typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridDataKeyFactory`1.#ctor(System.Collections.Generic.IList{Telerik.Web.Mvc.UI.IGridDataKey{`0}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridDataKeyFactory`1"/> class.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridDataKeyFactory`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Defines a data key.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridWebServiceBindingSettingsBuilder.OperationMode(Telerik.Web.Mvc.UI.GridOperationMode)">
            <summary>
            Gets or sets the operation mode of the grid. By default the grid will make a request to the 
            server when it needs data for paging, sorting, filtering or grouping. If you set the
            operation mode to GridOperationMode.Client it will make only one request for all data. Any other
            paging, sorting, filtering or grouping will be performed client-side.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.INavigationItemContainer`1">
            <summary>
            Defines which objects can have child items.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.INavigationItemContainer`1.Items">
            <summary>
            Child items collection.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.NumericTextBoxBuilder`1">
            <summary>
            Defines the fluent interface for configuring the <see cref="!:NumericTextBox"/> component.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.NumericTextBoxBuilder`1.#ctor(Telerik.Web.Mvc.UI.NumericTextBox{`0})" -->
        <member name="M:Telerik.Web.Mvc.UI.NumericTextBoxBuilder`1.DecimalDigits(System.Int32)">
            <summary>
            Defines the number of the decimal digits.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NumericTextBoxBuilder`1.DecimalSeparator(System.String)">
            <summary>
            Sets the decimal separator.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.TextBoxBaseClientEventsBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="!:TextBoxBase.ClientEvents"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBaseClientEventsBuilder.OnChange(System.Action)">
            <summary>
            Defines the inline handler of the OnChange client-side event
            </summary>
            <param name="onChangeCodeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().IntegerTextBox()
                       .Name("IntegerTextBox")
                       .ClientEvents(events => events.OnChange(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBaseClientEventsBuilder.OnChange(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnChange client-side event
            </summary>
            <param name="onChangeInlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().IntegerTextBox()
                       .Name("IntegerTextBox")
                       .ClientEvents(events => events.OnChange(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBaseClientEventsBuilder.OnChange(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnChange client-side event.
            </summary>
            <param name="onSelectHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().IntegerTextBox()
                        .Name("IntegerTextBox")
                        .ClientEvents(events => events.OnChange("onChange"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBaseClientEventsBuilder.OnLoad(System.Action)">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadCodeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().IntegerTextBox()
                       .Name("IntegerTextBox")
                       .ClientEvents(events => events.OnLoad(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBaseClientEventsBuilder.OnLoad(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadInlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().IntegerTextBox()
                       .Name("IntegerTextBox")
                       .ClientEvents(events => events.OnLoad(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TextBoxBaseClientEventsBuilder.OnLoad(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnLoad client-side event.
            </summary>
            <param name="onLoadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().IntegerTextBox()
                        .Name("IntegerTextBox")
                        .ClientEvents(events => events.OnLoad("onLoad"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.TimePickerBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.TimePicker"/> component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TimePickerBuilder.#ctor(Telerik.Web.Mvc.UI.TimePicker)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.TimePickerBuilder"/> class.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TimePickerBuilder.Value(System.Nullable{System.DateTime})">
            <summary>
            Sets the value of the timepicker input
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TimePickerBuilder.Value(System.Nullable{System.TimeSpan})">
            <summary>
            Sets the value of the timepicker input
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TimePickerBuilder.Value(System.String)">
            <summary>
            Sets the value of the timepicker input
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TimePickerBuilder.Min(System.TimeSpan)">
            <summary>
            Sets the minimum time, which can be selected in timepicker
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TimePickerBuilder.Min(System.String)">
            <summary>
            Sets the minimum time, which can be selected in timepicker
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TimePickerBuilder.Max(System.TimeSpan)">
            <summary>
            Sets the maximum time, which can be selected in timepicker
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TimePickerBuilder.Max(System.String)">
            <summary>
            Sets the maximum time, which can be selected in timepicker
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TimePickerBuilder.Interval(System.Int32)">
            <summary>
            Sets the interval between hours.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TimePickerBuilder.ShowButton(System.Boolean)">
            <summary>
            Sets whether timepicker to be rendered with button, which shows timeview on click.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TimePickerBuilder.ButtonTitle(System.String)">
            <summary>
            Sets the title of the timepicker button.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.TreeViewDragAndDropSettingsBuilder">
            <summary>
            Defines the fluent interface for configuring TreeView drag&amp;drop.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewDragAndDropSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.TreeViewDragAndDropSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.TreeViewDragAndDropSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewDragAndDropSettingsBuilder.Enabled(System.Boolean)">
            <summary>
            Enables / disables drag&amp;drop functionality.
            </summary>
            <param name="value">Whether to enable or to disable the drag&amp;drop.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewDragAndDropSettingsBuilder.DropTargets(System.String)">
            <summary>
            Allows elements to be dropped on arbitrary HTML elements
            </summary>
            <param name="selector">jQuery selector that specifies the elements that qualify as drop targets.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.TreeViewBindingSettingsBuilder">
            <summary>
            Defines the fluent interface for building <see cref="T:Telerik.Web.Mvc.UI.Fluent.TreeViewBindingSettingsBuilder"/>
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBindingSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.TreeViewBindingSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.TreeViewBindingSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBindingSettingsBuilder.Enabled(System.Boolean)">
            <summary>
            Enables or disables binding.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Index", "Home").Enabled((bool)ViewData["ajax"]);
                        })
            %&gt;
            </code>
            </example>
            <remarks>
            The Enabled method is useful when you need to enable binding based on certain conditions.
            </remarks>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBindingSettingsBuilder.Select(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller and route values
            </summary>
            <param name="routeValues">The route values of the Action method.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select(MVC.Home.Index(1).GetRouteValueDictionary());
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBindingSettingsBuilder.Select(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller and route values for the select operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Index", "Home", new RouteValueDictionary{ {"id", 1} });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBindingSettingsBuilder.Select(System.String,System.String,System.Object)">
            <summary>
            Sets the action, controller and route values for the select operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Index", "Home", new { {"id", 1} });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBindingSettingsBuilder.Select(System.String,System.String)">
            <summary>
            Sets the action, controller and route values for the select operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Index", "Home");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBindingSettingsBuilder.Select(System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the route and values for the select operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Default", "Home", new RouteValueDictionary{ {"id", 1} });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBindingSettingsBuilder.Select(System.String,System.Object)">
            <summary>
            Sets the route and values for the select operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Default", new {id=1});
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBindingSettingsBuilder.Select(System.String)">
            <summary>
            Sets the route name for the select operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .DataBinding(dataBinding => 
                        {
                            dataBinding.Ajax().Select("Default");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.TreeViewBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.TreeView"/> component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBuilder.#ctor(Telerik.Web.Mvc.UI.TreeView)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.TreeViewBuilder"/> class.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBuilder.Items(System.Action{Telerik.Web.Mvc.UI.Fluent.TreeViewItemFactory})">
            <summary>
            Defines the items in the TreeView
            </summary>
            <param name="addAction">The add action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .Items(items =>
                        {
                            items.Add().Text("First Item");
                            items.Add().Text("Second Item");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBuilder.ClientEvents(System.Action{Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder})">
            <summary>
            Configures the client-side events.
            </summary>
            <param name="clientEventsAction">The client events action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .ClientEvents(events =>
                            .OnDataBinding("onDataBinding")
                            .OnItemDataBound("onItemDataBound")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBuilder.BindTo(System.String,System.Action{Telerik.Web.Mvc.UI.TreeViewItem,Telerik.Web.Mvc.SiteMapNode})">
            <summary>
            Binds the TreeView to a sitemap
            </summary>
            <param name="viewDataKey">The view data key.</param>
            <param name="siteMapAction">The action to configure the item.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .BindTo("examples", (item, siteMapNode) =>
                        {
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBuilder.BindTo(System.String)">
            <summary>
            Binds the TreeView to a sitemap.
            </summary>
            <param name="viewDataKey">The view data key.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .BindTo("examples")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBuilder.BindTo(System.Collections.Generic.IEnumerable{Telerik.Web.Mvc.UI.TreeViewItemModel})">
            <summary>
            Binds the TreeView to a list of items.
            Use if a hierarchy of items is being sent from the controller; to bind the TreeView declaratively, use the Items() method.
            </summary>
            <param name="items">The list of items</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .BindTo(model)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBuilder.BindTo``1(System.Collections.Generic.IEnumerable{``0},System.Action{Telerik.Web.Mvc.UI.TreeViewItem,``0})">
            <summary>
            Binds the TreeView to a list of objects. The TreeView will be "flat" which means a TreeView item will be created for 
            every item in the data source.
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
            <param name="dataSource">The data source.</param>
            <param name="itemDataBound">The action executed for every data bound item.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .BindTo(new []{"First", "Second"}, (item, value)
                        {
                           item.Text = value;
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBuilder.BindTo(System.Collections.IEnumerable,System.Action{Telerik.Web.Mvc.UI.NavigationBindingFactory{Telerik.Web.Mvc.UI.TreeViewItem}})">
            <summary>
            Binds the TreeView to a list of objects. The TreeView will create a hierarchy of items using the specified mappings.
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
            <param name="dataSource">The data source.</param>
            <param name="factoryAction">The action which will configure the mappings</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .BindTo(Model, mapping => mapping
                                .For&lt;Customer&gt;(binding => binding
                                    .Children(c => c.Orders) // The "child" items will be bound to the the "Orders" property
                                    .ItemDataBound((item, c) => item.Text = c.ContactName) // Map "Customer" properties to TreeViewItem properties
                                )
                                .For&lt;Order&lt;(binding => binding
                                    .Children(o => null) // "Orders" do not have child objects so return "null"
                                    .ItemDataBound((item, o) => item.Text = o.OrderID.ToString()) // Map "Order" properties to TreeViewItem properties
                                )
                        ) 
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBuilder.DataBinding(System.Action{Telerik.Web.Mvc.UI.Fluent.TreeViewDataBindingConfigurationBuilder})">
            <summary>
            Use it to configure Data binding.
            </summary>
            <param name="configurator">Action that configures the data binding options.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .DataBinding(dataBinding => dataBinding
                           .Ajax().Select("_AjaxLoading", "TreeView")
                        );
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBuilder.ItemAction(System.Action{Telerik.Web.Mvc.UI.TreeViewItem})">
            <summary>
            Callback for each item.
            </summary>
            <param name="action">Action, which will be executed for each item.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .ItemAction(item =>
                        {
                            item
                                .Text(...)
                                .HtmlAttributes(...);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBuilder.HighlightPath(System.Boolean)">
            <summary>
            Select item depending on the current URL.
            </summary>
            <param name="value">If true the item will be highlighted.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .HighlightPath(true)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBuilder.Effects(System.Action{Telerik.Web.Mvc.UI.EffectsBuilder})">
            <summary>
            Configures the effects of the TreeView.
            </summary>
            <param name="effectsAction">The action which configures the effects.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().TreeView()
                       .Name("TreeView")
                       .Effects(fx =>
                       {
            	            fx.Slide()
            		          .Opacity()
            				  .OpenDuration(AnimationDuration.Normal)
            				  .CloseDuration(AnimationDuration.Normal);
                       })
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBuilder.ExpandAll(System.Boolean)">
            <summary>
            Expand all the items.
            </summary>
            <param name="value">If true all the items will be expanded.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .ExpandAll(true)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBuilder.ShowLines(System.Boolean)">
            <summary>
            ShowLines indicates if lines connecting child nodes to parent nodes are displayed.
            </summary>
            <param name="value">If true lines connecting child nodes to parent nodes are displayed.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .ShowLines(true)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBuilder.ShowCheckBox(System.Boolean)">
            <summary>
            ShowCheckBox indicates if checkbox displayed before node.
            </summary>
            <param name="value">If true checkbox will be displayed for every node.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .ShowCheckBox(true)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBuilder.DragAndDrop(System.Boolean)">
            <summary>
            Enables drag &amp; drop between treeview nodes.
            </summary>
            <param name="value">If true, drag &amp; drop is enabled.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .Items(items =>
                        {
                            items.Add().Text("First Item");
                            items.Add().Text("Second Item");
                        })
                        .DragAndDrop(true)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewBuilder.DragAndDrop(System.Action{Telerik.Web.Mvc.UI.Fluent.TreeViewDragAndDropSettingsBuilder})">
            <summary>
            Enables drag &amp; drop between treeview nodes.
            </summary>
            <param name="configureDragAndDrop">Action that configures the drag and drop options.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .Items(items =>
                        {
                            items.Add().Text("First Item");
                            items.Add().Text("Second Item");
                        })
                        .DragAndDrop(settings =>
                        {
                            
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="P:Telerik.Web.Mvc.UI.TreeView.ClientEvents"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.#ctor(Telerik.Web.Mvc.UI.TreeViewClientEvents,System.Web.Mvc.ViewContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder"/> class.
            </summary>
            <param name="clientEvents">The client events.</param>
            <param name="viewContext">The view context.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnExpand(System.Action)">
            <summary>
            Defines the inline handler of the OnExpand client-side event
            </summary>
            <param name="onExpandAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnExpand(() =>
                       {
                            %&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnExpand(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnExpand client-side event
            </summary>
            <param name="onExpandAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnExpand(
                            @&lt;text&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnExpand(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnExpand client-side event.
            </summary>
            <param name="onExpandHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .ClientEvents(events => events.OnExpand("onExpand"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnCollapse(System.Action)">
            <summary>
            Defines the inline handler of the OnCollapse client-side event
            </summary>
            <param name="onCollapseAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnCollapse(() =>
                       {
                            %&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnCollapse(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnCollapse client-side event
            </summary>
            <param name="onCollapseAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnCollapse(
                            @&lt;text&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnCollapse(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnCollapse client-side event.
            </summary>
            <param name="onCollapseHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .ClientEvents(events => events.OnCollapse("onCollapse"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnSelect(System.Action)">
            <summary>
            Defines the inline handler of the OnSelect client-side event
            </summary>
            <param name="onSelectAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnSelect(() =>
                       {
                            %&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnSelect(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnSelect client-side event
            </summary>
            <param name="onSelectAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnSelect(
                            @&lt;text&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnSelect(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnSelect client-side event.
            </summary>
            <param name="onSelectHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .ClientEvents(events => events.OnSelect("onSelect"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnLoad(System.Action)">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnLoad(() =>
                       {
                            %&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnLoad(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnLoad(
                            @&lt;text&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnLoad(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnLoad client-side event.
            </summary>
            <param name="onLoadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .ClientEvents(events => events.OnLoad("onLoad"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnError(System.Action)">
            <summary>
            Defines the inline handler of the OnError client-side event
            </summary>
            <param name="onErrorAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnError(() =>
                       {
                            %&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnError(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnError client-side event
            </summary>
            <param name="onErrorAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnError(
                            @&lt;text&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnError(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnError client-side event.
            </summary>
            <param name="onErrorHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .ClientEvents(events => events.OnError("onError"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnNodeDragStart(System.Action)">
            <summary>
            Defines the inline handler of the OnNodeDragStart client-side event
            </summary>
            <param name="onNodeDragAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnNodeDragStart(() =>
                       {
                            %&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnNodeDragStart(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnNodeDragStart client-side event
            </summary>
            <param name="onNodeDragAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnNodeDragStart(
                            @&lt;text&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnNodeDragStart(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnNodeDragStart client-side event.
            </summary>
            <param name="onNodeDragHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .ClientEvents(events => events.OnNodeDragStart("onNodeDragStrat"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnNodeDrop(System.Action)">
            <summary>
            Defines the inline handler of the OnNodeDrop client-side event
            </summary>
            <param name="onNodeDropAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnNodeDrop(() =>
                       {
                            %&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnNodeDrop(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnNodeDrop client-side event
            </summary>
            <param name="onNodeDropAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnNodeDrop(
                            @&lt;text&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnNodeDrop(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnNodeDrop client-side event.
            </summary>
            <param name="onNodeDropHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .ClientEvents(events => events.OnNodeDrop("OnNodeDrop"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnNodeDropped(System.Action)">
            <summary>
            Defines the inline handler of the OnNodeDropped client-side event
            </summary>
            <param name="onNodeDroppedAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnNodeDropped(() =>
                       {
                            %&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnNodeDropped(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnNodeDropped client-side event
            </summary>
            <param name="onNodeDroppedAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnNodeDropped(
                            @&lt;text&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnNodeDropped(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnNodeDropped client-side event.
            </summary>
            <param name="onNodeDroppedHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .ClientEvents(events => events.OnNodeDropped("OnNodeDropped"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnNodeDragCancelled(System.Action)">
            <summary>
            Defines the inline handler of the OnNodeDragCancelled client-side event
            </summary>
            <param name="onNodeDragCancelledAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnNodeDragCancelled(() =>
                       {
                            %&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnNodeDragCancelled(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnNodeDragCancelled client-side event
            </summary>
            <param name="onNodeDragCancelledAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnNodeDragCancelled(
                            @&lt;text&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnNodeDragCancelled(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnNodeDragCancelled client-side event.
            </summary>
            <param name="onNodeDragCancelledHandlerAction">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .ClientEvents(events => events.OnNodeDragCancelled("OnNodeDragCancelled"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnNodeDragging(System.Action)">
            <summary>
            Defines the inline handler of the OnNodeDragging client-side event
            </summary>
            <param name="onNodeDragging">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnNodeDragging(() =>
                       {
                            %&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnNodeDragging(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnNodeDragging client-side event
            </summary>
            <param name="onNodeDragging">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnNodeDragging(
                            @&lt;text&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnNodeDragging(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnNodeDragging client-side event.
            </summary>
            <param name="onNodeDragging">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .ClientEvents(events => events.OnNodeDragging("OnNodeDragging"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnDataBinding(System.Action)">
            <summary>
            Defines the inline handler of the OnDataBinding client-side event
            </summary>
            <param name="onDataBindingAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnDataBinding(() =>
                       {
                            %&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnDataBinding(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnDataBinding client-side event
            </summary>
            <param name="onDataBindingAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnDataBinding(
                            @&lt;text&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnDataBinding(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnDataBinding client-side event.
            </summary>
            <param name="onDataBindingHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .ClientEvents(events => events.OnDataBinding("OnDataBinding"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnDataBound(System.Action)">
            <summary>
            Defines the inline handler of the OnDataBound client-side event
            </summary>
            <param name="onDataBoundAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnDataBound(() =>
                       {
                            %&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnDataBound(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnDataBound client-side event
            </summary>
            <param name="onDataBoundAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnDataBound(
                            @&lt;text&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnDataBound(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnDataBound client-side event.
            </summary>
            <param name="onDataBoundHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .ClientEvents(events => events.OnDataBound("OnDataBound"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnChecked(System.Action)">
            <summary>
            Defines the inline handler of the OnChecked client-side event. Requires ShowCheckBox to be true.
            </summary>
            <param name="onDataBoundAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnChecked(() =>
                       {
                            %&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnChecked(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnChecked client-side event. Requires ShowCheckBox to be true.
            </summary>
            <param name="onDataBoundAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TreeView()
                       .Name("TreeView")
                       .ClientEvents(events => events.OnChecked(
                            @&lt;text&gt;
                            function(e) {
                                // event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewClientEventsBuilder.OnChecked(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnChecked client-side event. Requires ShowCheckBox to be true.
            </summary>
            <param name="onCheckedHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .ClientEvents(events => events.OnChecked("onChecked"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.TreeViewDataBindingConfigurationBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.TreeView"/> data binding.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewDataBindingConfigurationBuilder.#ctor(Telerik.Web.Mvc.UI.TreeViewDataBindingConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.TreeViewDataBindingConfigurationBuilder"/> class.
            </summary>
            <param name="settings">The configuration.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewDataBindingConfigurationBuilder.Ajax">
            <summary>
            Use it to configure Ajax binding.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .DataBinding(dataBinding => dataBinding
                           .Ajax().Select("_AjaxLoading", "TreeView")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewDataBindingConfigurationBuilder.WebService">
            <summary>
            Use it to configure web service binding.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .DataBinding(dataBinding => dataBinding
                           .WebService().Select("~/Models/Employees.asmx/GetEmployees")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.TreeViewItemBuilder">
            <summary>
            Defines the fluent interface for configuring child TreeView items.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.NavigationItemBuilder`2">
            <summary>
            Defines the fluent interface for configuring navigation items
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.#ctor(Telerik.Web.Mvc.UI.NavigationItem{`0},System.Web.Mvc.ViewContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.NavigationItemBuilder`2"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.ToItem">
            <summary>
            Returns the inner navigation item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.HtmlAttributes(System.Object)">
            <summary>
            Sets the HTML attributes applied to the outer HTML element rendered for the item
            </summary>
            <param name="attributes">The attributes.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items => items.Add().Attributes(new {@class="first-item"}))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.HtmlAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the HTML attributes applied to the outer HTML element rendered for the item
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.Text(System.String)">
            <summary>
            Sets the text displayed by the item.
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items => items.Add().Text("First Item"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.Visible(System.Boolean)">
            <summary>
            Makes the item visible or not. Invisible items are not rendered in the output HTML.
            </summary>
            <summary>
            Sets the text displayed by the item.
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items => items.Add().Text("First Item").Visible((bool)ViewData["visible"])
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.Enabled(System.Boolean)">
            <summary>
            Enables or disables the item. Disabled item cannot be clicked, expanded or open (depending on the item type - menu, tabstrip, panelbar).
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items => items.Add().Text("First Item").Enabled((bool)ViewData["enabled"])
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.Selected(System.Boolean)">
            <summary>
            Selects or unselects the item. By default items are not selected.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items => items.Add().Text("First Item").Selected(true))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.Route(System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the route to which the item should navigate.
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items => items.Add().Text("First Item").Route("Default", new RouteValueDictionary{{"id", 1}}))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.Route(System.String,System.Object)">
            <summary>
            Sets the route to which the item should navigate.
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items => items.Add().Text("First Item").Route("Default", new {id, 1}))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.Route(System.String)">
            <summary>
            Sets the route to which the item should navigate.
            </summary>
            <param name="routeName">Name of the route.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items => items.Add().Text("First Item").Route("Default"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.Action(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action to which the item should navigate
            </summary>
            <param name="routeValues">The route values of the Action method.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items => items.Add().Text("Index").Action(MVC.Home.Index(3).GetRouteValueDictionary()))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.Action(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action to which the item should navigate
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items => items.Add().Text("Index").Action("Index", "Home", new RouteValueDictionary{{"id", 1}}))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.Action(System.String,System.String,System.Object)">
            <summary>
            Sets the action to which the item should navigate
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items => items.Add().Text("Index").Action("Index", "Home", new {id, 1}))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.Action(System.String,System.String)">
            <summary>
            Sets the action to which the item should navigate
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items => items.Add().Text("Index").Action("Index", "Home"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.Url(System.String)">
            <summary>
            Sets the URL to which the item should navigate
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items => items.Add().Text("www.example.com").Url("http://www.example.com"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.ImageUrl(System.String)">
            <summary>
            Sets the URL of the image that should be displayed by the item.
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items => items.Add().Text("First Item").ImageUrl("~/Content/first.png"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.ImageHtmlAttributes(System.Object)">
            <summary>
            Sets the HTML attributes for the item image.
            </summary>
            <param name="attributes">The attributes.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items => items
                               .Add().Text("First Item")
                               .ImageUrl("~/Content/first.png")
                               .ImageHtmlAttributes(new {@class="first-item-image"}))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.ImageHtmlAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the HTML attributes for the item image.
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.SpriteCssClasses(System.String[])">
            <summary>
            Sets the sprite CSS class names.
            </summary>
            <param name="cssClasses">The CSS classes.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items => items
                               .Add().Text("First Item")
                               .SpriteCssClasses("icon", "first-item")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.Content(System.Action)">
            <summary>
            Sets the HTML content which the item should display.
            </summary>
            <param name="value">The action which renders the content.</param>
            <code lang="CS">
             &lt;% Html.Telerik().Menu()
                       .Name("Menu")
                       .Items(items => items
                                .Add()
                                .Text("First Item")
                                .Content(() => 
                                { 
                                    %&gt;
                                        &lt;strong&gt; First Item Content&lt;/strong&gt;
                                    &lt;% 
                                });)
                       .Render();
            %&gt;
            </code>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.Content(System.Func{System.Object,System.Object})">
            <summary>
            Sets the HTML content which the item should display.
            </summary>
            <param name="value">The content wrapped in a regular HTML tag or text tag (Razor syntax).</param>
            <code lang="CS">
             @(Html.Telerik().Menu()
                  .Name("Menu")
                  .Items(items => items
                           .Add()
                           .Text("First Item")
                           .Content(
                                @&lt;text&gt;
                                        Some text
                                        &lt;strong&gt; First Item Content&lt;/strong&gt;
                                &lt;/text&gt;
                           );
                  )
             )
            </code>  
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.Content(System.String)">
            <summary>
            Sets the HTML content which the item should display as a string.
            </summary>
            <param name="value">The action which renders the content.</param>
            <code lang="CS">
             &lt;% Html.Telerik().Menu()
                       .Name("Menu")
                       .Items(items => items
                                .Add()
                                .Text("First Item")
                                .Content("&lt;strong&gt; First Item Content&lt;/strong&gt;");
                             )
                       .Render();
            %&gt;
            </code>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.ContentHtmlAttributes(System.Object)">
            <summary>
            Sets the HTML attributes of the content element of the item.
            </summary>
            <param name="attributes">The attributes.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items => items
                               .Add().Text("First Item")
                               .Content(() => { %&gt; &lt;strong&gt;First Item Content&lt;/strong&gt; &lt;% })
                               .ContentHtmlAttributes(new {@class="first-item-content"})
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.ContentHtmlAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the HTML attributes of the content element of the item.
            </summary>
            <param name="attributes">The attributes.</param>     
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.Action``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Makes the item navigate to the specified controllerAction method.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="controllerAction">The action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items => items
                               .Add().Text("First Item")
                               .Action&lt;HomeController&gt;(controller => controller.Index()))
                               
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigationItemBuilder`2.Encoded(System.Boolean)">
            <summary>
            Sets whether the Text property should be encoded when the item is rendered.
            </summary>
            <param name="isEncoded">Whether the property should be encoded. Default: true.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items => items.Add().Text("&lt;strong&gt;First Item&lt;/strong&gt;").Encoded(false))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewItemBuilder.#ctor(Telerik.Web.Mvc.UI.TreeViewItem,System.Web.Mvc.ViewContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.TreeViewItemBuilder"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewItemBuilder.Items(System.Action{Telerik.Web.Mvc.UI.Fluent.TreeViewItemFactory})">
            <summary>
            Configures the child items of a <see cref="T:Telerik.Web.Mvc.UI.TreeViewItem"/>.
            </summary>
            <param name="addAction">The add action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .Items(items =&gt;
                        {
                            items.Add().Text("First Item").Items(firstItemChildren =&gt; 
                            {
                                firstItemChildren.Add().Text("Child Item 1");
                                firstItemChildren.Add().Text("Child Item 2");
                            });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewItemBuilder.Value(System.String)">
            <summary>
            Sets the value for the item.
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .Items(items => items.Add().Value("1"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewItemBuilder.Expanded(System.Boolean)">
            <summary>
            Define when the item will be expanded on intial render.
            </summary>
            <param name="value">If true the item will be expanded.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .Items(items =>
                        {
                            items.Add().Text("First Item").Items(firstItemChildren => 
                            {
                                firstItemChildren.Add().Text("Child Item 1");
                                firstItemChildren.Add().Text("Child Item 2");
                            })
                            .Expanded(true);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewItemBuilder.Checked(System.Boolean)">
            <summary>
            Define when the item will be checked on intial render.
            </summary>
            <param name="value">If true the item will be checked.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .Items(items =>
                        {
                            items.Add().Text("First Item").Items(firstItemChildren => 
                            {
                                firstItemChildren.Add().Text("Child Item 1");
                                firstItemChildren.Add().Text("Child Item 2");
                            })
                            .Checked(true);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewItemBuilder.Checkable(System.Boolean)">
            <summary>
            Enables/disables the rendering of a checkbox for this item.
            </summary>
            <param name="value">If false, no checkbox will be rendered.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .Items(items =>
                        {
                            items.Add().Text("First Item").Items(firstItemChildren => 
                            {
                                firstItemChildren.Add().Text("Child Item 1");
                                firstItemChildren.Add().Text("Child Item 2");
                            })
                            .Checkable(false);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewItemBuilder.LoadOnDemand(System.Boolean)">
            <summary>
            Sets the expand mode of the treeview item.
            </summary>
            <param name="value">If true then item will be load on demand from client side.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .Items(items =>
                        {
                            items.Add().Text("First Item").Items(firstItemChildren => 
                            {
                                firstItemChildren.Add().Text("Child Item 1");
                                firstItemChildren.Add().Text("Child Item 2");
                            })
                            .LoadOnDemand(true);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.TreeViewItemFactory">
            <summary>
            Creates items for the <see cref="T:Telerik.Web.Mvc.UI.TreeView"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewItemFactory.#ctor(Telerik.Web.Mvc.UI.INavigationItemContainer{Telerik.Web.Mvc.UI.TreeViewItem},System.Web.Mvc.ViewContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.TreeViewItemFactory"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewItemFactory.Add">
            <summary>
            Defines a item.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.TreeViewWebServiceBindingSettingsBuilder">
            <summary>
            Defines the fluent interface for configuring the treeview webservice.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewWebServiceBindingSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.TreeViewBindingSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.TreeViewWebServiceBindingSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewWebServiceBindingSettingsBuilder.Select(System.String)">
            <summary>
            Specify the web service url for loading data
            </summary>
            <param name="value">The web service url</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .DataBinding(dataBinding => dataBinding
                           .WebService().Select("~/Models/Employees.asmx/GetEmployees")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.TreeViewWebServiceBindingSettingsBuilder.Enabled(System.Boolean)">
            <summary>
            Enables / disables web service functionality.
            </summary>
            <param name="value">Whether to enable or to disable the web service.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .DataBinding(dataBinding => dataBinding
                           .Ajax().Enabled(true).Select("_AjaxLoading", "TreeView")
                        )
            %&gt;
            </code>
            </example>
            <remarks>
            The Enabled method is useful when you need to enable ajax based on certain conditions.
            </remarks>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.TreeView">
            <summary>
            Telerik Treeview for ASP.NET MVC is a view component for presenting hierarchical data.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TreeView.#ctor(System.Web.Mvc.ViewContext,Telerik.Web.Mvc.UI.IClientSideObjectWriterFactory,Telerik.Web.Mvc.IUrlGenerator,Telerik.Web.Mvc.Infrastructure.INavigationItemAuthorization,Telerik.Web.Mvc.UI.ITreeViewHtmlBuilderFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.TreeView"/> class.
            </summary>
            <param name="viewContext">The view context.</param>
            <param name="clientSideObjectWriterFactory">The client side object writer factory.</param>
            <param name="urlGenerator">The URL generator.</param>
            <param name="urlGenerator">The navigation item authorization.</param>
            <param name="builderFactory">The builder factory.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.TreeView.ClientEvents">
            <summary>
            Gets the client events of the treeview.
            </summary>
            <value>The client events.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.TreeView.Items">
            <summary>
            Gets the items of the treeview.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.TreeView.ItemAction">
            <summary>
            Gets or sets the item action.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.TreeView.Effects">
            <summary>
            Gets or sets the effects.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.TreeView.ExpandAll">
            <summary>
            Gets or sets a value indicating whether all the item is expanded.
            </summary>
            <value><c>true</c> if expand all is enabled; otherwise, <c>false</c>. The default value is <c>false</c></value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.TreeView.ShowLines">
            <summary>
            Gets or sets a value indicating whether all the item is expanded.
            </summary>
            <value><c>true</c> if expand all is enabled; otherwise, <c>false</c>. The default value is <c>false</c></value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.TreeView.ShowCheckBox">
            <summary>
            Gets or sets a value indicating whether all the item is expanded.
            </summary>
            <value><c>true</c> if expand all is enabled; otherwise, <c>false</c>. The default value is <c>false</c></value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.TreeView.Ajax">
            <summary>
            Gets the ajax configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.TreeView.WebService">
            <summary>
            Gets the web service configuration
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Telerik.Web.Mvc.UI.TreeView.DragAndDrop" -->
        <member name="T:Telerik.Web.Mvc.UI.IContentContainer">
            <summary>
            Defines whether one navigation item can have content output immediately
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IContentContainer.ContentHtmlAttributes">
            <summary>
            The HtmlAttributes which will be added to the wrapper of the content.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IContentContainer.Content">
            <summary>
            The action which will output the content.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.DatePicker.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.DatePickerBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.DatePicker"/> component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerBuilder.#ctor(Telerik.Web.Mvc.UI.DatePicker)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.DatePickerBuilder"/> class.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerBuilder.ShowButton(System.Boolean)">
            <summary>
            Sets whether datepicker to be rendered with button, which shows calendar on click.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerBuilder.ButtonTitle(System.String)">
            <summary>
            Sets the title of the datepicker button.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerBuilder.Value(System.Nullable{System.DateTime})">
            <summary>
            Sets the value of the datepicker input
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerBuilder.Value(System.String)">
            <summary>
            Sets the value of the datepicker input
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerBuilder.Min(System.String)">
            <summary>
            Sets the minimal date, which can be selected in DatePicker.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.DatePickerBuilder.Max(System.String)">
            <summary>
            Sets the maximal date, which can be selected in DatePicker.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ContentNavigationItemBuilder`2.LoadContentFrom(System.Web.Routing.RouteValueDictionary)">
             <summary>
             Sets the Url, which will be requested to return the content. 
             </summary>
             <param name="routeValues">The route values of the Action method.</param>
             <example>
             <code lang="CS">
              &lt;%= Html.Telerik().PanelBar()
                     .Name("PanelBar")
                     .Items(parent => {
            
                          parent.Add()
                                .LoadContentFrom(MVC.Home.Index().GetRouteValueDictionary());
                      })
             %&gt;
             </code>
             </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ContentNavigationItemBuilder`2.LoadContentFrom(System.String,System.String)">
             <summary>
             Sets the Url, which will be requested to return the content. 
             </summary>
             <param name="actionName">The action name.</param>
             <param name="controllerName">The controller name.</param>
             <example>
             <code lang="CS">
              &lt;%= Html.Telerik().PanelBar()
                     .Name("PanelBar")
                     .Items(parent => {
            
                          parent.Add()
                                .Text("Completely Open Source")
                                .LoadContentFrom("AjaxView_OpenSource", "PanelBar");
                      })
             %&gt;
             </code>
             </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ContentNavigationItemBuilder`2.LoadContentFrom(System.String,System.String,System.Object)">
             <summary>
             Sets the Url, which will be requested to return the content.
             </summary>
             <param name="actionName">The action name.</param>
             <param name="controllerName">The controller name.</param>
             <param name="routeValues">Route values.</param>
             <example>
             <code lang="CS">
              &lt;%= Html.Telerik().PanelBar()
                     .Name("PanelBar")
                     .Items(parent => {
            
                          parent.Add()
                                .Text("Completely Open Source")
                                .LoadContentFrom("AjaxView_OpenSource", "PanelBar", new { id = 10});
                      })
             %&gt;
             </code>
             </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ContentNavigationItemBuilder`2.LoadContentFrom(System.String)">
             <summary>
             Sets the Url, which will be requested to return the content.
             </summary>
             <param name="value">The url.</param>
             <example>
             <code lang="CS">
              &lt;%= Html.Telerik().PanelBar()
                     .Name("PanelBar")
                     .Items(parent => {
            
                          parent.Add()
                                .Text("Completely Open Source")
                                .LoadContentFrom(Url.Action("AjaxView_OpenSource", "PanelBar"));
                      })
             %&gt;
             </code>
             </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridAjaxSettingsBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.Grid`1"/> ajax settings
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridRequestSettingsBuilderBase`2">
            <summary>
            Defines the fluent interface for building <see cref="!:GridRequestSettings"/>
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridRequestSettingsBuilderBase`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridRequestSettingsBuilderBase`2"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridRequestSettingsBuilderBase`2.Route(System.String,System.Object)">
            <summary>
            Sets the route and values
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Ajax(ajax => ajax.Route("Default", new {id=1}))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridRequestSettingsBuilderBase`2.Route(System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the route and values
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Ajax(ajax => ajax.Route("Default", new RouteValueDictionary{{"id",1}}))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridRequestSettingsBuilderBase`2.Route(System.String)">
            <summary>
            Sets the route name
            </summary>
            <param name="routeName">Name of the route.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Ajax(ajax => ajax.Route("Default"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridRequestSettingsBuilderBase`2.Action(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller and route values
            </summary>
            <param name="routeValues">The route values of the Action method.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action(MVC.Home.Index(1).GetRouteValueDictionary()))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridRequestSettingsBuilderBase`2.Action(System.String,System.String,System.Object)">
            <summary>
            Sets the action, controller and route values
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action("Index", "Home", new {id = 1}))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridRequestSettingsBuilderBase`2.Action(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller and route values
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action("Index", "Home", new RouteValueDictionary{ {"id", 1} }))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridRequestSettingsBuilderBase`2.Action(System.String,System.String)">
            <summary>
            Sets the action, controller and route values
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action("Index", "Home"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Fluent.GridRequestSettingsBuilderBase`2.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridAjaxSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.GridBindingSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridAjaxSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridAjaxSettingsBuilder.Enabled(System.Boolean)">
            <summary>
            Enables or disables Ajax binding.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Ajax(ajax => ajax.Enabled((bool)ViewData["enableAjax"]))
            %&gt;
            </code>
            </example>
            <remarks>
            The Enabled method is useful when you need to enable ajax based on certain conditions.
            </remarks>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1">
            <summary>
            Defines the fluent interface for configuring bound columns
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1.#ctor(Telerik.Web.Mvc.UI.IGridBoundColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1"/> class.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1.Format(System.String)">
            <summary>
            Gets or sets the format for displaying the data.
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Columns(columns => columns.Bound(o => o.OrderDate).Format("{0:dd/MM/yyyy}"))
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1.EditorViewData(System.Object)">
            <summary>
            Provides additional view data in the editor template for that column (if any).
            </summary>
            <remarks>
            The additional view data will be provided if the editing mode is set to in-line or in-cell. Otherwise
            use <see cref="M:Telerik.Web.Mvc.UI.Fluent.GridEditingSettingsBuilder`1.AdditionalViewData(System.Object)"/> 
            </remarks>
            <param name="additionalViewData">An anonymous object which contains the additional data</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Columns(columns =&gt; {
                            columns.Bound(o =&gt; o.Customer).EditorViewData(new { customers = Model.Customers });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1.ReadOnly(System.Boolean)">
            <summary>
            Makes the column read-only or not. By default bound columns are not read-only.
            </summary>
            <remarks>
            If a column is read-only it cannot be modified during editing.
            </remarks>
            <param name="value"><c>true</c> if the column should be read-only;otherwise <c>false</c></param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Columns(columns => columns.Bound(o => o.OrderDate).ReadOnly(true))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1.ReadOnly">
            <summary>
            Makes the column read-only.
            </summary>
            <remarks>
            If a column is read-only it cannot be modified during editing.
            </remarks>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Columns(columns => columns.Bound(o => o.OrderDate).ReadOnly())
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1.EditorTemplateName(System.String)">
            <summary>
            Specify which editor template should be used for the column
            </summary>
            <param name="templateName">name of the editor template</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1.Sortable(System.Boolean)">
            <summary>
            Enables or disables sorting the column. All bound columns are sortable by default.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Columns(columns => columns.Bound(o => o.OrderDate).Sortable(false))
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1.Groupable(System.Boolean)">
            <summary>
            Enables or disables grouping by that column. All bound columns are groupable by default.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Columns(columns => columns.Bound(o => o.OrderDate).Groupable(false))
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1.Filterable(System.Boolean)">
            <summary>
            Enables or disables filtering the column. All bound columns are filterable by default.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Columns(columns => columns.Bound(o => o.OrderDate).Filterable(false))
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1.Encoded(System.Boolean)">
            <summary>
            Enables or disables HTML encoding the data of the column. All bound columns are encoded by default.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Columns(columns => columns.Bound(o => o.OrderDate).Encoded(false))
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1.Template(System.Action{`0})">
            <summary>
            Sets the template for the column.
            </summary>
            <param name="templateAction">The action defining the template.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .Columns(columns => columns
                                .Add(c => c.CustomerID)
                                .Template(() => 
                                { 
                                    %&gt;
                                     &gt;img 
                                        alt="&lt;%= c.CustomerID %&gt;" 
                                        src="&lt;%= Url.Content("~/Content/Grid/Customers/" + c.CustomerID + ".jpg") %&gt;" 
                                     /&gt;
                                    &lt;% 
                                }).Title("Picture");)
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1.FooterTemplate(System.Action{Telerik.Web.Mvc.UI.GridAggregateResult})">
            <summary>
            Sets the footer template for the column.
            </summary>
            <param name="template">The action defining the template.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1.FooterTemplate(System.Func{Telerik.Web.Mvc.UI.GridAggregateResult,System.Object})">
            <summary>
            Sets the footer template for the column.
            </summary>
            <param name="template">The action defining the template.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1.GroupFooterTemplate(System.Action{Telerik.Web.Mvc.UI.GridAggregateResult})">
            <summary>
            Sets the group footer template for the column.
            </summary>
            <param name="template">The action defining the template.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1.GroupFooterTemplate(System.Func{Telerik.Web.Mvc.UI.GridAggregateResult,System.Object})">
            <summary>
            Sets the group footer template for the column.
            </summary>
            <param name="template">The action defining the template.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1.GroupHeaderTemplate(System.Action{Telerik.Web.Mvc.UI.GridGroupAggregateResult})">
            <summary>
            Sets the group footer template for the column.
            </summary>
            <param name="template">The action defining the template.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBoundColumnBuilder`1.GroupHeaderTemplate(System.Func{Telerik.Web.Mvc.UI.GridGroupAggregateResult,System.Object})">
            <summary>
            Sets the group footer template for the column.
            </summary>
            <param name="template">The action defining the template.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="P:Telerik.Web.Mvc.UI.Grid`1.ClientEvents"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.#ctor(Telerik.Web.Mvc.UI.GridClientEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder"/> class.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnLoad(System.Action)">
            <summary>
            Defines the inline handler of the OnLoad client-side event.
            </summary>
            <param name="onLoadInlineCode">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnLoad(() =>
                       {
                            %&gt;
                            function(e) {
                                //Load handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnLoad(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnLoad client-side event.
            </summary>
            <param name="onLoadInlineCode">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnLoad(
                            @&lt;text&gt;
                            function(e) {
                                //Load handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnLoad(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnLoad client-side event.
            </summary>
            <param name="onLoadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .ClientEvents(events => events.OnLoad("onLoad"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnSubmitChanges(System.Action)">
            <summary>
            Defines the inline handler of the OnSubmitChanges client-side event.
            </summary>
            <param name="onSubmitChangesCodeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnSubmitChanges(() =>
                       {
                            %&gt;
                            function(e) {
                                //handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnSubmitChanges(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnSubmitChanges client-side event.
            </summary>
            <param name="onSubmitChangesInlineCode">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnSubmitChanges(
                            @&lt;text&gt;
                            function(e) {
                                //handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnSubmitChanges(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnSubmitChanges client-side event.
            </summary>
            <param name="onSubmitChangesHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .ClientEvents(events => events.OnSubmitChanges("onSubmitChanges"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnEdit(System.Action)">
            <summary>
            Defines the inline handler of the OnEdit client-side event.
            </summary>
            <param name="onEditInlineCode">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnEdit(() =>
                       {
                            %&gt;
                            function(e) {
                                //edit handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnEdit(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnEdit client-side event.
            </summary>
            <param name="onEditInlineCode">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnEdit(
                            @&lt;text&gt;
                            function(e) {
                                //edit handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnEdit(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnEdit client-side event.
            </summary>
            <param name="onEditHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .ClientEvents(events => events.OnEdit("onEdit"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnSave(System.Action)">
            <summary>
            Defines the inline handler of the OnSave client-side event.
            </summary>
            <param name="onSaveInlineCode">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnSave(() =>
                       {
                            %&gt;
                            function(e) {
                                //edit handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnSave(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnSave client-side event.
            </summary>
            <param name="onSaveInlineCode">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnSave(
                            @&lt;text&gt;
                            function(e) {
                                //edit handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnSave(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnSave client-side event.
            </summary>
            <param name="onSaveHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .ClientEvents(events => events.OnSave("onSave"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnDetailViewExpand(System.Action)">
            <summary>
            Defines the inline handler of the OnDetailViewExpand client-side event.
            </summary>
            <param name="onDetailViewExpandInlineCode">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnDetailViewExpand(() =>
                       {
                            %&gt;
                            function(e) {
                                //edit handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnDetailViewExpand(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnDetailViewExpand client-side event.
            </summary>
            <param name="onDetailViewExpandInlineCode">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnDetailViewExpand(
                            @&lt;text&gt;
                            function(e) {
                                //edit handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnDetailViewExpand(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnDetailViewExpand client-side event.
            </summary>
            <param name="onDetailViewExpandHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .ClientEvents(events => events.OnDetailViewExpand("onDetailViewExpand"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnDetailViewCollapse(System.Action)">
            <summary>
            Defines the inline handler of the OnDetailViewCollapse client-side event.
            </summary>
            <param name="onDetailViewCollapseInlineCode">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnDetailViewCollapse(() =>
                       {
                            %&gt;
                            function(e) {
                                //edit handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnDetailViewCollapse(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnDetailViewCollapse client-side event.
            </summary>
            <param name="onDetailViewCollapseInlineCode">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnDetailViewCollapse(
                            @&lt;text&gt;
                            function(e) {
                                //edit handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnDetailViewCollapse(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnDetailViewCollapse client-side event.
            </summary>
            <param name="onDetailViewCollapseHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .ClientEvents(events => events.OnDetailViewCollapse("onDetailViewCollapse"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnDelete(System.Action)">
            <summary>
            Defines the inline handler of the OnSave client-side event.
            </summary>
            <param name="onDeleteInlineCode">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnSave(() =>
                       {
                            %&gt;
                            function(e) {
                                //edit handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnDelete(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnSave client-side event.
            </summary>
            <param name="onDeleteInlineCode">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnSave(
                            @&lt;text&gt;
                            function(e) {
                                //edit handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnDelete(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnDelete client-side event.
            </summary>
            <param name="onDeleteHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .ClientEvents(events => events.OnSave("onDelete"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnColumnResize(System.Action)">
            <summary>
            Defines the inline handler of the OnColumnResize client-side event.
            </summary>
            <param name="onColumnResizeInlineCode">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnColumnResize(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnColumnResize(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnColumnResize client-side event.
            </summary>
            <param name="onColumnResizeInlineCode">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnColumnResize(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnColumnResize(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnColumnResize client-side event.
            </summary>
            <param name="onColumnResizeHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .ClientEvents(events => events.OnColumnResize("onColumnResize"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnColumnReorder(System.Action)">
            <summary>
            Defines the inline handler of the OnColumnReorder client-side event.
            </summary>
            <param name="onColumnReorderInlineCode">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnColumnReorder(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnColumnReorder(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnColumnReorder client-side event.
            </summary>
            <param name="onColumnReorderInlineCode">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnColumnReorder(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnColumnReorder(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnColumnResize client-side event.
            </summary>
            <param name="onColumnReorderHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .ClientEvents(events => events.OnColumnReorder("onColumnReorder"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnRowSelect(System.Action)">
            <summary>
            Defines the inline handler of the OnRowSelect client-side event.
            </summary>
            <param name="onLoadAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnRowSelect(() =>
                       {
                            %&gt;
                            function(e) {
                                //Error handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnRowSelect(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnRowSelect client-side event.
            </summary>
            <param name="onLoadAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnRowSelect(
                            @&lt;text&gt;
                            function(e) {
                                //Error handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnRowSelect(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnRowSelect client-side event.
            </summary>
            <param name="onRowSelectHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .ClientEvents(events => events.OnRowSelect("onRowSelect"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnError(System.Action)">
            <summary>
            Defines the inline handler of the OnError client-side event.
            </summary>
            <param name="onErrorInlineCode">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnError(() =>
                       {
                            %&gt;
                            function(e) {
                                //Error handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnError(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnError client-side event.
            </summary>
            <param name="onErrorInlineCode">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnError(
                            @&lt;text&gt;
                            function(e) {
                                //Error handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnError(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnError client-side event.
            </summary>
            <param name="onErrorHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .ClientEvents(events => events.OnError("onError"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnDataBound(System.Action)">
            <summary>
            Defines the inline error handler of the OnDataBound client-side event.
            </summary>
            <param name="onDataBoundInlineCode">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnDataBound(() =>
                       {
                            %&gt;
                            function(e) {
                                //data bound handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnDataBound(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline error handler of the OnDataBound client-side event.
            </summary>
            <param name="onDataBoundInlineCode">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnDataBound(
                            @&lt;text&gt;
                            function(e) {
                                //data bound handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnDataBound(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnDataBound client-side event.
            </summary>
            <param name="onDataBoundHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .ClientEvents(events => events.OnDataBound("onDataBound"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnDataBinding(System.Action)">
            <summary>
            Defines the inline error handler of the OnDataBinding client-side event.
            </summary>
            <param name="onDataBindingInlineCode">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnDataBinding(() =>
                       {
                            %&gt;
                            function(e) {
                                //data binding handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnDataBinding(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline error handler of the OnDataBinding client-side event.
            </summary>
            <param name="onDataBindingInlineCode">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnDataBinding(
                            @&lt;text&gt;
                            function(e) {
                                //data binding handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnDataBinding(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnDataBinding client-side event.
            </summary>
            <param name="onDataBindingHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .ClientEvents(events => events.OnDataBinding("onDataBinding"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnRowDataBound(System.Action)">
            <summary>
            Defines the inline error handler of the OnRowDataBound client-side event.
            </summary>
            <param name="onRowDataBoundInlineCode">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnRowDataBound(() =>
                       {
                            %&gt;
                            function(e) {
                                var row = e.row;
                                var dataItem = e.dataItem;
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnRowDataBound(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline error handler of the OnRowDataBound client-side event.
            </summary>
            <param name="onRowDataBoundInlineCode">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid(Model)
                       .Name("Grid")
                       .ClientEvents(events => events.OnRowDataBound(
                            @&lt;text&gt;
                            function(e) {
                                var row = e.row;
                                var dataItem = e.dataItem;
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder.OnRowDataBound(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnRowDataBound client-side event.
            </summary>
            <param name="onRowDataBoundHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .ClientEvents(events => events.OnRowDataBound("onRowDataBound"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridActionColumnBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridActionColumnBuilder"/> component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridActionColumnBuilder.#ctor(Telerik.Web.Mvc.UI.IGridColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridActionColumnBuilder"/> class.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridActionCommandFactory`1">
            <summary>
            Creates command for the <see cref="T:Telerik.Web.Mvc.UI.Grid`1"/>.
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridActionCommandFactory`1.#ctor(Telerik.Web.Mvc.UI.GridActionColumn{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridActionCommandFactory`1"/> class.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridActionCommandFactory`1.Edit">
            <summary>
            Defines a edit command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridActionCommandFactory`1.Delete">
            <summary>
            Defines a delete command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridActionCommandFactory`1.Select">
            <summary>
            Defines a select command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridActionCommandFactory`1.Custom(System.String)">
            <summary>
            Defines a custom command.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridFilteringSettingsBuilder`1">
            <summary>
            Defines the fluent interface for configuring <see cref="P:Telerik.Web.Mvc.UI.Grid`1.Filtering"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridFilteringSettingsBuilder`1.#ctor(Telerik.Web.Mvc.UI.GridFilteringSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.GridFilteringSettings"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridFilteringSettingsBuilder`1.Enabled(System.Boolean)">
            <summary>
            Enables or disables filtering
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Filterable(filtering => filtering.Enabled((bool)ViewData["enableFiltering"]))
            %&gt;
            </code>
            </example>
            <remarks>
            The Enabled method is useful when you need to enable filtering based on certain conditions.
            </remarks>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridScrollSettingsBuilder">
            <summary>
            Defines the fluent interface for configuring <see cref="P:Telerik.Web.Mvc.UI.Grid`1.Scrolling"/>
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridScrollSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.GridScrollingSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridScrollSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridScrollSettingsBuilder.Enabled(System.Boolean)">
            <summary>
            Enables or disables scrolling.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Scrolling(scrolling => scrolling.Enabled((bool)ViewData["enableScrolling"]))
            %&gt;
            </code>
            </example>
            <remarks>
            The Enabled method is useful when you need to enable scrolling based on certain conditions.
            </remarks>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridScrollSettingsBuilder.Height(System.Int32)">
            <summary>
            Sets the height of the scrollable area in pixels.
            </summary>
            <param name="pixelHeight">The height in pixels.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Scrolling(scrolling => scrolling.Height(400))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridScrollSettingsBuilder.Height(System.String)">
            <summary>
            Sets the height of the scrollable.
            </summary>
            <param name="value">The height in pixels.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Scrolling(scrolling => scrolling.Height("20em"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridRequestSettingsBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="!:Grid&lt;T&gt;.ServerBinding"/>
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridRequestSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.RequestSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridRequestSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.GridPagerStyles.Status">
            <summary>The pager will display only a status message</summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.GridPagerStyles.NextPrevious">
            <summary>The pager will display first/previous/next/last links</summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.GridPagerStyles.Numeric">
            <summary>The pager will display page numbers as link buttons.</summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.GridPagerStyles.PageInput">
            <summary>The pager will display an input field and the total number of pages.</summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.GridPagerStyles.PageSizeDropDown">
            <summary>The pager will display a dropdown and the total number of pages.</summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.GridPagerStyles.NextPreviousAndNumeric">
            <summary>(first) (previous) (page numbers) (next) (last)</summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.GridPagerStyles.NextPreviousAndInput">
            <summary>(first) (previous) (page input field) (next) (last)</summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.GridPagerStyles.NextPreviousAndDropDown">
            <summary>(first) (previous) (page size drop down) (next) (last)</summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridSelectionSettingsBuilder">
            <summary>
             Defines the fluent interface for configuring <see cref="P:Telerik.Web.Mvc.UI.Grid`1.Selection"/>
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridSelectionSettingsBuilder.Enabled(System.Boolean)">
            <summary>
            Enables or disables selection.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Selectable(selection => selection.Enabled((bool)ViewData["enableSelection"]))
            %&gt;
            </code>
            </example>
            <remarks>
            The Enabled method is useful when you need to enable scrolling based on certain conditions.
            </remarks>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridSortSettingsBuilder`1">
            <summary>
            Defines the fluent interface for configuring the <see cref="P:Telerik.Web.Mvc.UI.Grid`1.Sorting"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridSortSettingsBuilder`1.#ctor(Telerik.Web.Mvc.UI.GridSortSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridSortSettingsBuilder`1"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridSortSettingsBuilder`1.Enabled(System.Boolean)">
            <summary>
            Enables or disables sorting.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Sorting(sorting => sorting.Enabled((bool)ViewData["enableSorting"]))
            %&gt;
            </code>
            </example>
            <remarks>
            The Enabled method is useful when you need to enable sorting based on certain conditions.
            </remarks>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridSortSettingsBuilder`1.SortMode(Telerik.Web.Mvc.UI.GridSortMode)">
            <summary>
            Sets the sort mode of the grid.
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Sorting(sorting => sorting.SortMode(GridSortMode.MultipleColumns))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridSortSettingsBuilder`1.OrderBy(System.Action{Telerik.Web.Mvc.UI.Fluent.GridSortDescriptorFactory{`0}})">
            <summary>
            Configures the initial sort order.
            </summary>
            <param name="configurator">The configurator.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridWebServiceSettingsBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="P:Telerik.Web.Mvc.UI.Grid`1.WebService"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridWebServiceSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.GridBindingSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridWebServiceSettingsBuilder"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridWebServiceSettingsBuilder.Url(System.String)">
            <summary>
            Sets the url of the web service which the <see cref="!:Grid"/> will request for data.
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .WebService(webService =&gt; webService.Url("~/Models/Orders.asmx/GetOrders")))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridWebServiceSettingsBuilder.Enabled(System.Boolean)">
            <summary>
            Enables or disables web service binding.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .WebService(webService => webService.Enabled((bool)ViewData["enableWebServiceBinding"]))
            %&gt;
            </code>
            </example>
            <remarks>
            The Enabled method is useful when you need to enable web service binding based on certain conditions.
            </remarks>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.AnimationDuration">
            <summary>
            Specifies the animation duration of item.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.AnimationDuration.Fast">
            <summary>
            Fast animation, duration is set to 200.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.AnimationDuration.Normal">
            <summary>
            Normal animation, duration is set to 400.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.AnimationDuration.Slow">
            <summary>
            Slow animation, duration is set to 600.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.AnimationDurationConverter">
            <summary>
            Helper class to convert jQuery Animation Duration.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.AnimationDurationConverter.ToString(System.Int32)">
            <summary>
            Converts specified duration in jQuery equivalent value.
            </summary>
            <param name="duration">The duration.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IClientSideObjectWriter">
            <summary>
            Defines the basic building block of creating client side object.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.Start">
            <summary>
            Starts writing this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.Append(System.String)">
            <summary>
            Appends the specified key value pair to the end of this instance.
            </summary>
            <param name="keyValuePair">The key value pair.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.Append(System.String,System.String)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.AppendNullableString(System.String,System.String)">
            <summary>
            Appends the specified name and nullable value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.Append(System.String,System.Int32)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.Append(System.String,System.Int32,System.Int32)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.Append(System.String,System.Nullable{System.Int32})">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.Append(System.String,System.Double)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.Append(System.String,System.Nullable{System.Double})">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.Append(System.String,System.Decimal)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.Append(System.String,System.Nullable{System.Decimal})">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.Append(System.String,System.Boolean)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.Append(System.String,System.Boolean,System.Boolean)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">if set to <c>true</c> [value].</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.AppendDateOnly(System.String,System.DateTime)">
            <summary>
            Appends the specified name and only the date of the passed <seealso cref="T:System.DateTime"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.AppendDateOnly(System.String,System.Nullable{System.DateTime})" -->
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.AppendDatesOnly(System.String,System.Collections.Generic.IEnumerable{System.DateTime})" -->
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.Append(System.String,System.DateTime)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.Append(System.String,System.Nullable{System.DateTime})">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.Append(System.String,System.Action)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.Append(System.String,System.Func{System.Object,System.Object})">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.Append(System.String,Telerik.Web.Mvc.UI.HtmlTemplate)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="values">The HtmlTemplate.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.AppendObject(System.String,System.Object)">
            <summary>
            Appends the object.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.AppendClientEvent(System.String,Telerik.Web.Mvc.UI.ClientEvent)">
            <summary>
            Appends the specified name and Action or String specified in the ClientEvent object.
            </summary>
            <param name="name">The name.</param>
            <param name="event">Client event of the component.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.Append``1(System.String,``0,``0)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriter.Complete">
            <summary>
            Completes this instance.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IClientSideObjectWriterFactory">
            <summary>
            Defines the factory to create <see cref="T:Telerik.Web.Mvc.UI.IClientSideObjectWriter"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IClientSideObjectWriterFactory.Create(System.String,System.String,System.IO.TextWriter)">
            <summary>
            Creates a writer.
            </summary>
            <param name="id">The id.</param>
            <param name="type">The type.</param>
            <param name="textWriter">The text writer.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.GridSortMode">
            <summary>
            Defines the sort modes supported by <see cref="T:Telerik.Web.Mvc.UI.Grid`1"/>
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.GridSortMode.SingleColumn">
            <summary>
            The user can sort only by one column at the same time.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.GridSortMode.MultipleColumn">
            <summary>
            The user can sort by more than one column at the same time.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Telerik.Web.Mvc.UI.Grid`1" -->
        <member name="M:Telerik.Web.Mvc.UI.Grid`1.#ctor(System.Web.Mvc.ViewContext,Telerik.Web.Mvc.UI.IClientSideObjectWriterFactory,Telerik.Web.Mvc.IUrlGenerator,Telerik.Web.Mvc.Infrastructure.ILocalizationService,Telerik.Web.Mvc.UI.Html.IGridHtmlBuilderFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Grid`1"/> class.
            </summary>
            <param name="viewContext">The view context.</param>
            <param name="clientSideObjectWriterFactory">The client side object writer factory.</param>
            <param name="urlGenerator">The URL generator.</param>
            <param name="builderFactory">The builder factory.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Grid`1.Selection">
            <summary>
            Gets the selection configuration
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Grid`1.RowTemplate">
            <summary>
            Gets the template which the grid will use to render a row
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Grid`1.ClientEvents">
            <summary>
            Gets the client events of the grid.
            </summary>
            <value>The client events.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Grid`1.Filtering">
            <summary>
            Gets the filtering configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Grid`1.WebService">
            <summary>
            Gets the web service configuration
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Grid`1.Server">
            <summary>
            Gets the server binding configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Grid`1.Scrolling">
            <summary>
            Gets the scrolling configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Grid`1.KeyboardNavigation">
            <summary>
            Gets the keyboard navigation configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Grid`1.ColumnContextMenu">
            <summary>
            Gets the column context menu configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Grid`1.Ajax">
            <summary>
            Gets the ajax configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Grid`1.EnableCustomBinding">
            <summary>
            Gets or sets a value indicating whether custom binding is enabled.
            </summary>
            <value><c>true</c> if custom binding is enabled; otherwise, <c>false</c>. The default value is <c>false</c></value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Grid`1.Paging">
            <summary>
            Gets the paging configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Grid`1.Columns">
            <summary>
            Gets the columns of the grid.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Grid`1.DataSource">
            <summary>
            Gets or sets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Grid`1.PageSize">
            <summary>
            Gets the page size of the grid.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Grid`1.Sorting">
            <summary>
            Gets the sorting configuration.
            </summary>
            <value>The sorting.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Grid`1.PrefixUrlParameters">
            <summary>
            Gets or sets a value indicating whether to add the <see cref="!:Name"/> property of the grid as a prefix in url parameters.
            </summary>
            <value><c>true</c> if prefixing is enabled; otherwise, <c>false</c>. The default value is <c>true</c></value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Grid`1.RowAction">
            <summary>
            Gets or sets the action executed when rendering a row.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Grid`1.CellAction">
            <summary>
            Gets or sets the action executed when rendering a cell.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.Grid`1"/> component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.#ctor(Telerik.Web.Mvc.UI.Grid{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1"/> class.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.RowTemplate(System.Action{`0,Telerik.Web.Mvc.UI.Grid{`0}})">
            <summary>
            Sets the row template of the grid
            </summary>
            <param name="codeBlockTemplate">The template</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                .RowTemplate(o =>
                {
                   %&gt;
                      &lt;%= o.Name %&gt;
                      &lt;%= o.Age %&gt;
                   &lt;%
                })
             %&gt;
            </code> 
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.RowTemplate(System.Action{`0})">
            <summary>
            Sets the row template of the grid
            </summary>
            <param name="codeBlockTemplate">The template</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                .RowTemplate(o =>
                {
                   %&gt;
                      &lt;%= o.Name %&gt;
                      &lt;%= o.Age %&gt;
                   &lt;%
                })
             %&gt;
            </code> 
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.RowTemplate(System.Func{`0,System.Object})">
            <summary>
            Sets the row template of the grid using Razor syntax
            </summary>
            <param name="inlineTemplate">The template</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                .RowTemplate(@&lt;text&gt;
                      @item.Name
                      @item.Age
                &lt;/text&gt;)
             %&gt;
            </code> 
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.Resizable(System.Action{Telerik.Web.Mvc.UI.Fluent.GridResizingSettingsBuilder})">
            <summary>
            Configures the grid resizing settings
            </summary>
            <param name="configurator">Resizing settings configurator method</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Resizable(resizing => resizing.Columns(true))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.Reorderable(System.Action{Telerik.Web.Mvc.UI.Fluent.GridReorderingSettingsBuilder})">
            <summary>
            Configures the grid reordering settings
            </summary>
            <param name="configurator">Resizing settings configurator method</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Reorderable(reordering => reordering.Columns(true))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.Localizable(System.String)">
            <summary>
            Sets the localization culture of the grid.
            </summary>
            <param name="culture">The culture.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid&lt;Order&gt;()
                        .Name("Orders")
                        .Localizable("de-DE")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.Editable(System.Action{Telerik.Web.Mvc.UI.Fluent.GridEditingSettingsBuilder{`0}})">
            <summary>
            Configures the grid editing settings.
            </summary>
            <param name="configurator">Configurator for the edit settings.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid&lt;Order&gt;()
                        .Name("Orders")
                        .Editable(settings => settings.Enabled(true))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.ToolBar(System.Action{Telerik.Web.Mvc.UI.Fluent.GridToolBarCommandFactory{`0}})">
            <summary>
            Configures the toolbar of the grid.
            </summary>
            <param name="configurator">ToolBar configurator.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid&lt;Order&gt;()
                        .Name("Orders")
                        .ToolBar(commands => commands.Insert())
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.DataKeys(System.Action{Telerik.Web.Mvc.UI.Fluent.GridDataKeyFactory{`0}})">
            <summary>
            Defines a list of the private keys.
            </summary>
            <param name="configurator">DataKeys configurator.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid&lt;Order&gt;()
                        .Name("Orders")
                        .DataKeys(keys =>
                        {
                            keys.Add(c => c.CustomerID);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.Footer(System.Boolean)">
            <summary>
            Configure when to show footer of the grid.
            </summary>
            <param name="visible">If it is true, the feature is visible.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.BindTo(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Binds the grid to a list of objects
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
            <param name="dataSource">The data source.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid&lt;Order&gt;()
                        .Name("Orders")
                        .Ajax(ajax => ajax.Action("_RelatedGrids_Orders", "Grid", new { customerID = "ALFKI" }))
                        .Columns(columns=>
                        {
                            columns.Add(c => c.OrderID).Width(100);
                            columns.Add(c => c.OrderDate).Width(200).Format("{0:dd/MM/yyyy}");
                            columns.Add(c => c.ShipAddress);
                            columns.Add(c => c.ShipCity).Width(200);
                        })
                        .BindTo((IEnumerable&lt;Order&gt;)ViewData["Orders"]);
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.RowAction(System.Action{Telerik.Web.Mvc.UI.GridRow{`0}})">
            <summary>
            Callback for each row.
            </summary>
            <param name="configurator">Action, which will be executed for each row.
            You can format the entire row</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .RowAction(row =>
                        {
                            // "DataItem" is the Order object to which the current row is bound to
                            if (row.DataItem.Freight > 10)
                            {
                                //Set the background of the entire row
                                row.HtmlAttributes["style"] = "background:red;";
                            }
                        });
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.CellAction(System.Action{Telerik.Web.Mvc.UI.GridCell{`0}})">
            <summary>
            Callback for each cell.
            </summary>
            <param name="configurator">Action, which will be executed for each cell.
            You can format a concrete cell.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .CellAction(cell =>
                        {
                           if (cell.Column.Name == "Freight")
                           {
                               if (cell.DataItem.Freight > 10)
                               {
                                   //Set the background of this cell only
                                   cell.HtmlAttributes["style"] = "background:red;";
                               }
                           }
                        });
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.EnableCustomBinding(System.Boolean)">
            <summary>
            Enables or disables the custom binding of the grid.
            </summary>
            <param name="value">If true enables custom binding.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.Columns(System.Action{Telerik.Web.Mvc.UI.Fluent.GridColumnFactory{`0}})">
            <summary>
            Defines the columns of the grid.
            </summary>
            <param name="configurator">The add action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action("_RelatedGrids_Orders", "Grid", new { customerID = "ALFKI" }))
                        .Columns(columns=>
                        {
                            columns.Add(c => c.OrderID).Width(100);
                            columns.Add(c => c.OrderDate).Width(200).Format("{0:dd/MM/yyyy}");
                            columns.Add(c => c.ShipAddress);
                            columns.Add(c => c.ShipCity).Width(200);
                        })
                        .BindTo((IEnumerable&lt;Order&gt;)ViewData["Orders"]);
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.Sortable">
            <summary>
            Allows sorting of the columns.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action("_RelatedGrids_Orders", "Grid", new { customerID = "ALFKI" }))
                        .Columns(columns=>
                        {
                            columns.Add(c => c.OrderID).Width(100);
                            columns.Add(c => c.OrderDate).Width(200).Format("{0:dd/MM/yyyy}");
                            columns.Add(c => c.ShipAddress);
                            columns.Add(c => c.ShipCity).Width(200);
                        })
                        .BindTo((IEnumerable&lt;Order&gt;)ViewData["Orders"])
                        .Sortable();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.Sortable(System.Action{Telerik.Web.Mvc.UI.Fluent.GridSortSettingsBuilder{`0}})">
            <summary>
            Allows sorting of the columns.
            </summary>
            <param name="configurator">Use builder to define sort settings.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action("_RelatedGrids_Orders", "Grid", new { customerID = "ALFKI" }))
                        .Columns(columns=>
                        {
                            columns.Add(c => c.OrderID).Width(100);
                            columns.Add(c => c.OrderDate).Width(200).Format("{0:dd/MM/yyyy}");
                            columns.Add(c => c.ShipAddress);
                            columns.Add(c => c.ShipCity).Width(200);
                        })
                        .BindTo((IEnumerable&lt;Order&gt;)ViewData["Orders"])
                        .Sortable(sorting => sorting.SortMode(GridSortMode.MultipleColumn)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.Selectable">
            <summary>
            Enables row selection.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .Selectable()
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.Selectable(System.Action{Telerik.Web.Mvc.UI.Fluent.GridSelectionSettingsBuilder})">
            <summary>
            Enables row selection.
            </summary>
            <param name="selectionAction">Use builder to define the selection settings.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .Selectable(selection => selection.Enabled(true))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.PrefixUrlParameters(System.Boolean)">
            <summary>
            Put grid name as a prefix.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.Pageable">
            <summary>
            Allows paging of the data.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action("_RelatedGrids_Orders", "Grid", new { customerID = "ALFKI" }))
                        .Columns(columns=>
                        {
                            columns.Add(c => c.OrderID).Width(100);
                            columns.Add(c => c.OrderDate).Width(200).Format("{0:dd/MM/yyyy}");
                            columns.Add(c => c.ShipAddress);
                            columns.Add(c => c.ShipCity).Width(200);
                        })
                        .BindTo((IEnumerable&lt;Order&gt;)ViewData["Orders"])
                        .Pageable();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.Pageable(System.Action{Telerik.Web.Mvc.UI.Fluent.GridPagerSettingsBuilder})">
            <summary>
            Allows paging of the data.
            </summary>
            <param name="pagerAction">Use builder to define paging settings.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action("_RelatedGrids_Orders", "Grid", new { customerID = "ALFKI" }))
                        .Columns(columns=>
                        {
                            columns.Add(c => c.OrderID).Width(100);
                            columns.Add(c => c.OrderDate).Width(200).Format("{0:dd/MM/yyyy}");
                            columns.Add(c => c.ShipAddress);
                            columns.Add(c => c.ShipCity).Width(200);
                        })
                        .BindTo((IEnumerable&lt;Order&gt;)ViewData["Orders"])
                        .Pageable(paging =>
                                   paging.PageSize(20)
                                         .Style(GridPagerStyles.NextPreviousAndNumeric)
                                         .Position(GridPagerPosition.Bottom)
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.ServerBinding(System.Action{Telerik.Web.Mvc.UI.Fluent.GridRequestSettingsBuilder})">
            <summary>
            Use it to configure Server binding.
            </summary>
            <param name="operationSettingsAction">Use builder to set different server binding settings.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .ServerBinding(serverBinding => serverBinding
                            .Action("Index", "Home", new {id = (string)ViewData["id"]})
                        )
                        .Pagealbe()
                        .Sortable();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.DataBinding(System.Action{Telerik.Web.Mvc.UI.Fluent.GridDataBindingConfigurationBuilder})">
            <summary>
            Use it to configure binding option when performing data operations - paging, sorting and filtering.
            </summary>
            <param name="configurator">Use builder to set different data binding options.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .DataBinding(dataBinding =>
                        {
                            dataBinding.Server().Select("FirstLook", "Grid"});
                            dataBinding.Ajax().Select("_FirstLook", "Grid").Enabled((bool)ViewData["ajax"]);
                        })
                        .Pagealbe()
                        .Sortable();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.Ajax(System.Action{Telerik.Web.Mvc.UI.Fluent.GridAjaxSettingsBuilder})">
            <summary>
            Use it to configure Ajax binding.
            </summary>
            <param name="configurator">Use builder to set different ajax binding settings.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action("_AjaxBinding", "Home"))
                        .Pagealbe()
                        .Sortable();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.Filterable">
            <summary>
            Allows filtering of the columns.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action("_RelatedGrids_Orders", "Grid", new { customerID = "ALFKI" }))
                        .Columns(columns=>
                        {
                            columns.Add(c => c.OrderID).Width(100);
                            columns.Add(c => c.OrderDate).Width(200).Format("{0:dd/MM/yyyy}");
                            columns.Add(c => c.ShipAddress);
                            columns.Add(c => c.ShipCity).Width(200);
                        })
                        .BindTo((IEnumerable&lt;Order&gt;)ViewData["Orders"])
                        .Filterable();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.Filterable(System.Action{Telerik.Web.Mvc.UI.Fluent.GridFilteringSettingsBuilder{`0}})">
            <summary>
            Allows filtering of the columns.
            </summary>
            <param name="configurator">Use builder to define filtering settings.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action("_RelatedGrids_Orders", "Grid", new { customerID = "ALFKI" }))
                        .Columns(columns=>
                        {
                            columns.Add(c => c.OrderID).Width(100);
                            columns.Add(c => c.OrderDate).Width(200).Format("{0:dd/MM/yyyy}");
                            columns.Add(c => c.ShipAddress);
                            columns.Add(c => c.ShipCity).Width(200);
                        })
                        .BindTo((IEnumerable&lt;Order&gt;)ViewData["Orders"])
                        .Filterable(filtering => filtering.Enabled(true);
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.Scrollable">
            <summary>
            Show scrollbar if there are many items.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action("_RelatedGrids_Orders", "Grid", new { customerID = "ALFKI" }))
                        .Columns(columns=>
                        {
                            columns.Add(c => c.OrderID).Width(100);
                            columns.Add(c => c.OrderDate).Width(200).Format("{0:dd/MM/yyyy}");
                            columns.Add(c => c.ShipAddress);
                            columns.Add(c => c.ShipCity).Width(200);
                        })
                        .BindTo((IEnumerable&lt;Order&gt;)ViewData["Orders"])
                        .Scrollable();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.Scrollable(System.Action{Telerik.Web.Mvc.UI.Fluent.GridScrollSettingsBuilder})">
            <summary>
            Show scrollbar if there are many items.
            </summary>
            <param name="configurator">Use builder to define scrolling settings.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action("_RelatedGrids_Orders", "Grid", new { customerID = "ALFKI" }))
                        .Columns(columns=>
                        {
                            columns.Add(c => c.OrderID).Width(100);
                            columns.Add(c => c.OrderDate).Width(200).Format("{0:dd/MM/yyyy}");
                            columns.Add(c => c.ShipAddress);
                            columns.Add(c => c.ShipCity).Width(200);
                        })
                        .BindTo((IEnumerable&lt;Order&gt;)ViewData["Orders"])
                        .Scrollable(scrolling => scrolling.Enabled(true);
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.KeyboardNavigation">
            <summary>
            Enables keyboard navigation.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action("_RelatedGrids_Orders", "Grid", new { customerID = "ALFKI" }))
                        .Columns(columns=>
                        {
                            columns.Add(c => c.OrderID).Width(100);
                            columns.Add(c => c.OrderDate).Width(200).Format("{0:dd/MM/yyyy}");
                            columns.Add(c => c.ShipAddress);
                            columns.Add(c => c.ShipCity).Width(200);
                        })
                        .BindTo((IEnumerable&lt;Order&gt;)ViewData["Orders"])
                        .KeyboardNavigation();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.KeyboardNavigation(System.Action{Telerik.Web.Mvc.UI.Fluent.GridKeyboardNavigationSettingsBuilder})">
            <summary>
            Enables keyboard navigation.
            </summary>
            <param name="configurator">Use builder to define keyboard navigation settings.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action("_RelatedGrids_Orders", "Grid", new { customerID = "ALFKI" }))
                        .Columns(columns=>
                        {
                            columns.Add(c => c.OrderID).Width(100);
                            columns.Add(c => c.OrderDate).Width(200).Format("{0:dd/MM/yyyy}");
                            columns.Add(c => c.ShipAddress);
                            columns.Add(c => c.ShipCity).Width(200);
                        })
                        .BindTo((IEnumerable&lt;Order&gt;)ViewData["Orders"])
                        .KeyboardNavigation(navigation => navigation.Enabled(true));
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.ColumnContextMenu">
            <summary>
            Enables column context menu.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action("_RelatedGrids_Orders", "Grid", new { customerID = "ALFKI" }))
                        .Columns(columns=>
                        {
                            columns.Add(c => c.OrderID).Width(100);
                            columns.Add(c => c.OrderDate).Width(200).Format("{0:dd/MM/yyyy}");
                            columns.Add(c => c.ShipAddress);
                            columns.Add(c => c.ShipCity).Width(200);
                        })
                        .BindTo((IEnumerable&lt;Order&gt;)ViewData["Orders"])
                        .ColumnContextMenu();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.ColumnContextMenu(System.Action{Telerik.Web.Mvc.UI.Fluent.GridColumnContextMenuSettingsBuilder})">
            <summary>
            Enables column context menu.
            </summary>
            <param name="configurator">Use builder to column context menu settings.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action("_RelatedGrids_Orders", "Grid", new { customerID = "ALFKI" }))
                        .Columns(columns=>
                        {
                            columns.Add(c => c.OrderID).Width(100);
                            columns.Add(c => c.OrderDate).Width(200).Format("{0:dd/MM/yyyy}");
                            columns.Add(c => c.ShipAddress);
                            columns.Add(c => c.ShipCity).Width(200);
                        })
                        .BindTo((IEnumerable&lt;Order&gt;)ViewData["Orders"])
                        .ColumnContextMenu(navigation => navigation.Enabled(true));
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.ClientEvents(System.Action{Telerik.Web.Mvc.UI.Fluent.GridClientEventsBuilder})">
            <summary>
            Configures the client-side events.
            </summary>
            <param name="configurator">The client events action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .ClientEvents(events => events
                            .OnDataBinding("onDataBinding")
                            .OnRowDataBound("onRowDataBound")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.Groupable(System.Action{Telerik.Web.Mvc.UI.Fluent.GridGroupingSettingsBuilder{`0}})">
            <summary>
            Use it to configure grouping.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action("_RelatedGrids_Orders", "Grid", new { customerID = "ALFKI" }))
                        .Columns(columns=>
                        {
                            columns.Add(c => c.OrderID).Width(100);
                            columns.Add(c => c.OrderDate).Width(200).Format("{0:dd/MM/yyyy}");
                            columns.Add(c => c.ShipAddress);
                            columns.Add(c => c.ShipCity).Width(200);
                        })
                        .BindTo((IEnumerable&lt;Order&gt;)ViewData["Orders"])
                        .Groupable(grouping => grouping.Enabled(true);
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.Groupable">
            <summary>
            Allows grouping.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .Ajax(ajax => ajax.Action("_RelatedGrids_Orders", "Grid", new { customerID = "ALFKI" }))
                        .Columns(columns=>
                        {
                            columns.Add(c => c.OrderID).Width(100);
                            columns.Add(c => c.OrderDate).Width(200).Format("{0:dd/MM/yyyy}");
                            columns.Add(c => c.ShipAddress);
                            columns.Add(c => c.ShipCity).Width(200);
                        })
                        .BindTo((IEnumerable&lt;Order&gt;)ViewData["Orders"])
                        .Groupable();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.WebService(System.Action{Telerik.Web.Mvc.UI.Fluent.GridWebServiceSettingsBuilder})">
            <summary>
            Use it to configure web service binding.
            </summary>
            <param name="configurator">Use builder to set different web service binding settings.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .WebService(webService => webService.Url("~/Models/Orders.asmx/GetOrders"))
                        .Columns(columns=>
                        {
                            columns.Add(c => c.OrderID).Width(100);
                            columns.Add(c => c.OrderDate).Width(200).Format("{0:dd/MM/yyyy}");
                            columns.Add(c => c.ShipAddress);
                            columns.Add(c => c.ShipCity).Width(200);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.NoRecordsTemplate(System.Action)">
            <summary>
            Sets the HTML content which the grid should display.
            </summary>
            <param name="value">The action which renders the message when grid has no data.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Grid()
                       .Name("Grid")
                       .NoRecordsTemplate(() => 
                       { 
                          %&gt;
                                &lt;strong&gt; Hello World!!!;/strong&gt;
                          &lt;% 
                       })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.NoRecordsTemplate(System.Func{System.Object,System.Object})">
            <summary>
            Sets the empty message template which will be display if the grid has no data.
            </summary>
            <param name="value">The Razor inline message.</param>
            <example>
            <code lang="CS">
             @(Html.Telerik().Grid()
                       .Name("Grid")
                       .NoRecordsTemplate(@&lt;strong&gt; Hello World!!!&lt;/strong&gt;))
            </code>        
            </example>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridBuilder`1.NoRecordsTemplate(System.String)">
            <summary>
            Sets the empty message template which will be display if the grid has no data.
            </summary>
            <param name="value">The action which renders the message when grid has no data.</param>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid()
                        .Name("Grid")
                        .NoRecordsTemplate("&lt;strong&gt; Hello World!!!&lt;/strong&gt;")
            %&gt;
            </code>        
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridColumnFactory`1">
            <summary>
            Creates columns for the <see cref="T:Telerik.Web.Mvc.UI.Grid`1"/>.
            </summary>
            <typeparam name="TModel">The type of the data item to which the grid is bound to</typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnFactory`1.#ctor(Telerik.Web.Mvc.UI.Grid{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridColumnFactory`1"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnFactory`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Defines a bound column.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnFactory`1.Bound``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Defines a bound column.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnFactory`1.Bound(System.String)">
            <summary>
            Defines a bound column.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnFactory`1.Bound(System.Type,System.String)">
            <summary>
            Defines a bound column.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnFactory`1.ForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Defines a foreign key column.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnFactory`1.ForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Web.Mvc.SelectList)">
            <summary>
            Defines a foreign key column.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnFactory`1.AutoGenerate(System.Boolean)">
            <summary>
            Determines if columns should be automatically generated.
            </summary>
            <param name="shouldGenerate">If true columns should be generated, otherwise false.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnFactory`1.AutoGenerate(System.Action{Telerik.Web.Mvc.UI.GridColumnBase{`0}})">
            <summary>
            Determines if columns should be automatically generated.
            </summary>
            <param name="columnAction">Action which will be executed for each generated column.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnFactory`1.Add(System.Action{`0})">
            <summary>
            Defines a template column.
            </summary>
            <param name="templateAction"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnFactory`1.Template(System.Action{`0})">
            <summary>
            Defines a template column.
            </summary>
            <param name="templateAction"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridColumnFactory`1.Command(System.Action{Telerik.Web.Mvc.UI.Fluent.GridActionCommandFactory{`0}})">
            <summary>
            Defines a command column.
            </summary>
            <param name="commandAction"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.GridActionAttribute">
            <summary>
            Used for action methods when using Ajax or Custom binding
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.GridActionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.GridActionAttribute"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.GridActionAttribute.ActionParameterName">
            <summary>
            Gets or sets the name of the action parameter. The default value is "command".
            </summary>
            <value>The name of the action parameter.</value>
            <example>
            <code lang="CS">
            [GridAction(ActionParameterName="param")]
            public ActionResult Index(GridCommand param)
            {
            }
            </code>
            </example>
        </member>
        <member name="P:Telerik.Web.Mvc.GridActionAttribute.GridName">
            <summary>
            Gets or sets the name of the Grid that is populated by the associated action method. Required
            when custom server binding is enabled and the grid query string parameters are prefixed.
            </summary>
            <example>
            <code lang="CS">
            [GridAction(EnableCustomBinding=true, GridName="Employees")]
            public ActionResult Index(GridCommand param)
            {
            }
            </code>
            </example>
        </member>
        <member name="P:Telerik.Web.Mvc.GridActionAttribute.EnableCustomBinding">
            <summary>
            Gets or sets a value indicating whether custom binding is enabled. Used when implementing custom ajax binding.
            </summary>
            <value><c>true</c> if custom binding is enabled; otherwise, <c>false</c>. The default value is <c>false</c>.</value>
            <example>
            <code lang="CS">
            [GridAction(EnableCustomBinding=true)]
            public ActionResult Index(GridCommand param)
            {
            }
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.GridPagerSettingsBuilder">
            <summary>
            Defines the fluent interface for configuring <see cref="P:Telerik.Web.Mvc.UI.Grid`1.Paging"/>
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridPagerSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.GridPagingSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.GridPagerSettingsBuilder"/> class.
            </summary>
            <param name="pager">The pager.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridPagerSettingsBuilder.Position(Telerik.Web.Mvc.UI.GridPagerPosition)">
            <summary>
            Sets the position at which to display the pager.
            </summary>
            <param name="value">The pager position.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Pageable(paging => paging.Position(GridPagerPosition.Bottom))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridPagerSettingsBuilder.PageSize(System.Int32)">
            <summary>
            Sets the page size of the grid.
            </summary>
            <param name="value">The number of items to display in a single page.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Pageable(paging => paging.PageSize(20))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridPagerSettingsBuilder.PageSize(System.Int32,System.Int32[])">
            <summary>
            Sets the page size of the grid.
            </summary>
            <param name="value">The number of items to display in a single page.</param>
            <param name="sizesInDropDown">The values shown in the pageSize dropdown</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridPagerSettingsBuilder.PageTo(System.Int32)">
            <summary>
            Sets the current page of the grid.
            </summary>
            <param name="page">The page which the grid should display initially. Must be greater than zero.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Pageable(paging => paging.PageTo(2))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridPagerSettingsBuilder.Style(Telerik.Web.Mvc.UI.GridPagerStyles)">
            <summary>
            Sets the pager style.
            </summary>
            <param name="value">The pager style to set.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Pageable(paging => paging.Style(GridPagerStyles.PageInput | GridPagerStyles.Numeric))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridPagerSettingsBuilder.Total(System.Int32)">
            <summary>
            Sets the total number of items in the data source. Required during Custom binding.
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Pageable(paging => paging.Total((int)ViewData["total"]))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridPagerSettingsBuilder.Enabled(System.Boolean)">
            <summary>
            Enables or disables paging.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Pageable(paging => paging.Enabled((bool)ViewData["enablePaging"]))
            %&gt;
            </code>
            </example>
            <remarks>
            The Enabled method is useful when you need to enable paging based on certain conditions.
            </remarks>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.GridPagerSettingsBuilder.PageOnScroll(System.Boolean)">
            <summary>
            Enables or disables paging on scroll.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
                        .Pageable(paging => paging.PageOnScroll((bool)ViewData["pageOnScroll"]))
            %&gt;
            </code>
            </example>
            <remarks>
            The PageOnScroll method is useful when you need to enable paging on scroll based on certain conditions.
            </remarks>
        </member>
        <member name="T:Telerik.Web.Mvc.LinkedObjectCollection`1">
            <summary>
            Defines methods to manipulate generic link object collections.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Telerik.Web.Mvc.LinkedObjectCollection`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.LinkedObjectCollection`1"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.LinkedObjectCollection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.LinkedObjectCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Telerik.Web.Mvc.LinkedObjectCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Telerik.Web.Mvc.LinkedObjectCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Telerik.Web.Mvc.LinkedObjectCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Web.Mvc.LinkedObjectCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Telerik.Web.Mvc.LinkedObjectCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.LinkedObjectCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Telerik.Web.Mvc.LinkedObjectCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="P:Telerik.Web.Mvc.LinkedObjectCollection`1.Parent">
            <summary>
            Gets or sets the T object that is the parent of the current node.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.LinkedObjectCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
        </member>
        <member name="P:Telerik.Web.Mvc.LinkedObjectCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Telerik.Web.Mvc.LinkedObjectCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:T"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.MenuBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.Menu"/> component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuBuilder.#ctor(Telerik.Web.Mvc.UI.Menu)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.MenuBuilder"/> class.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuBuilder.Items(System.Action{Telerik.Web.Mvc.UI.MenuItemFactory})">
            <summary>
            Defines the items in the menu
            </summary>
            <param name="addAction">The add action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items =>
                        {
                            items.Add().Text("First Item");
                            items.Add().Text("Second Item");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuBuilder.ClientEvents(System.Action{Telerik.Web.Mvc.UI.MenuClientEventsBuilder})">
            <summary>
            Configures the client-side events.
            </summary>
            <param name="clientEventsAction">The client events action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .ClientEvents(events =>
                            events.OnOpen("onOpen").OnClose("onClose")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuBuilder.Orientation(Telerik.Web.Mvc.UI.MenuOrientation)">
            <summary>
            Sets the menu orientation.
            </summary>
            <param name="value">The desired orientation.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Orientation(MenuOrientation.Vertical)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuBuilder.OpenOnClick(System.Boolean)">
            <summary>
            Enables or disables the "open-on-click" feature.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .OpenOnClick(true)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuBuilder.BindTo(System.String,System.Action{Telerik.Web.Mvc.UI.MenuItem,Telerik.Web.Mvc.SiteMapNode})">
            <summary>
            Binds the menu to a sitemap
            </summary>
            <param name="viewDataKey">The view data key.</param>
            <param name="siteMapAction">The action to configure the item.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .BindTo("examples", (item, siteMapNode) =>
                        {
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuBuilder.BindTo(System.String)">
            <summary>
            Binds the menu to a sitemap.
            </summary>
            <param name="viewDataKey">The view data key.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .BindTo("examples")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuBuilder.BindTo``1(System.Collections.Generic.IEnumerable{``0},System.Action{Telerik.Web.Mvc.UI.MenuItem,``0})">
            <summary>
            Binds the menu to a list of objects. The menu will be "flat" which means a menu item will be created for 
            every item in the data source.
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
            <param name="dataSource">The data source.</param>
            <param name="itemDataBound">The action executed for every data bound item.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .BindTo(new []{"First", "Second"}, (item, value)
                        {
                           item.Text = value;
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuBuilder.BindTo(System.Collections.IEnumerable,System.Action{Telerik.Web.Mvc.UI.NavigationBindingFactory{Telerik.Web.Mvc.UI.MenuItem}})">
            <summary>
            Binds the menu to a list of objects. The menu will create a hierarchy of items using the specified mappings.
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
            <param name="dataSource">The data source.</param>
            <param name="factoryAction">The action which will configure the mappings</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .BindTo(Model, mapping => mapping
                                .For&lt;Customer&gt;(binding => binding
                                    .Children(c => c.Orders) // The "child" items will be bound to the the "Orders" property
                                    .ItemDataBound((item, c) => item.Text = c.ContactName) // Map "Customer" properties to MenuItem properties
                                )
                                .For&lt;Order&lt;(binding => binding
                                    .Children(o => null) // "Orders" do not have child objects so return "null"
                                    .ItemDataBound((item, o) => item.Text = o.OrderID.ToString()) // Map "Order" properties to MenuItem properties
                                )
                        ) 
            %&gt;
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.MenuBuilder.BindTo(System.Collections.Generic.IEnumerable{Telerik.Web.Mvc.UI.MenuItem})" -->
        <member name="M:Telerik.Web.Mvc.UI.MenuBuilder.Effects(System.Action{Telerik.Web.Mvc.UI.EffectsBuilder})">
            <summary>
            Configures the effects of the menu.
            </summary>
            <param name="effectsAction">The action which configures the effects.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Menu()
                       .Name("Menu")
                       .Effects(fx =>
                       {
            	            fx.Slide()
            		          .Opacity()
            				  .OpenDuration(AnimationDuration.Normal)
            				  .CloseDuration(AnimationDuration.Normal);
                       })
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuBuilder.SelectedIndex(System.Int32)">
            <summary>
            Selects the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items =>
                        {
                            items.Add().Text("First Item");
                            items.Add().Text("Second Item");
                        })
                        .SelectedIndex(1)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuBuilder.ItemAction(System.Action{Telerik.Web.Mvc.UI.MenuItem})">
            <summary>
            Callback for each item.
            </summary>
            <param name="action">Action, which will be executed for each item.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .ItemAction(item =>
                        {
                            item
                                .Text(...)
                                .HtmlAttributes(...);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuBuilder.HighlightPath(System.Boolean)">
            <summary>
            Select item depending on the current URL.
            </summary>
            <param name="value">If true the item will be highlighted.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .HighlightPath(true)
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.MenuItemBuilder">
            <summary>
            Defines the fluent interface for configuring child menu items.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuItemBuilder.#ctor(Telerik.Web.Mvc.UI.MenuItem,System.Web.Mvc.ViewContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.MenuItemBuilder"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuItemBuilder.Items(System.Action{Telerik.Web.Mvc.UI.MenuItemFactory})">
            <summary>
            Configures the child items of a <see cref="T:Telerik.Web.Mvc.UI.MenuItem"/>.
            </summary>
            <param name="addAction">The add action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items =&gt;
                        {
                            items.Add().Text("First Item").Items(firstItemChildren =&gt; 
                            {
                                firstItemChildren.Add().Text("Child Item 1");
                                firstItemChildren.Add().Text("Child Item 2");
                            });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.MenuItemBuilder.Items(System.Collections.Generic.IEnumerable{Telerik.Web.Mvc.UI.MenuItem})" -->
        <member name="T:Telerik.Web.Mvc.UI.MenuOrientation">
            <summary>
            Specifies the orientation in which the menu items will be ordered
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.MenuOrientation.Horizontal">
            <summary>
            Items are oredered horizontally
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.MenuOrientation.Vertical">
            <summary>
            Items are oredered vertically
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.MenuClientEventsBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="P:Telerik.Web.Mvc.UI.Menu.ClientEvents"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuClientEventsBuilder.#ctor(Telerik.Web.Mvc.UI.MenuClientEvents,System.Web.Mvc.ViewContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.MenuClientEventsBuilder"/> class.
            </summary>
            <param name="clientEvents">The client events.</param>
            <param name="viewContext">The view context.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuClientEventsBuilder.OnOpen(System.Action)">
            <summary>
            Defines the inline handler of the OnOpen client-side event
            </summary>
            <param name="onOpenAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Menu()
                       .Name("Menu")
                       .ClientEvents(events => events.OnOpen(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuClientEventsBuilder.OnOpen(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnOpen client-side event
            </summary>
            <param name="onOpenAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Menu()
                       .Name("Menu")
                       .ClientEvents(events => events.OnOpen(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuClientEventsBuilder.OnOpen(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnOpen client-side event.
            </summary>
            <param name="onOpenHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .ClientEvents(events => events.OnOpen("onOpen"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuClientEventsBuilder.OnClose(System.Action)">
            <summary>
            Defines the inline handler of the OnClose client-side event
            </summary>
            <param name="onCloseAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Menu()
                       .Name("Menu")
                       .ClientEvents(events => events.OnClose(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuClientEventsBuilder.OnClose(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnClose client-side event
            </summary>
            <param name="onCloseAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Menu()
                       .Name("Menu")
                       .ClientEvents(events => events.OnClose(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuClientEventsBuilder.OnClose(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnClose client-side event.
            </summary>
            <param name="onCloseHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .ClientEvents(events => events.OnClose("onClose"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuClientEventsBuilder.OnSelect(System.Action)">
            <summary>
            Defines the inline handler of the OnSelect client-side event
            </summary>
            <param name="onSelectAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Menu()
                       .Name("Menu")
                       .ClientEvents(events => events.OnSelect(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuClientEventsBuilder.OnSelect(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnSelect client-side event
            </summary>
            <param name="onSelectAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Menu()
                       .Name("Menu")
                       .ClientEvents(events => events.OnSelect(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuClientEventsBuilder.OnSelect(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnSelect client-side event.
            </summary>
            <param name="onSelectHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .ClientEvents(events => events.OnSelect("onSelect"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuClientEventsBuilder.OnLoad(System.Action)">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onSelectAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Menu()
                       .Name("Menu")
                       .ClientEvents(events => events.OnLoad(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuClientEventsBuilder.OnLoad(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onSelectAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Menu()
                       .Name("Menu")
                       .ClientEvents(events => events.OnLoad(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.MenuClientEventsBuilder.OnLoad(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnSelect client-side event.
            </summary>
            <param name="onLoadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .ClientEvents(events => events.OnLoad("onLoad"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.NavigatableExtensions">
            <summary>
            INavigatable extension for providing access to <see cref="T:Telerik.Web.Mvc.INavigatable"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigatableExtensions.Action(Telerik.Web.Mvc.INavigatable,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller name and route values of <see cref="T:Telerik.Web.Mvc.INavigatable"/> object.
            </summary>
            <param name="navigatable">The <see cref="T:Telerik.Web.Mvc.INavigatable"/> object.</param>
            <param name="routeValues">The route values of the Action method.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigatableExtensions.Action(Telerik.Web.Mvc.INavigatable,System.String,System.String,System.Object)">
            <summary>
            Sets the action and controller name, along with Route values of <see cref="T:Telerik.Web.Mvc.INavigatable"/> object.
            </summary>
            <param name="navigatable">The <see cref="T:Telerik.Web.Mvc.INavigatable"/> object.</param>
            <param name="actionName">Action name.</param>
            <param name="controllerName">Controller name.</param>
            <param name="routeValues">Route values as an object</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigatableExtensions.Action(Telerik.Web.Mvc.INavigatable,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller name and route values of <see cref="T:Telerik.Web.Mvc.INavigatable"/> object.
            </summary>
            <param name="navigatable">The <see cref="T:Telerik.Web.Mvc.INavigatable"/> object.</param>
            <param name="actionName">Action name.</param>
            <param name="controllerName">Controller name.</param>
            <param name="routeValues">Route values as <see cref="T:System.Web.Routing.RouteValueDictionary"/></param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigatableExtensions.Action``1(Telerik.Web.Mvc.INavigatable,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Sets the action and route values of <see cref="T:Telerik.Web.Mvc.INavigatable"/> object.
            </summary>
            <param name="item">The <see cref="T:Telerik.Web.Mvc.INavigatable"/> object.</param>
            <param name="controllerAction">The controller action.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigatableExtensions.Url(Telerik.Web.Mvc.INavigatable,System.String)">
            <summary>
            Sets the url property of <see cref="T:Telerik.Web.Mvc.INavigatable"/> object.
            </summary>
            <param name="navigatable">The <see cref="T:Telerik.Web.Mvc.INavigatable"/> object.</param>
            <param name="actionName">The Url.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigatableExtensions.Route(Telerik.Web.Mvc.INavigatable,System.String,System.Object)">
            <summary>
            Sets the route name and route values of <see cref="T:Telerik.Web.Mvc.INavigatable"/> object.
            </summary>
            <param name="navigatable">The <see cref="T:Telerik.Web.Mvc.INavigatable"/> object.</param>
            <param name="routeName">Route name.</param>
            <param name="routeValues">Route values as an object.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigatableExtensions.Route(Telerik.Web.Mvc.INavigatable,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the route name and route values of <see cref="T:Telerik.Web.Mvc.INavigatable"/> object.
            </summary>
            <param name="navigatable">The <see cref="T:Telerik.Web.Mvc.INavigatable"/> object.</param>
            <param name="routeName">Route name.</param>
            <param name="routeValues">Route values as <see cref="T:System.Web.Routing.RouteValueDictionary"/>.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigatableExtensions.GenerateUrl(Telerik.Web.Mvc.INavigatable,System.Web.Mvc.ViewContext,Telerik.Web.Mvc.IUrlGenerator)">
            <summary>
            Generating url depending on the ViewContext and the <see cref="T:Telerik.Web.Mvc.IUrlGenerator"/> generator.
            </summary>
            <param name="navigatable">The <see cref="T:Telerik.Web.Mvc.INavigatable"/> object.</param>
            <param name="viewContext">The <see cref="T:System.Web.Mvc.ViewContext"/> object</param>
            <param name="urlGenerator">The <see cref="T:Telerik.Web.Mvc.IUrlGenerator"/> generator.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigatableExtensions.IsCurrent(Telerik.Web.Mvc.INavigatable,System.Web.Mvc.ViewContext,Telerik.Web.Mvc.IUrlGenerator)">
            <summary>
            Determines whether the specified navigatable matches the current request URL.
            </summary>
            <param name="navigatable">The <see cref="T:Telerik.Web.Mvc.INavigatable"/> object.</param>
            <param name="viewContext">The <see cref="T:System.Web.Mvc.ViewContext"/> object.</param>
            <param name="urlGenerator">The <see cref="T:Telerik.Web.Mvc.IUrlGenerator"/> generator.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigatableExtensions.GenerateUrl(Telerik.Web.Mvc.INavigatable,System.Web.Mvc.ViewContext,Telerik.Web.Mvc.IUrlGenerator,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Generating url depending on the ViewContext and the <see cref="T:Telerik.Web.Mvc.IUrlGenerator"/> generator.
            </summary>
            <param name="navigatable">The <see cref="T:Telerik.Web.Mvc.INavigatable"/> object.</param>
            <param name="viewContext">The <see cref="T:System.Web.Mvc.ViewContext"/> object</param>
            <param name="urlGenerator">The <see cref="T:Telerik.Web.Mvc.IUrlGenerator"/> generator.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigatableExtensions.IsAccessible(Telerik.Web.Mvc.INavigatable,Telerik.Web.Mvc.Infrastructure.INavigationItemAuthorization,System.Web.Mvc.ViewContext)">
            <summary>
            Verify whether the <see cref="T:Telerik.Web.Mvc.INavigatable"/> object is accessible.
            </summary>
            <param name="item">The <see cref="T:Telerik.Web.Mvc.INavigatable"/> object.</param>
            <param name="authorization">The <see cref="T:Telerik.Web.Mvc.Infrastructure.INavigationItemAuthorization"/> object.</param>
            <param name="viewContext">The <see cref="T:System.Web.Mvc.ViewContext"/> object</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigatableExtensions.IsAccessible``1(System.Collections.Generic.IEnumerable{``0},Telerik.Web.Mvc.Infrastructure.INavigationItemAuthorization,System.Web.Mvc.ViewContext)">
            <summary>
            Verifies whether collection of <see cref="T:Telerik.Web.Mvc.INavigatable"/> objects is accessible.
            </summary>
            <typeparam name="T">Object of <see cref="T:Telerik.Web.Mvc.INavigatable"/> type.</typeparam>
            <param name="item">The <see cref="T:Telerik.Web.Mvc.INavigatable"/> object.</param>
            <param name="authorization">The <see cref="T:Telerik.Web.Mvc.Infrastructure.INavigationItemAuthorization"/> object.</param>
            <param name="viewContext">The <see cref="T:System.Web.Mvc.ViewContext"/> object</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.NavigatableExtensions.HasValue(Telerik.Web.Mvc.INavigatable)">
            <summary>
            Determines whether this instance has value.
            </summary>
            <returns>true if either ActionName and ControllerName, RouteName or Url are set; false otherwise</returns>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.PanelBarBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.PanelBar"/> component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarBuilder.#ctor(Telerik.Web.Mvc.UI.PanelBar)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.PanelBarBuilder"/> class.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarBuilder.Items(System.Action{Telerik.Web.Mvc.UI.PanelBarItemFactory})">
            <summary>
            Defines the items in the panelbar
            </summary>
            <param name="addAction">The add action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PanelBar()
                        .Name("PanelBar")
                        .Items(items =>
                        {
                            items.Add().Text("First Item");
                            items.Add().Text("Second Item");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarBuilder.ClientEvents(System.Action{Telerik.Web.Mvc.UI.PanelBarClientEventsBuilder})">
            <summary>
            Configures the client-side events.
            </summary>
            <param name="clientEventsAction">The client events action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PanelBar()
                        .Name("PanelBar")
                        .ClientEvents(events =>
                            events.OnExpand("onExpand").OnCollapse("onCollapse")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarBuilder.BindTo(System.String,System.Action{Telerik.Web.Mvc.UI.PanelBarItem,Telerik.Web.Mvc.SiteMapNode})">
            <summary>
            Binds the panelbar to a sitemap
            </summary>
            <param name="viewDataKey">The view data key.</param>
            <param name="siteMapAction">The action to configure the item.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PanelBar()
                        .Name("PanelBar")
                        .BindTo("examples", (item, siteMapNode) =>
                        {
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarBuilder.BindTo(System.String)">
            <summary>
            Binds the panelbar to a sitemap.
            </summary>
            <param name="viewDataKey">The view data key.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PanelBar()
                        .Name("PanelBar")
                        .BindTo("examples")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarBuilder.BindTo``1(System.Collections.Generic.IEnumerable{``0},System.Action{Telerik.Web.Mvc.UI.PanelBarItem,``0})">
            <summary>
            Binds the panelbar to a list of objects
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
            <param name="dataSource">The data source.</param>
            <param name="itemDataBound">The action executed for every data bound item.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PanelBar()
                        .Name("PanelBar")
                        .BindTo(new []{"First", "Second"}, (item, value)
                        {
                           item.Text = value;
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarBuilder.BindTo(System.Collections.IEnumerable,System.Action{Telerik.Web.Mvc.UI.NavigationBindingFactory{Telerik.Web.Mvc.UI.PanelBarItem}})">
            <summary>
            Binds the panelbar to a list of objects. The panelbar will create a hierarchy of items using the specified mappings.
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
            <param name="dataSource">The data source.</param>
            <param name="factoryAction">The action which will configure the mappings</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PanelBar()
                        .Name("PanelBar")
                        .BindTo(Model, mapping => mapping
                                .For&lt;Customer&gt;(binding => binding
                                    .Children(c => c.Orders) // The "child" items will be bound to the the "Orders" property
                                    .ItemDataBound((item, c) => item.Text = c.ContactName) // Map "Customer" properties to PanelBarItem properties
                                )
                                .For&lt;Order&lt;(binding => binding
                                    .Children(o => null) // "Orders" do not have child objects so return "null"
                                    .ItemDataBound((item, o) => item.Text = o.OrderID.ToString()) // Map "Order" properties to PanelBarItem properties
                                )
                        ) 
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarBuilder.Effects(System.Action{Telerik.Web.Mvc.UI.EffectsBuilder})">
            <summary>
            Configures the effects of the panelbar.
            </summary>
            <param name="effectsAction">The action which configures the effects.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().PanelBar()
                       .Name("PanelBar")
                       .Effects(fx =>
                       {
            	            fx.Height()
            		          .Opacity()
            				  .OpenDuration(AnimationDuration.Normal)
            				  .CloseDuration(AnimationDuration.Normal);
                       })
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarBuilder.ItemAction(System.Action{Telerik.Web.Mvc.UI.PanelBarItem})">
            <summary>
            Callback for each item.
            </summary>
            <param name="itemAction">Action, which will be executed for each item.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PanelBar()
                        .Name("PanelBar")
                        .ItemAction(item =>
                        {
                            item
                                .Text(...)
                                .HtmlAttributes(...);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarBuilder.HighlightPath(System.Boolean)">
            <summary>
            Select item depending on the current URL.
            </summary>
            <param name="value">If true the item will be highlighted.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PanelBar()
                        .Name("PanelBar")
                        .HighlightPath(true)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarBuilder.ExpandAll(System.Boolean)">
            <summary>
            Renders the panelbar with expanded items.
            </summary>
            <param name="value">If true the panelbar will be expanded.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PanelBar()
                        .Name("PanelBar")
                        .ExpandAll(true)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarBuilder.ExpandMode(Telerik.Web.Mvc.UI.PanelBarExpandMode)">
            <summary>
            Sets the expand mode of the panelbar.
            </summary>
            <param name="value">The desired expand mode.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PanelBar()
                        .Name("PanelBar")
                        .ExpandMode(PanelBarExpandMode.Multiple)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarBuilder.SelectedIndex(System.Int32)">
            <summary>
            Selects the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PanelBar()
                        .Name("PanelBar")
                        .Items(items =>
                        {
                            items.Add().Text("First Item");
                            items.Add().Text("Second Item");
                        })
                        .SelectedIndex(1)
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.PanelBarClientEventsBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="P:Telerik.Web.Mvc.UI.PanelBar.ClientEvents"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarClientEventsBuilder.#ctor(Telerik.Web.Mvc.UI.PanelBarClientEvents,System.Web.Mvc.ViewContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.PanelBarClientEventsBuilder"/> class.
            </summary>
            <param name="clientEvents">The client events.</param>
            <param name="viewContext">The view context.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarClientEventsBuilder.OnExpand(System.Action)">
            <summary>
            Defines the inline handler of the OnExpand client-side event
            </summary>
            <param name="onExpandAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().PanelBar()
                       .Name("PanelBar")
                       .ClientEvents(events => events.OnExpand(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarClientEventsBuilder.OnExpand(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnExpand client-side event
            </summary>
            <param name="onExpandAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().PanelBar()
                       .Name("PanelBar")
                       .ClientEvents(events => events.OnExpand(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarClientEventsBuilder.OnExpand(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnExpand client-side event.
            </summary>
            <param name="onExpandHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PanelBar()
                        .Name("PanelBar")
                        .ClientEvents(events => events.OnExpand("onExpand"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarClientEventsBuilder.OnCollapse(System.Action)">
            <summary>
            Defines the inline handler of the OnCollapse client-side event
            </summary>
            <param name="onCollapseAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().PanelBar()
                       .Name("PanelBar")
                       .ClientEvents(events => events.OnCollapse(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarClientEventsBuilder.OnCollapse(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnCollapse client-side event
            </summary>
            <param name="onCollapseAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().PanelBar()
                       .Name("PanelBar")
                       .ClientEvents(events => events.OnCollapse(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarClientEventsBuilder.OnCollapse(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnCollapse client-side event.
            </summary>
            <param name="onCollapseHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PanelBar()
                        .Name("PanelBar")
                        .ClientEvents(events => events.OnCollapse("onCollapse"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarClientEventsBuilder.OnSelect(System.Action)">
            <summary>
            Defines the inline handler of the OnSelect client-side event
            </summary>
            <param name="onSelectAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().PanelBar()
                       .Name("PanelBar")
                       .ClientEvents(events => events.OnSelect(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarClientEventsBuilder.OnSelect(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnSelect client-side event
            </summary>
            <param name="onSelectAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().PanelBar()
                       .Name("PanelBar")
                       .ClientEvents(events => events.OnSelect(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarClientEventsBuilder.OnSelect(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnSelect client-side event.
            </summary>
            <param name="onSelectHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PanelBar()
                        .Name("PanelBar")
                        .ClientEvents(events => events.OnSelect("onSelect"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarClientEventsBuilder.OnLoad(System.Action)">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().PanelBar()
                       .Name("PanelBar")
                       .ClientEvents(events => events.OnLoad(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarClientEventsBuilder.OnLoad(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().PanelBar()
                       .Name("PanelBar")
                       .ClientEvents(events => events.OnLoad(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarClientEventsBuilder.OnLoad(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnLoad client-side event.
            </summary>
            <param name="onLoadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PanelBar()
                        .Name("PanelBar")
                        .ClientEvents(events => events.OnLoad("onLoad"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarClientEventsBuilder.OnError(System.Action)">
            <summary>
            Defines the inline handler of the OnError client-side event
            </summary>
            <param name="onErrorAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().PanelBar()
                       .Name("PanelBar")
                       .ClientEvents(events => events.OnError(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarClientEventsBuilder.OnError(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnError client-side event
            </summary>
            <param name="onErrorAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().PanelBar()
                       .Name("PanelBar")
                       .ClientEvents(events => events.OnError(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarClientEventsBuilder.OnError(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnError client-side event.
            </summary>
            <param name="onErrorHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PanelBar()
                        .Name("PanelBar")
                        .ClientEvents(events => events.OnError("onError"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.PanelBarExpandMode">
            <summary>
            Specifies the expand mode in which the panelbar will expand its items
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.PanelBarExpandMode.Single">
            <summary>
            Only one item can be expanded.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.PanelBarExpandMode.Multiple">
            <summary>
            All items can be expanded
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.PanelBarItemBuilder">
            <summary>
            Defines the fluent interface for configuring child panelbar items.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarItemBuilder.#ctor(Telerik.Web.Mvc.UI.PanelBarItem,System.Web.Mvc.ViewContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.PanelBarItemBuilder"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="viewContext">The context of the View.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarItemBuilder.Items(System.Action{Telerik.Web.Mvc.UI.PanelBarItemFactory})">
            <summary>
            Configures the child items of a <see cref="T:Telerik.Web.Mvc.UI.PanelBarItem"/>.
            </summary>
            <param name="addAction">The add action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PanelBar()
                        .Name("PanelBar")
                        .Items(items =&gt;
                        {
                            items.Add().Text("First Item").Items(firstItemChildren =&gt; 
                            {
                                firstItemChildren.Add().Text("Child Item 1");
                                firstItemChildren.Add().Text("Child Item 2");
                            });
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.PanelBarItemBuilder.Expanded(System.Boolean)">
            <summary>
            Define when the item will be expanded on intial render.
            </summary>
            <param name="value">If true the item will be expanded.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PanelBar()
                        .Name("PanelBar")
                        .Items(items =>
                        {
                            items.Add().Text("First Item").Items(firstItemChildren => 
                            {
                                firstItemChildren.Add().Text("Child Item 1");
                                firstItemChildren.Add().Text("Child Item 2");
                            })
                            .Expanded(true);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.TabStripClientEventsBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="P:Telerik.Web.Mvc.UI.TabStrip.ClientEvents"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripClientEventsBuilder.#ctor(Telerik.Web.Mvc.UI.TabStripClientEvents,System.Web.Mvc.ViewContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.TabStripClientEventsBuilder"/> class.
            </summary>
            <param name="clientEvents">The client events.</param>
            <param name="viewContext">The view context.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripClientEventsBuilder.OnSelect(System.Action)">
            <summary>
            Defines the inline handler of the OnSelect client-side event
            </summary>
            <param name="onSelectAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TabStrip()
                       .Name("TabStrip")
                       .ClientEvents(events => events.OnSelect(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripClientEventsBuilder.OnSelect(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnSelect client-side event
            </summary>
            <param name="onSelectAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TabStrip()
                       .Name("TabStrip")
                       .ClientEvents(events => events.OnSelect(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripClientEventsBuilder.OnSelect(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnSelect client-side event.
            </summary>
            <param name="onSelectHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TabStrip()
                        .Name("TabStrip")
                        .ClientEvents(events => events.OnSelect("onSelect"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripClientEventsBuilder.OnContentLoad(System.Action)">
            <summary>
            Defines the inline handler of the OnContentLoad client-side event
            </summary>
            <param name="onSelectAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TabStrip()
                       .Name("TabStrip")
                       .ClientEvents(events => events.OnContentLoad(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripClientEventsBuilder.OnContentLoad(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnContentLoad client-side event
            </summary>
            <param name="onSelectAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TabStrip()
                       .Name("TabStrip")
                       .ClientEvents(events => events.OnContentLoad(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripClientEventsBuilder.OnContentLoad(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnContentLoad client-side event.
            </summary>
            <param name="onSelectHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TabStrip()
                        .Name("TabStrip")
                        .ClientEvents(events => events.OnContentLoad("onContentLoad"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripClientEventsBuilder.OnLoad(System.Action)">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TabStrip()
                       .Name("TabStrip")
                       .ClientEvents(events => events.OnLoad(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripClientEventsBuilder.OnLoad(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TabStrip()
                       .Name("TabStrip")
                       .ClientEvents(events => events.OnLoad(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripClientEventsBuilder.OnLoad(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnLoad client-side event.
            </summary>
            <param name="onLoadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TabStrip()
                        .Name("TabStrip")
                        .ClientEvents(events => events.OnLoad("onLoad"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripClientEventsBuilder.OnError(System.Action)">
            <summary>
            Defines the inline handler of the OnError client-side event
            </summary>
            <param name="onErrorAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TabStrip()
                       .Name("TabStrip")
                       .ClientEvents(events => events.OnError(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripClientEventsBuilder.OnError(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnError client-side event
            </summary>
            <param name="onErrorAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().TabStrip()
                       .Name("TabStrip")
                       .ClientEvents(events => events.OnError(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripClientEventsBuilder.OnError(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnError client-side event.
            </summary>
            <param name="onErrorHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TabStrip()
                        .Name("TabStrip")
                        .ClientEvents(events => events.OnError("onError"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.TabStripBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.TabStrip"/> component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripBuilder.#ctor(Telerik.Web.Mvc.UI.TabStrip)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.TabStripBuilder"/> class.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripBuilder.Items(System.Action{Telerik.Web.Mvc.UI.TabStripItemFactory})">
            <summary>
            Defines the items in the tabstrip
            </summary>
            <param name="addAction">The add action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TabStrip()
                        .Name("TabStrip")
                        .Items(items =>
                        {
                            items.Add().Text("First Item");
                            items.Add().Text("Second Item");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripBuilder.ClientEvents(System.Action{Telerik.Web.Mvc.UI.TabStripClientEventsBuilder})">
            <summary>
            Configures the client-side events.
            </summary>
            <param name="clientEventsAction">The client events action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TabStrip()
                        .Name("TabStrip")
                        .ClientEvents(events =>
                            events.OnSelect("onSelect").OnLoad("onLoad")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripBuilder.BindTo(System.String,System.Action{Telerik.Web.Mvc.UI.TabStripItem,Telerik.Web.Mvc.SiteMapNode})">
            <summary>
            Binds the tabstrip to a sitemap
            </summary>
            <param name="viewDataKey">The view data key.</param>
            <param name="siteMapAction">The action to configure the item.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TabStrip()
                        .Name("TabStrip")
                        .BindTo("examples", (item, siteMapNode) =>
                        {
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripBuilder.BindTo(System.String)">
            <summary>
            Binds the tabstrip to a sitemap.
            </summary>
            <param name="viewDataKey">The view data key.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TabStrip()
                        .Name("TabStrip")
                        .BindTo("examples")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripBuilder.BindTo``1(System.Collections.Generic.IEnumerable{``0},System.Action{Telerik.Web.Mvc.UI.TabStripItem,``0})">
            <summary>
            Binds the tabstrip to a list of objects
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
            <param name="dataSource">The data source.</param>
            <param name="itemDataBound">The action executed for every data bound item.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TabStrip()
                        .Name("TabStrip")
                        .BindTo(new []{"First", "Second"}, (item, value)
                        {
                           item.Text = value;
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripBuilder.Effects(System.Action{Telerik.Web.Mvc.UI.EffectsBuilder})">
            <summary>
            Configures the effects of the tabstrip.
            </summary>
            <param name="addEffects">The action which configures the effects.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().TabStrip()
                       .Name("TabStrip")
                       .Effects(fx =>
                       {
            	            fx.Slide()
            		          .Opacity()
            				  .OpenDuration(AnimationDuration.Normal)
            				  .CloseDuration(AnimationDuration.Normal);
                       })
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripBuilder.SelectedIndex(System.Int32)">
            <summary>
            Selects the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TabStrip()
                        .Name("TabStrip")
                        .Items(items =>
                        {
                            items.Add().Text("First Item");
                            items.Add().Text("Second Item");
                        })
                        .SelectedIndex(1)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripBuilder.ItemAction(System.Action{Telerik.Web.Mvc.UI.TabStripItem})">
            <summary>
            Callback for each item.
            </summary>
            <param name="action">Action, which will be executed for each item.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TabStrip()
                        .Name("TabStrip")
                        .ItemAction(item =>
                        {
                            item
                                .Text(...)
                                .HtmlAttributes(...);
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripBuilder.HighlightPath(System.Boolean)">
            <summary>
            Select item depending on the current URL.
            </summary>
            <param name="value">If true the item will be highlighted.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TabStrip()
                        .Name("TabStrip")
                        .HighlightPath(true)
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.TabStripItemBuilder">
            <summary>
            Defines the fluent interface for configuring child tabstrip items.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.TabStripItemBuilder.#ctor(Telerik.Web.Mvc.UI.TabStripItem,System.Web.Mvc.ViewContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.TabStripItemBuilder"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="viewContext">The context of the View.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.UIPrimitives">
            <summary>
            Contains constants for CSS class names
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.ActiveState">
            <summary>
            Active state of items
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Button">
            <summary>
            Button with plain text content
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.ButtonIconText">
            <summary>
            Button with an icon and text content
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.ButtonIcon">
            <summary>
            Button with an icon only
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.ButtonBare">
            <summary>
            Bare button with an icon only (no background and borders)
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Content">
            <summary>
            Content - rendered around custom content
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.DefaultState">
            <summary>
            Default state of items
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.DisabledState">
            <summary>
            Disabled state of items
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Group">
            <summary>
            Group - rendered around grouped items (children)
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Header">
            <summary>
            Header - rendered on headers or header items
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.HoverState">
            <summary>
            Hovered state of items
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Icon">
            <summary>
            Icon - icon from default icon set
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Image">
            <summary>
            Image - image rendered through ImageUrl
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Item">
            <summary>
            Item - rendered on items
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.First">
            <summary>
            First in list of items
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Last">
            <summary>
            Last in list of items
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Top">
            <summary>
            Top in list of items
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Bottom">
            <summary>
            Bottom in list of items
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Middle">
            <summary>
            Middle in list of items
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.LastHeader">
            <summary>
            Last in list of headers
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Link">
            <summary>
            Link - rendered on all links
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.ResetStyle">
            <summary>
            Reset - removes inherited styles
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.SelectedState">
            <summary>
            Selected state of items
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Sprite">
            <summary>
            Sprite - sprite rendered in the begging of the item.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Widget">
            <summary>
            Widget - rendered always on the outmost HTML element of a UI component
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Input">
            <summary>
            Input - input rendered in the div wrapper
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.CheckBox">
            <summary>
            CheckBox - rendered on all checkbox
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.ToolBar">
            <summary>
            ToolBar - rendered on all toolbars
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Alt">
            <summary>
            Alternating class for zebra stripes
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Scrollable">
            <summary>
            Scrollable - rendered on all elements that wish to be scrollable on touch devices
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.UIPrimitives.Icons">
            <summary>
            Contains CSS classes for icons
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Icons.Delete">
            <summary>
            "Delete" icon
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Icons.GroupDelete">
            <summary>
            "Delete Group" icon
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Icons.Refresh">
            <summary>
            "Minimize" icon
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Icons.Maximize">
            <summary>
            "Maximize" icon
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Icons.Close">
            <summary>
            "Close" icon
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.UIPrimitives.Grid">
            <summary>
            Contains CSS classes, used in the grid
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Grid.ActionForm">
            <summary>
            Grid action
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Grid.EditingContainer">
            <summary>
            Container element for editing / inserting form
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Grid.EditingForm">
            <summary>
            Container element for editing / inserting form
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Grid.ToolBar">
            <summary>
            Toolbar which contains different commands
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.UIPrimitives.TreeView">
            <summary>
            Contains CSS classes, used in the treeview
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.TreeView.Lines">
            <summary>
            Class that shows treeview lines
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.UIPrimitives.Editor">
            <summary>
            Contains CSS classes, used in the editor
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Editor.ToolbarButton">
            <summary>
            Button in editor toolbar
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Editor.ToolbarColorPicker">
            <summary>
            Color picker in editor toolbar
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Editor.ToolIcon">
            <summary>
            Editor tool icon
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Editor.Custom">
            <summary>
            Editor custom tool
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Editor.RawContent">
            <summary>
            Editor textarea element
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Slider.IncreaseButton">
            <summary>Slider increase button.</summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Slider.DecreaseButton">
            <summary>Slider decrease button.</summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Splitter.Horizontal">
            <summary>Horizontal splitter</summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Splitter.Vertical">
            <summary>Vertical splitter</summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Splitter.Pane">
            <summary>Splitter pane</summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.UIPrimitives.Upload">
            <summary>
            UI primitives for Upload
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Upload.Button">
            <summary>
            Upload button
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.UIPrimitives.Window">
            <summary>
            Contains CSS classes, used in the window
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Window.Content">
            <summary>
            Window content area
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.UIPrimitives.Window.TitleBar">
            <summary>
            Window title bar
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder">
            <summary>
            A builder class for <see cref="T:Telerik.Web.Mvc.UI.IUploadAsyncSettings"/>
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.#ctor(Telerik.Web.Mvc.UI.IUploadAsyncSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder"/> class.
            </summary>
            <param name="asyncSettings">The async settings.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async =&gt; async
                            .Save("Save", "Home", new RouteValueDictionary{ {"id", 1} })
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.AutoUpload(System.Boolean)">
            <summary>
            Sets a value indicating whether to start the upload immediately after selecting a file
            </summary>
            <param name="value">true if the upload should start immediately after selecting a file, false otherwise; true by default</param>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.Save(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller and route values for the save operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Save("Save", "Home", new RouteValueDictionary{ {"id", 1} });
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.Save(System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller, route values and field name for the save operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="fieldName">
                The form field name to use for submiting the files.
                The Upload name is used if not set.
            </param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Save("Save", "Home", "attachment", new RouteValueDictionary{ {"id", 1} });
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.Save(System.String,System.String,System.Object)">
            <summary>
            Sets the action, controller and route values for the save operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Save("Save", "Home", new { id = 1 });
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.Save(System.String,System.String,System.String,System.Object)">
            <summary>
            Sets the action, controller and route values for the save operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="fieldName">
                The form field name to use for submiting the files.
                The Upload name is used if not set.
            </param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Save("Save", "Home", "attachments", new { id = 1 });
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.Save(System.String,System.String)">
            <summary>
            Sets the action and controller for the save operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Save("Save", "Home");
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.Save(System.String,System.String,System.String)">
            <summary>
            Sets the action and controller for the save operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="fieldName">
                The form field name to use for submiting the files.
                The Upload name is used if not set.
            </param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Save("Save", "Home", "attachments");
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.Save(System.String)">
            <summary>
            Sets the route name for the save operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Save("Default");
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.Save(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the route values for the save operation
            </summary>
            <param name="routeValues">The route values of the action method.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Save(MVC.Home.Save(1).GetRouteValueDictionary());
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.Save(System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the route and values for the save operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Save("Default", "Home", new RouteValueDictionary{ {"id", 1} });
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.Save(System.String,System.Object)">
            <summary>
            Sets the route and values for the save operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Save("Default", new { id = 1 });
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.Save``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Sets the action for the save operation
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="controllerAction">The action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Save&lt;HomeController&gt;(controller => controller.Save()));
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.Remove(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the action, controller and route values for the remove operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Remove("Remove", "Home", new RouteValueDictionary{ {"id", 1} });
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.Remove(System.String,System.String,System.Object)">
            <summary>
            Sets the action, controller and route values for the remove operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Remove("Remove", "Home", new { id = 1 });
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.Remove(System.String,System.String)">
            <summary>
            Sets the action and controller for the remove operation
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Remove("Remove", "Home");
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.Remove(System.String)">
            <summary>
            Sets the route name for the remove operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Remove("Default");
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.Remove(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the route values for the remove operation
            </summary>
            <param name="routeValues">The route values of the action method.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Remove(MVC.Home.Remove(1).GetRouteValueDictionary());
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.Remove(System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the route and values for the remove operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Remove("Default", "Home", new RouteValueDictionary{ {"id", 1} });
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.Remove(System.String,System.Object)">
            <summary>
            Sets the route and values for the remove operation
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Remove("Default", new { id = 1 });
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder.Remove``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Sets the action for the remove operation
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="controllerAction">The action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Remove&lt;HomeController&gt;(controller => controller.Remove()));
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.UploadBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.Upload"/> component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadBuilder.#ctor(Telerik.Web.Mvc.UI.Upload)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.UploadBuilder"/> class.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadBuilder.ClientEvents(System.Action{Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder})">
            <summary>
            Configures the client-side events.
            </summary>
            <param name="configurator">The client events configuration action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .ClientEvents(events => events
                            .OnLoad("onLoad")
                            .OnUpload("onUpload")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadBuilder.Enable(System.Boolean)">
            <summary>
            Enables or disables the component.
            </summary>
            <param name="value">true if the component should be enabled, false otherwise; the default is true.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Enable(false)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadBuilder.Multiple(System.Boolean)">
            <summary>
            Enables or disables multiple file selection.
            </summary>
            <param name="value">true if multiple file selection should be enabled, false otherwise; the default is true.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Multiple(false)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadBuilder.ShowFileList(System.Boolean)">
            <summary>
            Sets a value indicating whether to show the list of uploaded files
            </summary>
            <param name="value">true if the list of uploaded files should be visible, false otherwise; true by default</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadBuilder.Async(System.Action{Telerik.Web.Mvc.UI.Fluent.UploadAsyncSettingsBuilder})">
            <summary>
            Use it to configure asynchronous uploading.
            </summary>
            <param name="configurator">Use builder to set different asynchronous uploading options.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async => async
                            .Save("Save", "Compose")
                            .Remove("Remove", "Compose")
                        );
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadBuilder.Localizable(System.String)">
            <summary>
            Sets the localization culture of the upload.
            </summary>
            <param name="culture">The culture.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Localizable("de-DE")
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="P:Telerik.Web.Mvc.UI.Upload.ClientEvents"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.#ctor(Telerik.Web.Mvc.UI.UploadClientEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder"/> class.
            </summary>
            <param name="clientEvents">The client events.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnLoad(System.Action)">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="codeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Upload()
                       .Name("Upload")
                       .ClientEvents(events => events.OnLoad(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnLoad(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="inlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Upload()
                       .Name("Upload")
                       .ClientEvents(events => events.OnLoad(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnLoad(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnLoad client-side event.
            </summary>
            <param name="onLoadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .ClientEvents(events => events.OnLoad("onLoad"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnSelect(System.Action)">
            <summary>
            Defines the inline handler of the OnSelect client-side event
            </summary>
            <param name="codeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Upload()
                       .Name("Upload")
                       .ClientEvents(events => events.OnSelect(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnSelect(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnSelect client-side event
            </summary>
            <param name="inlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Upload()
                       .Name("Upload")
                       .ClientEvents(events => events.OnSelect(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnSelect(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnSelect client-side event.
            </summary>
            <param name="onSelectHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .ClientEvents(events => events.OnSelect("onSelect"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnUpload(System.Action)">
            <summary>
            Defines the inline handler of the OnUpload client-side event
            </summary>
            <param name="codeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Upload()
                       .Name("Upload")
                       .ClientEvents(events => events.OnUpload(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnUpload(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnUpload client-side event
            </summary>
            <param name="inlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Upload()
                       .Name("Upload")
                       .ClientEvents(events => events.OnUpload(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnUpload(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnUpload client-side event.
            </summary>
            <param name="onUploadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .ClientEvents(events => events.OnUpload("onUpload"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnSuccess(System.Action)">
            <summary>
            Defines the inline handler of the OnSuccess client-side event
            </summary>
            <param name="codeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Upload()
                       .Name("Upload")
                       .ClientEvents(events => events.OnSuccess(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnSuccess(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnSuccess client-side event
            </summary>
            <param name="inlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Upload()
                       .Name("Upload")
                       .ClientEvents(events => events.OnSuccess(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnSuccess(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnSuccess client-side event.
            </summary>
            <param name="onSuccessHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .ClientEvents(events => events.OnSuccess("onSuccess"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnError(System.Action)">
            <summary>
            Defines the inline handler of the OnError client-side event
            </summary>
            <param name="codeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Upload()
                       .Name("Upload")
                       .ClientEvents(events => events.OnError(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnError(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnError client-side event
            </summary>
            <param name="inlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Upload()
                       .Name("Upload")
                       .ClientEvents(events => events.OnError(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnError(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnError client-side event.
            </summary>
            <param name="onErrorHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .ClientEvents(events => events.OnError("onError"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnComplete(System.Action)">
            <summary>
            Defines the inline handler of the OnComplete client-side event
            </summary>
            <param name="codeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Upload()
                       .Name("Upload")
                       .ClientEvents(events => events.OnComplete(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnComplete(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnComplete client-side event
            </summary>
            <param name="inlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Upload()
                       .Name("Upload")
                       .ClientEvents(events => events.OnComplete(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnComplete(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnComplete client-side event.
            </summary>
            <param name="onCompleteHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .ClientEvents(events => events.OnComplete("onComplete"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnCancel(System.Action)">
            <summary>
            Defines the inline handler of the OnCancel client-side event
            </summary>
            <param name="codeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Upload()
                       .Name("Upload")
                       .ClientEvents(events => events.OnCancel(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnCancel(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnCancel client-side event
            </summary>
            <param name="inlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Upload()
                       .Name("Upload")
                       .ClientEvents(events => events.OnCancel(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnCancel(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnCancel client-side event.
            </summary>
            <param name="onCancelHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .ClientEvents(events => events.OnCancel("onCancel"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnRemove(System.Action)">
            <summary>
            Defines the inline handler of the OnRemove client-side event
            </summary>
            <param name="codeBlock">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Upload()
                       .Name("Upload")
                       .ClientEvents(events => events.OnRemove(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnRemove(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnRemove client-side event
            </summary>
            <param name="inlineCodeBlock">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().Upload()
                       .Name("Upload")
                       .ClientEvents(events => events.OnRemove(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.UploadClientEventsBuilder.OnRemove(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnRemove client-side event.
            </summary>
            <param name="onRemoveHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .ClientEvents(events => events.OnRemove("onRemove"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Html.UploadHtmlBuilder">
            <summary>
            An HTML Builder for the Upload component
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Html.UploadHtmlBuilder.#ctor(Telerik.Web.Mvc.UI.Upload)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Html.UploadHtmlBuilder"/> class.
            </summary>
            <param name="component">The Upload component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Html.UploadHtmlBuilder.CreateUpload">
            <summary>
            Creates the upload top-level div.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Html.UploadHtmlBuilder.CreateButtonText">
            <summary>
            Creates the button text element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Html.UploadHtmlBuilder.CreateFileInput">
            <summary>
            Creates the file input element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Html.UploadHtmlBuilder.BuildCore">
            <summary>
            Builds the Upload component markup.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IUploadAsyncSettings">
            <summary>
            Defines an interface for asynchronous upload settings
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IUploadAsyncSettings.Save">
            <summary>
            Defines the Save action
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IUploadAsyncSettings.SaveField">
            <summary>
            Defines the name of the form field submitted to the Save action.
            The default value is the Upload name.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IUploadAsyncSettings.Remove">
            <summary>
            Defines the Remove action
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.IUploadAsyncSettings.AutoUpload">
            <summary>
            Gets or sets a value indicating whether to start the upload immediately after selecting a file
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.UploadAsyncSettings">
            <summary>
            Defines the asynchronous uploading settings
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.UploadAsyncSettings.#ctor(Telerik.Web.Mvc.UI.Upload)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.UploadAsyncSettings"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.UploadAsyncSettings.SerializeTo(System.String,Telerik.Web.Mvc.UI.IClientSideObjectWriter)">
            <summary>
            Serializes the asynchronous uploading settings to the writer.
            </summary>
            <param name="writer">The writer object.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadAsyncSettings.Save">
            <summary>
            Defines the Save action
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadAsyncSettings.SaveField">
            <summary>
            Defines the name of the form field submitted to the Save action.
            The default value is the Upload name.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadAsyncSettings.Remove">
            <summary>
            Defines the Remove action
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadAsyncSettings.AutoUpload">
            <summary>
            Gets or sets a value indicating whether to start the upload immediately after selecting a file
            </summary>
            <value>
            true if the upload should start immediately after selecting a file, false otherwise; true by default
            </value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Upload">
            <summary>
            Telerik Upload for ASP.NET MVC is a view component for uploading files.
            It supports the following features:
            <list type="bullet">
                <item>Asynchronous uploading</item>
                <item>Progress tracking</item>
                <item>Multiple file selection</item>
                <item>Drag &amp; drop</item>
            </list>
            Note that some of the features depend on browser capabilities.
            For more information, see the online documentation.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Upload.#ctor(System.Web.Mvc.ViewContext,Telerik.Web.Mvc.UI.IClientSideObjectWriterFactory,Telerik.Web.Mvc.IUrlGenerator,Telerik.Web.Mvc.Infrastructure.ILocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Upload"/> class.
            </summary>
            <param name="viewContext">The view context.</param>
            <param name="clientSideObjectWriterFactory">The client side object writer factory.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Upload.WriteInitializationScript(System.IO.TextWriter)">
            <summary>
            Writes the initialization script.
            </summary>
            <param name="writer">The writer object.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Upload.WriteHtml(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the Upload HTML.
            </summary>
            <param name="writer">The writer object.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Upload.ClientEvents">
            <summary>
            Represents the client-side event handlers for the component
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Upload.Enabled">
            <summary>
            Gets or sets a value indicating if the component is enabled.
            </summary>
            <value>
            true if the component should be enabled, false otherwise; the default is true.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Upload.Multiple">
            <summary>
            Gets or sets a value indicating if multiple file selection is enabled.
            </summary>
            <value>
            true if multiple file selection should be enabled, false otherwise; the default is true.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Upload.ShowFileList">
            <summary>
            Gets or sets a value indicating whether to show the list of uploaded files
            </summary>
            <value>
            true if the list of uploaded files should be visible, false otherwise; true by default
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Upload.Async">
            <summary>
            Defines the asynchronous uploading settings
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Upload.UrlGenerator">
            <summary>
            Gets or sets the URL generator.
            </summary>
            <value>The URL generator.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.Upload.Localization">
            <summary>
            The localization strings for the component
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.UploadClientEvents">
            <summary>
            Represents the client-side events of the <see cref="T:Telerik.Web.Mvc.UI.Upload"/> component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.UploadClientEvents.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.UploadClientEvents"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.UploadClientEvents.SerializeTo(Telerik.Web.Mvc.UI.IClientSideObjectWriter)">
            <summary>
            Serializes the client-side events.
            </summary>
            <param name="writer">The writer object to serialize to.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadClientEvents.OnLoad">
            <summary>
            Defines the Load client-side event handler
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadClientEvents.OnSelect">
            <summary>
            Defines the Select client-side event handler
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadClientEvents.OnUpload">
            <summary>
            Defines the Upload client-side event handler
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadClientEvents.OnSuccess">
            <summary>
            Defines the Success client-side event handler
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadClientEvents.OnError">
            <summary>
            Defines the Error client-side event handler
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadClientEvents.OnComplete">
            <summary>
            Defines the Complete client-side event handler
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadClientEvents.OnCancel">
            <summary>
            Defines the Cancel client-side event handler
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadClientEvents.OnRemove">
            <summary>
            Defines the Remove client-side event handler
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.UploadLocalization">
            <summary>
            Localization strings for the Upload component
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.UploadLocalization.#ctor(Telerik.Web.Mvc.Infrastructure.ILocalizationService,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.UploadLocalization"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.UploadLocalization.SerializeTo(System.String,Telerik.Web.Mvc.UI.IClientSideObjectWriter)">
            <summary>
            Serializes the localization strings.
            </summary>
            <param name="key">The key.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadLocalization.Select">
            <summary>
            Gets the Select string.
            </summary>
            <value>The default value is "Select...".</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadLocalization.Cancel">
            <summary>
            Gets the Cancel string.
            </summary>
            <value>The default value is "Cancel".</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadLocalization.Retry">
            <summary>
            Gets the Retry string.
            </summary>
            <value>The default value is "Retry".</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadLocalization.Remove">
            <summary>
            Gets the Remove string.
            </summary>
            <value>The default value is "Remove".</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadLocalization.UploadSelectedFiles">
            <summary>
            Gets the UploadSelectedFiles string.
            </summary>
            <value>The default value is "Upload files".</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadLocalization.DropFilesHere">
            <summary>
            Gets the DropFilesHere string.
            </summary>
            <value>The default value is "drop files here to upload".</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadLocalization.StatusUploading">
            <summary>
            Gets the "uploading" status string.
            </summary>
            <value>The default value is "uploading".</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadLocalization.StatusUploaded">
            <summary>
            Gets the "uploaded" status string.
            </summary>
            <value>The default value is "uploaded".</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.UploadLocalization.StatusFailed">
            <summary>
            Gets the "failed" status string.
            </summary>
            <value>The default value is "failed".</value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ViewComponentFactory">
            <summary>
            Provides the factory methods for creating Telerik View Components.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.StyleSheetRegistrar">
            <summary>
            Creates a <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.StyleSheetRegistrar"/>
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().StyleSheetRegistrar()
                        .DefaultGroup(group =&gt; group
                              group.Add("Site.css")
                                   .Add("telerik.common.css")
                                   .Add("telerik.vista.css")
                                   .Compressed(true)
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.ScriptRegistrar">
            <summary>
            Creates a <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.ScriptRegistrar"/>
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ScriptRegistrar()
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Menu">
            <summary>
            Creates a <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Menu"/>
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Menu()
                        .Name("Menu")
                        .Items(items =&gt; { /* add items here */ });
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Editor">
            <summary>
            Creates a <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Editor"/>
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Editor()
                        .Name("Editor");
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Grid``1">
            <summary>
            Creates a new <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Grid``1"/> bound to the specified data item type.
            </summary>
            <example>
            <typeparam name="T">The type of the data item</typeparam>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid&lt;Order&gt;()
                        .Name("Grid")
                        .BindTo(Model)
            %&gt;
            </code>
            </example>
            <remarks>
            Do not forget to bind the grid using the <see cref="!:GridBuilder&lt;T&gt;.BindTo(System.String)"/> method when using this overload.
            </remarks>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Grid``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a new <see cref="!:Telerik.Web.UI.Grid&lt;T&gt;"/> bound to the specified data source.
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
            <param name="dataSource">The data source.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid(Model)
                        .Name("Grid")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Grid(System.Data.DataTable)">
            <summary>
            Creates a new <see cref="!:Telerik.Web.UI.Grid&lt;T&gt;"/> bound to a DataTable.
            </summary>
            <param name="dataSource">DataTable from which the grid instance will be bound</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Grid(System.Data.DataView)">
            <summary>
            Creates a new <see cref="!:Telerik.Web.UI.Grid&lt;T&gt;"/> bound to a DataView.
            </summary>
            <param name="dataSource">DataView from which the grid instance will be bound</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Grid``1(System.String)">
            <summary>
            Creates a new <see cref="!:Telerik.Web.UI.Grid&lt;T&gt;"/> bound an item in ViewData.
            </summary>
            <typeparam name="T">Type of the data item</typeparam>
            <param name="dataSourceViewDataKey">The data source view data key.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Grid&lt;Order&gt;("orders")
                        .Name("Grid")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Splitter">
            <summary>
            Creates a <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Splitter"/>
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Splitter()
                        .Name("Splitter");
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.TabStrip">
            <summary>
            Creates a new <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.TabStrip"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TabStrip()
                        .Name("TabStrip")
                        .Items(items =&gt;
                        {
                            items.Add().Text("First");
                            items.Add().Text("Second");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.DateTimePicker">
            <summary>
            Creates a new <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.DateTimePicker"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DateTimePicker()
                        .Name("DateTimePicker")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.DatePicker">
            <summary>
            Creates a new <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.DatePicker"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DatePicker()
                        .Name("DatePicker")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.TimePicker">
            <summary>
            Creates a new <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.TimePicker"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TimePicker()
                        .Name("TimePicker")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Calendar">
            <summary>
            Creates a new <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Calendar"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Calendar()
                        .Name("Calendar")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.PanelBar">
            <summary>
            Creates a new <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.PanelBar"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PanelBar()
                        .Name("PanelBar")
                        .Items(items =&gt;
                        {
                            items.Add().Text("First");
                            items.Add().Text("Second");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.TreeView">
            <summary>
            Creates a <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.TreeView"/>
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TreeView()
                        .Name("TreeView")
                        .Items(items =&gt; { /* add items here */ });
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.NumericTextBox">
            <summary>
            Creates a new <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.NumericTextBox``1"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().NumericTextBox()
                        .Name("NumericTextBox")
            %&gt;
            </code>
            </example>
            <returns>Returns <see cref="!:NumericTextBoxBuilder&lt;double&gt;"/>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.ViewComponentFactory.NumericTextBox``1" -->
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.CurrencyTextBox">
            <summary>
            Creates a new <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.CurrencyTextBox"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().CurrencyTextBox()
                        .Name("CurrencyTextBox")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.PercentTextBox">
            <summary>
            Creates a new <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.PercentTextBox"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PercentTextBox()
                        .Name("PercentTextBox")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.IntegerTextBox">
            <summary>
            Creates a new <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.IntegerTextBox"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().IntegerTextBox()
                        .Name("IntegerTextBox")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Window">
            <summary>
            Creates a new <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Window"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.DropDownList">
            <summary>
            Creates a new <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.DropDownList"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownList()
                        .Name("DropDownList")
                        .Items(items =&gt;
                        {
                            items.Add().Text("First Item");
                            items.Add().Text("Second Item");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.ComboBox">
            <summary>
            Creates a new <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.ComboBox"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBox()
                        .Name("ComboBox")
                        .Items(items =&gt;
                        {
                            items.Add().Text("First Item");
                            items.Add().Text("Second Item");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.AutoComplete">
            <summary>
            Creates a new <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.AutoComplete"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().AutoComplete()
                        .Name("AutoComplete")
                        .Items(items =&gt;
                        {
                            items.Add().Text("First Item");
                            items.Add().Text("Second Item");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Slider``1">
            <summary>
            Creates a new <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Slider``1"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Slider()
                        .Name("Slider")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.RangeSlider``1">
            <summary>
            Creates a new <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.RangeSlider``1"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().RangeSlider()
                        .Name("RangeSlider")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Upload">
            <summary>
            Creates a <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Upload"/>
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Upload()
                        .Name("Upload")
                        .Async(async =&gt; async
                            .Save("ProcessAttachments", "Home")
                            .Remove("RemoveAttachment", "Home")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Chart``1">
            <summary>
            Creates a <see cref="T:Telerik.Web.Mvc.UI.Chart`1"/>
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart()
                        .Name("Chart")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Chart``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a new <see cref="T:Telerik.Web.Mvc.UI.Chart`1"/> bound to the specified data source.
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
            <param name="dataSource">The data source.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart(Model)
                        .Name("Chart")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Chart``1(System.String)">
            <summary>
            Creates a new <see cref="T:Telerik.Web.Mvc.UI.Chart`1"/> bound an item in ViewData.
            </summary>
            <typeparam name="T">Type of the data item</typeparam>
            <param name="dataSourceViewDataKey">The data source view data key.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Chart&lt;SalesData&gt;("sales")
                        .Name("Chart")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Chart">
            <summary>
            Creates a new unbound <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory.Chart"/>.
            </summary>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Chart("sales")
                        .Name("Chart")
                        .Series(series =&gt; {
                            series.Bar(new int[] { 1, 2, 3 }).Name("Total Sales");
                        })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.EditorFor(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Creates a new <see cref="T:Telerik.Web.Mvc.UI.Editor"/> UI component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.NumericTextBoxFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Creates a new <see cref="T:Telerik.Web.Mvc.UI.NumericTextBox`1"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().NumericTextBoxFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.NumericTextBoxFor``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
            <summary>
            Creates a new <see cref="!:NumericTextBox&lt;Nullable&lt;TValue&gt;&gt;"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().NumericTextBoxFor(m=&gt;m.NullableProperty) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.IntegerTextBoxFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})">
            <summary>
            Creates a new <see cref="!:IntegerTextBox&lt;Nullable&lt;int&gt;&gt;"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().IntegerTextBoxFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.IntegerTextBoxFor(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})">
            <summary>
            Creates a new <see cref="!:IntegerTextBox&lt;int&gt;"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().IntegerTextBoxFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.CurrencyTextBoxFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
            <summary>
            Creates a new <see cref="!:CurrencyTextBox&lt;Nullable&lt;decimal&gt;&gt;"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().CurrencyTextBoxFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.CurrencyTextBoxFor(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Creates a new <see cref="!:CurrencyTextBox&lt;decimal&gt;"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().CurrencyTextBoxFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.PercentTextBoxFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})">
            <summary>
            Creates a new <see cref="!:PercentTextBox&lt;Nullable&lt;double&gt;&gt;"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PercentTextBoxFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.PercentTextBoxFor(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})">
            <summary>
            Creates a new <see cref="!:PercentTextBox&lt;double&gt;"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().PercentTextBoxFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.DateTimePickerFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
            <summary>
            Creates a new <see cref="!:DateTimePicker&lt;Nullable&lt;DateTime&gt;&gt;"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DateTimePickerFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.DateTimePickerFor(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
            <summary>
            Creates a new <see cref="!:DateTimePicker&lt;DateTime&gt;"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DateTimePickerFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.DatePickerFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
            <summary>
            Creates a new <see cref="!:DatePicker&lt;Nullable&lt;DateTime&gt;&gt;"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DatePickerFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.DatePickerFor(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
            <summary>
            Creates a new <see cref="!:DatePicker&lt;DateTime&gt;"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DatePickerFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.TimePickerFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
            <summary>
            Creates a new <see cref="!:TimePicker&lt;Nullable&lt;DateTime&gt;&gt;"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TimePickerFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.TimePickerFor(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
            <summary>
            Creates a new <see cref="!:TimePicker&lt;DateTime&gt;"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TimePickerFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.TimePickerFor(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
            <summary>
            Creates a new <see cref="!:TimePicker&lt;Nullable&lt;TimeSpan&gt;&gt;"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TimePickerFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.TimePickerFor(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
            <summary>
            Creates a new <see cref="!:TimePicker&lt;TimeSpan&gt;"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().TimePickerFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.DropDownListFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Creates a new <see cref="T:Telerik.Web.Mvc.UI.DropDownList"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().DropDownListFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.ComboBoxFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Creates a new <see cref="T:Telerik.Web.Mvc.UI.ComboBox"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().ComboBoxFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.AutoCompleteFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Creates a new <see cref="T:Telerik.Web.Mvc.UI.AutoComplete"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().AutoCompleteFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.SliderFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Creates a new <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.SliderFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().SliderFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.SliderFor``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
            <summary>
            Creates a new <see cref="!:NumericTextBox&lt;Nullable&lt;TValue&gt;&gt;"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().SliderFor(m=&gt;m.NullableProperty) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.RangeSliderFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0[]}})">
            <summary>
            Creates a new <see cref="M:Telerik.Web.Mvc.UI.ViewComponentFactory`1.RangeSliderFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0[]}})"/>.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().RangeSliderFor(m=&gt;m.Property) %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowEffectsBuilder.Zoom">
            <summary>
            Enables zoom animation.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.WindowButtonsBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="P:Telerik.Web.Mvc.UI.Window.Buttons"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowButtonsBuilder.#ctor(Telerik.Web.Mvc.UI.IWindowButtonsContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.WindowButtonsBuilder"/> class.
            </summary>
            <param name="container">The <see cref="T:Telerik.Web.Mvc.UI.IWindowButton"/> instance that is to be configured</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowButtonsBuilder.Close">
            <summary>
            Configures the window to show a close button
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .Buttons(buttons => buttons.Close())
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowButtonsBuilder.Close(System.String)">
            <summary>
            Configures the window to show a close button and sets a fallback URL for environments where JavaScript is turned off.
            </summary>
            <param name="url">The fallback URL</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .Buttons(buttons => buttons.Close(Url.Action("Home", "Index")))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowButtonsBuilder.Maximize">
            <summary>
            Configures the window to show a minimize button
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .Buttons(buttons => buttons.Maximize())
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowButtonsBuilder.Maximize(System.String)">
            <summary>
            Configures the window to show a minimize button and sets a fallback URL for environments where JavaScript is turned off.
            </summary>
            <param name="url">The fallback URL</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .Buttons(buttons => buttons.Maximize(Url.Action("Home", "Index")))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowButtonsBuilder.Refresh">
            <summary>
            Configures the window to show a refresh button
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .Buttons(buttons => buttons.Refresh())
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowButtonsBuilder.Refresh(System.String)">
            <summary>
            Configures the window to show a refresh button and sets a fallback URL for environments where JavaScript is turned off.
            </summary>
            <param name="url">The fallback URL</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .Buttons(buttons => buttons.Refresh(Url.Action("Home", "Index")))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowButtonsBuilder.Clear">
            <summary>
            Configures the window to show no buttons in its titlebar.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .Buttons(buttons => buttons.Clear())
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="P:Telerik.Web.Mvc.UI.Window.ClientEvents"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.#ctor(Telerik.Web.Mvc.UI.WindowClientEvents,System.Web.Mvc.ViewContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder"/> class.
            </summary>
            <param name="clientEvents">The client events.</param>
            <param name="viewContext">The view context.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnLoad(System.Action)">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadAction">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Window()
                       .Name("Window")
                       .ClientEvents(events => events.OnLoad(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnLoad(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnLoad client-side event
            </summary>
            <param name="onLoadAction">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Window()
                       .Name("Window")
                       .ClientEvents(events => events.OnLoad(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnLoad(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnLoad client-side event.
            </summary>
            <param name="onLoadHandlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .ClientEvents(events => events.OnLoad("onLoad"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnOpen(System.Action)">
            <summary>
            Defines the inline handler of the OnOpen client-side event
            </summary>
            <param name="javaScript">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Window()
                       .Name("Window")
                       .ClientEvents(events => events.OnOpen(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnOpen(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnOpen client-side event
            </summary>
            <param name="javaScript">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Window()
                       .Name("Window")
                       .ClientEvents(events => events.OnOpen(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnOpen(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnOpen client-side event.
            </summary>
            <param name="handlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .ClientEvents(events => events.OnOpen("onOpen"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnActivate(System.Action)">
            <summary>
            Defines the inline handler of the OnActivate client-side event
            </summary>
            <param name="javaScript">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Window()
                       .Name("Window")
                       .ClientEvents(events => events.OnActivate(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnActivate(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnActivate client-side event
            </summary>
            <param name="javaScript">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Window()
                       .Name("Window")
                       .ClientEvents(events => events.OnActivate(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnActivate(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnActivate client-side event.
            </summary>
            <param name="handlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .ClientEvents(events => events.OnActivate("onActivate"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnClose(System.Action)">
            <summary>
            Defines the inline handler of the OnClose client-side event
            </summary>
            <param name="javaScript">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Window()
                       .Name("Window")
                       .ClientEvents(events => events.OnClose(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnClose(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnClose client-side event
            </summary>
            <param name="javaScript">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Window()
                       .Name("Window")
                       .ClientEvents(events => events.OnClose(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnClose(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnClose client-side event.
            </summary>
            <param name="handlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .ClientEvents(events => events.OnClose("onClose"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnMove(System.Action)">
            <summary>
            Defines the inline handler of the OnMove client-side event
            </summary>
            <param name="javaScript">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Window()
                       .Name("Window")
                       .ClientEvents(events => events.OnMove(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnMove(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnMove client-side event
            </summary>
            <param name="javaScript">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Window()
                       .Name("Window")
                       .ClientEvents(events => events.OnMove(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnMove(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnMove client-side event.
            </summary>
            <param name="handlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .ClientEvents(events => events.OnMove("onMove"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnResize(System.Action)">
            <summary>
            Defines the inline handler of the OnResize client-side event
            </summary>
            <param name="javaScript">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Window()
                       .Name("Window")
                       .ClientEvents(events => events.OnResize(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnResize(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnResize client-side event
            </summary>
            <param name="javaScript">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Window()
                       .Name("Window")
                       .ClientEvents(events => events.OnResize(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnResize(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnResize client-side event.
            </summary>
            <param name="handlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .ClientEvents(events => events.OnResize("onResize"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnRefresh(System.Action)">
            <summary>
            Defines the inline handler of the OnRefresh client-side event
            </summary>
            <param name="javaScript">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Window()
                       .Name("Window")
                       .ClientEvents(events => events.OnRefresh(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnRefresh(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnRefresh client-side event
            </summary>
            <param name="javaScript">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Window()
                       .Name("Window")
                       .ClientEvents(events => events.OnRefresh(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnRefresh(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnRefresh client-side event.
            </summary>
            <param name="handlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .ClientEvents(events => events.OnRefresh("onRefresh"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnError(System.Action)">
            <summary>
            Defines the inline handler of the OnError client-side event
            </summary>
            <param name="javaScript">The action defining the inline handler.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Window()
                       .Name("Window")
                       .ClientEvents(events => events.OnError(() =>
                       {
                            %&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;%
                       }))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnError(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler of the OnError client-side event
            </summary>
            <param name="javaScript">The handler code wrapped in a text tag (Razor syntax).</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Window()
                       .Name("Window")
                       .ClientEvents(events => events.OnError(
                            @&lt;text&gt;
                            function(e) {
                                //event handling code
                            }
                            &lt;/text&gt;
                       ))
                       .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder.OnError(System.String)">
            <summary>
             Defines the name of the JavaScript function that will handle the the OnError client-side event.
            </summary>
            <param name="handlerName">The name of the JavaScript function that will handle the event.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .ClientEvents(events => events.OnError("onError"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.Icon(System.String)">
            <summary>
            Sets path to the icon.
            </summary>
            <param name="icon">Path to the icon.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .Icon(Url.Content("~/Content/Icons/WindowIcon.png"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.Icon(System.String,System.String)">
            <summary>
            Sets path and alternative text to the icon.
            </summary>
            <param name="icon">Path to the icon.</param>
            <param name="iconAlternativeText">Alternative text to the icon.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .Icon(Url.Content("~/Content/Icons/WindowIcon.png"), "icon")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.Title(System.String)">
            <summary>
            Sets title, which appears in the header of the window.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.Content(System.Action)">
            <summary>
            Sets the HTML content which the window should display.
            </summary>
            <param name="value">The action which renders the content.</param>
            <example>
            <code lang="CS">
             &lt;% Html.Telerik().Window()
                       .Name("Window")
                       .Content(() => 
                       { 
                          %&gt;
                                &lt;strong&gt; First Item Content&lt;/strong&gt;
                          &lt;% 
                       })
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.Content(System.Func{System.Object,System.Object})">
            <summary>
            Sets the HTML content which the window should display
            </summary>
            <param name="value">The Razor inline template</param>
            <example>
            <code lang="CS">
             @(Html.Telerik().Window()
                       .Name("Window")
                       .Content(@&lt;strong&gt; Hello World!!!&lt;/strong&gt;))
            </code>        
            </example>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.Content(System.String)">
            <summary>
            Sets the HTML content which the item should display as a string.
            </summary>
            <param name="value">The action which renders the content.</param>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .Content("&lt;strong&gt; First Item Content&lt;/strong&gt;")
            %&gt;
            </code>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.ContentHtmlAttributes(System.Object)">
            <summary>
            Sets the HTML attributes of the content element of the item.
            </summary>
            <param name="attributes">The attributes.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .Content(() => { %&gt; &lt;strong&gt;First Item Content&lt;/strong&gt; &lt;% })
                        .ContentHtmlAttributes(new {@class="first-item-content"})
            %&gt;
            </code>
            </example>        
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.ContentHtmlAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the HTML attributes of the content element of the item.
            </summary>
            <param name="attributes">The attributes.</param>    
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.LoadContentFrom(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Sets the Url, which will be requested to return the content. 
            </summary>
            <param name="routeValues">The route values of the Action method.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                    .Name("Window")
                    .LoadContentFrom(MVC.Home.Index().GetRouteValueDictionary());
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.LoadContentFrom(System.String,System.String)">
            <summary>
            Sets the Url, which will be requested to return the content. 
            </summary>
            <param name="actionName">The action name.</param>
            <param name="controllerName">The controller name.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .LoadContentFrom("AjaxView_OpenSource", "Window")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.LoadContentFrom(System.String,System.String,System.Object)">
            <summary>
            Sets the Url, which will be requested to return the content.
            </summary>
            <param name="actionName">The action name.</param>
            <param name="controllerName">The controller name.</param>
            <param name="routeValues">Route values.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .LoadContentFrom("AjaxView_OpenSource", "Window", new { id = 10})
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.LoadContentFrom(System.String)">
            <summary>
            Sets the Url, which will be requested to return the content.
            </summary>
            <param name="value">The url.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .LoadContentFrom(Url.Action("AjaxView_OpenSource", "Window"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.ClientEvents(System.Action{Telerik.Web.Mvc.UI.Fluent.WindowClientEventsBuilder})">
            <summary>
            Configures the client-side events.
            </summary>
            <param name="clientEventsAction">The client events action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .ClientEvents(events =>
                            events.OnOpen("onOpen").OnClose("onClose")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.Resizable">
            <summary>
            Enables windows resizing.
            </summary>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .Resizable()
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.Resizable(System.Action{Telerik.Web.Mvc.UI.Fluent.WindowResizingSettingsBuilder})">
            <summary>
            Configures the resizing ability of the window.
            </summary>
            <param name="resizingSettingsAction">Resizing settings action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .Resizable(settings =>
                            settings.Enabled(true).MaxHeight(500).MaxWidth(500)
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.Buttons(System.Action{Telerik.Web.Mvc.UI.Fluent.WindowButtonsBuilder})">
            <summary>
            Configures the client-side events.
            </summary>
            <param name="clientEventsAction">The client events action.</param>
            <example>
            <code lang="CS">
             &lt;%= Html.Telerik().Window()
                        .Name("Window")
                        .ClientEvents(events =>
                            events.OnOpen("onOpen").OnClose("onClose")
                        )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.Width(System.Int32)">
            <summary>
            Sets the width of the window.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.Height(System.Int32)">
            <summary>
            Sets the height of the window.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.Visible(System.Boolean)">
            <summary>
            Sets whether the window should be rendered visible.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.Scrollable(System.Boolean)">
            <summary>
            Sets whether the window should have scrollbars.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.Effects(System.Action{Telerik.Web.Mvc.UI.Fluent.WindowEffectsBuilder})">
            <summary>
            Configures the effects of the window.
            </summary>
            <param name="effectsAction">The action which configures the effects.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().Window()
                       .Name("Window")
                       .Effects(fx =>
                       {
            	            fx.Zoom()
            		          .Opacity()
            				  .OpenDuration(AnimationDuration.Fast)
            				  .CloseDuration(AnimationDuration.Fast);
                       })
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.Modal(System.Boolean)">
            <summary>
            Sets whether the window should be modal or not.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.Fluent.WindowBuilder.Draggable(System.Boolean)">
            <summary>
            Sets whether the window can be moved.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.SharedWebAssetGroupBuilder">
            <summary>
            Builder class for fluently configuring the shared group.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.SharedWebAssetGroupBuilder.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,Telerik.Web.Mvc.WebAssetGroup})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.SharedWebAssetGroupBuilder"/> class.
            </summary>
            <param name="defaultPath">The default path.</param>
            <param name="assets">The assets.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.SharedWebAssetGroupBuilder.AddGroup(System.String,System.Action{Telerik.Web.Mvc.UI.WebAssetGroupBuilder})">
            <summary>
            Adds the group.
            </summary>
            <param name="name">The name.</param>
            <param name="configureAction">The configure action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.SharedWebAssetGroupBuilder.GetGroup(System.String,System.Action{Telerik.Web.Mvc.UI.WebAssetGroupBuilder})">
            <summary>
            Gets the group.
            </summary>
            <param name="name">The name.</param>
            <param name="configureAction">The configure action.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.SharedWebAssets">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.SharedWebAssets.StyleSheets(System.Action{Telerik.Web.Mvc.SharedWebAssetGroupBuilder})">
            <summary>
            Executes the provided delegate that is used to configure stylesheets.
            </summary>
            <param name="configureAction">The configure action.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.SharedWebAssets.Scripts(System.Action{Telerik.Web.Mvc.SharedWebAssetGroupBuilder})">
            <summary>
            Executes the provided delegate that is used to configure scripts.
            </summary>
            <param name="configureAction">The configure action.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.Configuration.WebAssetConfigurationSection">
            <summary>
            The web asset Configuration.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Configuration.WebAssetConfigurationSection.SectionName">
            <summary>
            Gets the name of the section.
            </summary>
            <value>The name of the section.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Configuration.WebAssetConfigurationSection.UseTelerikContentDeliveryNetwork">
            <summary>
            Gets or sets a value indicating whether to use telerik content delivery network.
            </summary>
            <value>
            <c>true</c> if [use telerik content delivery network]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.Configuration.WebAssetConfigurationSection.StyleSheets">
            <summary>
            Gets the style sheets.
            </summary>
            <value>The style sheets.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Configuration.WebAssetConfigurationSection.Scripts">
            <summary>
            Gets the scripts.
            </summary>
            <value>The scripts.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.Configuration.WebAssetConfigurationElement">
            <summary>
            Web asset item configuration element.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Configuration.WebAssetConfigurationElement.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.Configuration.WebAssetConfigurationElementCollection">
            <summary>
            Web asset item configuration collection.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Configuration.WebAssetConfigurationElementCollection.Add(Telerik.Web.Mvc.Configuration.WebAssetConfigurationElement)">
            <summary>
            Adds the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.Configuration.WebAssetConfigurationElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Telerik.Web.Mvc.Configuration.WebAssetConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="P:Telerik.Web.Mvc.Configuration.WebAssetConfigurationElementCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Telerik.Web.Mvc.Configuration.WebAssetConfigurationElement"/> with the specified source.
            </summary>
            <value></value>
        </member>
        <member name="T:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElement">
            <summary>
            Web asset group configuration element.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElement.DefaultPath">
            <summary>
            Gets or sets the default path.
            </summary>
            <value>The default path.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElement.UseTelerikContentDeliveryNetwork">
            <summary>
            Gets or sets a value indicating whether to use telerik content delivery network.
            </summary>
            <value>
            <c>true</c> if [use telerik content delivery network]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElement.ContentDeliveryNetworkUrl">
            <summary>
            Gets or sets the content delivery network URL.
            </summary>
            <value>The content delivery network URL.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElement.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElement"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElement.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElement.Compress">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElement"/> is compress.
            </summary>
            <value><c>true</c> if compress; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElement.CacheDurationInDays">
            <summary>
            Gets or sets the cache duration in days.
            </summary>
            <value>The cache duration in days.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElement.Combined">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElement"/> is combined.
            </summary>
            <value><c>true</c> if combined; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElement.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElementCollection">
            <summary>
            Web asset group configuration collection 
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElementCollection.Add(Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElement)">
            <summary>
            Adds the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="P:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElementCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Telerik.Web.Mvc.Configuration.WebAssetGroupConfigurationElement"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="T:Telerik.Web.Mvc.WebAssetHttpHandler">
            <summary>
            The HttpHandler to compress, cache and combine web assets.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.WebAssetHttpHandler.#ctor(Telerik.Web.Mvc.Infrastructure.IWebAssetGroupReader,Telerik.Web.Mvc.Infrastructure.IHttpResponseCompressor,Telerik.Web.Mvc.Infrastructure.IHttpResponseCacher)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.WebAssetHttpHandler"/> class.
            </summary>
            <param name="assetRegistry">The asset registry.</param>
            <param name="httpResponseCompressor">The HTTP response compressor.</param>
            <param name="httpResponseCacher">The HTTP response cacher.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.WebAssetHttpHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.WebAssetHttpHandler"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.WebAssetHttpHandler.ProcessRequest(System.Web.HttpContextBase)">
            <summary>
            Enables a WebAssetHttpHandler object to process of requests.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetHttpHandler.DefaultPath">
            <summary>
            Gets or sets the default path of the asset.
            </summary>
            <value>The default path.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetHttpHandler.IdParameterName">
            <summary>
            Gets or sets the name of the id parameter.
            </summary>
            <value>The name of the id parameter.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.WebAssetDefaultSettings">
            <summary>
            Contains default asset settings.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetDefaultSettings.StyleSheetFilesPath">
            <summary>
            Gets or sets the style sheet files path. Path must be a virtual path.
            </summary>
            <value>The style sheet files path.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetDefaultSettings.ScriptFilesPath">
            <summary>
            Gets or sets the script files path. Path must be a virtual path.
            </summary>
            <value>The script files path.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetDefaultSettings.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetDefaultSettings.Compress">
            <summary>
            Gets or sets a value indicating whether assets should be served as compressed.
            </summary>
            <value><c>true</c> if compress; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetDefaultSettings.Combined">
            <summary>
            Gets or sets a value indicating whether assets shoule be combined.
            </summary>
            <value><c>true</c> if combined; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetDefaultSettings.CacheDurationInDays">
            <summary>
            Gets or sets the cache duration in days.
            </summary>
            <value>The cache duration in days.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetDefaultSettings.UseTelerikContentDeliveryNetwork">
            <summary>
            Gets or sets a value indicating whether [use telerik content delivery network].
            </summary>
            <value>
            <c>true</c> if [use telerik content delivery network]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Web.Mvc.Infrastructure.IPathResolver">
            <summary>
            Defines members that a class must implement in order to provide helper methods for resolving virtual path.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.IPathResolver.Resolve(System.String)">
            <summary>
            Returns the physical path for the specified virtual path.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.Infrastructure.IHttpResponseCompressor">
            <summary>
            Defines members that a class must implement in order to compress the response.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.IHttpResponseCompressor.Compress(System.Web.HttpContextBase)">
            <summary>
            Compresses the response.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.Infrastructure.IHttpResponseCacher">
            <summary>
            Defines members that must be implemented for cache the http response
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.IHttpResponseCacher.Cache(System.Web.HttpContextBase,System.TimeSpan)">
            <summary>
            Caches the response for the specified duration.
            </summary>
            <param name="context">The context.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.Infrastructure.IConfigurationManager">
            <summary>
            Defines the read operaations of configuration.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.IConfigurationManager.GetSection``1(System.String)">
            <summary>
            Gets the section with the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sectionName">Name of the section.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ClientSideObjectWriterFactory">
            <summary>
            Defines the factory to create <see cref="T:Telerik.Web.Mvc.UI.IClientSideObjectWriter"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriterFactory.Create(System.String,System.String,System.IO.TextWriter)">
            <summary>
            Creates a writer.
            </summary>
            <param name="id">The id.</param>
            <param name="type">The type.</param>
            <param name="textWriter">The text writer.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ClientSideEnumValueAttribute">
            <summary>
            Provides an attribute to change the enum value for client side.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideEnumValueAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ClientSideEnumValueAttribute"/> class with the specified value for the client side.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ClientSideEnumValueAttribute.Value">
            <summary>
            Gets or sets the value for client side.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.Infrastructure.Implementation.ConfigurationManagerWrapper">
            <summary>
            Encapsulates the ConfigurationManager object that contains methods for accessing System.Web.HttpRuntime.Cache object.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.ConfigurationManagerWrapper.GetSection``1(System.String)">
            <summary>
            Gets the section with the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sectionName">Name of the section.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.Extensions.DictionaryExtensions">
            <summary>
            Contains extension methods of IDictionary&lt;string, objectT&gt;.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.DictionaryExtensions.Merge(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object,System.Boolean)">
            <summary>
            Merges the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="replaceExisting">if set to <c>true</c> [replace existing].</param>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.DictionaryExtensions.AppendInValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Object)">
            <summary>
            Appends the in value.
            </summary>
            <param name="instance">The instance.</param>
            <param name="key">The key.</param>
            <param name="separator">The separator.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.DictionaryExtensions.PrependInValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Object)">
            <summary>
            Appends the specified value at the beginning of the existing value
            </summary>
            <param name="instance"></param>
            <param name="key"></param>
            <param name="separator"></param>
            <param name="value"></param>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.DictionaryExtensions.ToAttributeString(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Toes the attribute string.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.DictionaryExtensions.Merge(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Merges the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="from">From.</param>
            <param name="replaceExisting">if set to <c>true</c> [replace existing].</param>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.DictionaryExtensions.Merge(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Merges the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="from">From.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.DictionaryExtensions.Merge(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.Boolean)">
            <summary>
            Merges the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="values">The values.</param>
            <param name="replaceExisting">if set to <c>true</c> [replace existing].</param>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.DictionaryExtensions.Merge(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
            <summary>
            Merges the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="values">The values.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.Extensions.HttpContextBaseExtensions">
            <summary>
            Contains extension methods of <see cref="T:System.Web.HttpContextBase"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.HttpContextBaseExtensions.RequestContext(System.Web.HttpContextBase)">
            <summary>
            Requests the context.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.HttpContextBaseExtensions.IsMono(System.Web.HttpContextBase)">
            <summary>
            Gets a value indicating whether we're running under Mono.
            </summary>
            <value><c>true</c> if Mono; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.HttpContextBaseExtensions.IsLinux(System.Web.HttpContextBase)">
            <summary>
            Gets a value indicating whether we're running under Linux or a Unix variant.
            </summary>
            <value><c>true</c> if Linux/Unix; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.Infrastructure.Implementation.HttpResponseCompressor">
            <summary>
            Encapsulates the HTTP intrinsic object that compress the response
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.HttpResponseCompressor.Compress(System.Web.HttpContextBase)">
            <summary>
            Compresses the response.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.Infrastructure.Implementation.PathResolver">
            <summary>
            Class use to resolve physical path for virtual path.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.PathResolver.Resolve(System.String)">
            <summary>
            Returns the physical path for the specified virtual path.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.Infrastructure.Guard">
            <summary>
            Helper class for argument validation.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Guard.IsNotNull(System.Object,System.String)">
            <summary>
            Ensures the specified argument is not null.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Guard.IsNotNullOrEmpty(System.String,System.String)">
            <summary>
            Ensures the specified string is not blank.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Guard.IsNotNullOrEmpty``1(``0[],System.String)">
            <summary>
            Ensures the specified array is not null or empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Guard.IsNotNullOrEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Ensures the specified collection is not null or empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Guard.IsNotZeroOrNegative(System.Int32,System.String)">
            <summary>
            Ensures the specified value is a positive integer.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Guard.IsNotNegative(System.Int32,System.String)">
            <summary>
            Ensures the specified value is not a negative integer.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Guard.IsNotNegative(System.Single,System.String)">
            <summary>
            Ensures the specified value is not a negative float.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Guard.IsNotVirtualPath(System.String,System.String)">
            <summary>
            Ensures the specified path is a virtual path which starts with ~/.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.Extensions.ReaderWriterLockSlimExtensions">
            <summary>
            Contains extension methods of <see cref="T:System.Threading.ReaderWriterLockSlim"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.ReaderWriterLockSlimExtensions.ReadAndWrite(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Starts thread safe read write code block.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.ReaderWriterLockSlimExtensions.Read(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Starts thread safe read code block.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.ReaderWriterLockSlimExtensions.Write(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Starts thread safe write code block.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.Extensions.StringExtensions">
            <summary>
            Contains the extension methods of <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified System.String with the text equivalent of the value of a corresponding System.Object instance in a specified array.
            </summary>
            <param name="instance">A string to format.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
            <returns>A copy of format in which the format items have been replaced by the System.String equivalent of the corresponding instances of System.Object in args.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.StringExtensions.IsCaseSensitiveEqual(System.String,System.String)">
            <summary>
            Determines whether this instance and another specified System.String object have the same value.
            </summary>
            <param name="instance">The string to check equality.</param>
            <param name="comparing">The comparing with string.</param>
            <returns>
            <c>true</c> if the value of the comparing parameter is the same as this string; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.StringExtensions.IsCaseInsensitiveEqual(System.String,System.String)">
            <summary>
            Determines whether this instance and another specified System.String object have the same value.
            </summary>
            <param name="instance">The string to check equality.</param>
            <param name="comparing">The comparing with string.</param>
            <returns>
            <c>true</c> if the value of the comparing parameter is the same as this string; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.StringExtensions.Compress(System.String)">
            <summary>
            Compresses the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.Extensions.StringExtensions.Decompress(System.String)">
            <summary>
            Decompresses the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.Resources.TextResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.ArrayCannotBeEmpty">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; array cannot be empty..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.BatchUpdatesRequireInCellMode">
            <summary>
              Looks up a localized string similar to You must use InCell edit mode for batch updates..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.BatchUpdatesRequireUpdate">
            <summary>
              Looks up a localized string similar to The Update data binding setting is required for batch updates. Please specify the Update action or url in the DataBinding configuration..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.CannotBeNegative">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; cannot be negative..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.CannotBeNegativeOrZero">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; cannot be negative or zero..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.CannotBeNull">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; cannot be null..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.CannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; cannot be null or empty..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.CannotFindPropertyToSortBy">
            <summary>
              Looks up a localized string similar to Cannot find a public property of primitive type to sort by..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.CannotHaveMoreOneColumnInOrderWhenSortModeIsSetToSingleColumn">
            <summary>
              Looks up a localized string similar to Cannot have more one column in order when sort mode is set to single column..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.CannotRouteToClassNamedController">
            <summary>
              Looks up a localized string similar to Cannot route to class named &apos;Controller&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.CannotUseAjaxAndWebServiceAtTheSameTime">
            <summary>
              Looks up a localized string similar to Cannot use Ajax and WebService binding at the same time..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.CannotUsePageOnScrollWithServerBinding">
            <summary>
              Looks up a localized string similar to Cannot use PageOnScroll with Server binding..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.CannotUseTemplatesInAjaxOrWebService">
            <summary>
              Looks up a localized string similar to Cannot use only server templates in Ajax or WebService binding mode. Please specify a client template as well..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.CollectionCannotBeEmpty">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; collection cannot be empty..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.ControllerNameAmbiguousWithoutRouteUrl">
             <summary>
               Looks up a localized string similar to Multiple types were found that match the controller named &apos;{0}&apos;. This can happen if the route that services this request does not specify namespaces to search for a controller that matches the request. If this is the case, register this route by calling an overload of the &apos;MapRoute&apos; method that takes a &apos;namespaces&apos; parameter.
            
            The request for &apos;{0}&apos; has found the following matching controllers:{1}.
             </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.ControllerNameAmbiguousWithRouteUrl">
             <summary>
               Looks up a localized string similar to Multiple types were found that match the controller named &apos;{0}&apos;. This can happen if the route that services this request (&apos;{1}&apos;) does not specify namespaces to search for a controller that matches the request. If this is the case, register this route by calling an overload of the &apos;MapRoute&apos; method that takes a &apos;namespaces&apos; parameter.
            
            The request for &apos;{0}&apos; has found the following matching controllers:{2}.
             </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.ControllerNameMustEndWithController">
            <summary>
              Looks up a localized string similar to Controller name must end with &apos;Controller&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.DataKeysEmpty">
            <summary>
              Looks up a localized string similar to The DataKeys collection is empty. Please specify a data key..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.DataTableInLineEditingWithCustomEditorTemplates">
            <summary>
              Looks up a localized string similar to DataTable InLine editing and custom EditorTemplate per column is not supported.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.DeleteCommandRequiresDelete">
            <summary>
              Looks up a localized string similar to The Delete data binding setting is required by the delete command. Please specify the Delete action or url in the DataBinding configuration..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.EditCommandRequiresUpdate">
            <summary>
              Looks up a localized string similar to The Update data binding setting is required by the edit command. Please specify the Update action or url in the DataBinding configuration..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.FirstPropertyShouldNotBeBiggerThenSecondProperty">
            <summary>
              Looks up a localized string similar to {0} should not be bigger then {1}..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.GroupWithSpecifiedNameAlreadyExists">
            <summary>
              Looks up a localized string similar to Group with specified name already exists..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.GroupWithSpecifiedNameAlreadyExistsPleaseSpecifyADifferentName">
            <summary>
              Looks up a localized string similar to Group with specified name &quot;{0}&quot; already exists. Please specify a different name..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.GroupWithSpecifiedNameDoesNotExistInAssetTypeOfSharedWebAssets">
            <summary>
              Looks up a localized string similar to Group with &quot;{0}&quot; does not exist in {1} SharedWebAssets..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.GroupWithSpecifiedNameDoesNotExistPleaseMakeSureYouHaveSpecifiedACorrectName">
            <summary>
              Looks up a localized string similar to Group with specified name &quot;{0}&quot; does not exist. Please make sure you have specified a correct name..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.InCellModeNotSupportedInServerBinding">
            <summary>
              Looks up a localized string similar to InCell editing mode is not supported in server binding mode.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.InCellModeNotSupportedWithRowTemplate">
            <summary>
              Looks up a localized string similar to InCell editing mode is not supported when ClientRowTemplate is used.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.IndexOutOfRange">
            <summary>
              Looks up a localized string similar to Provided index is out of range..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.InsertCommandRequiresInsert">
            <summary>
              Looks up a localized string similar to The Insert data binding setting is required by the insert command. Please specify the Insert action or url in the DataBinding configuration..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.ItemWithSpecifiedSourceAlreadyExists">
            <summary>
              Looks up a localized string similar to Item with specified source already exists..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.LocalGroupWithSpecifiedNameAlreadyExists">
            <summary>
              Looks up a localized string similar to Local group with name &quot;{0}&quot; already exists..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.LocalizationKeyNotFound">
            <summary>
              Looks up a localized string similar to The key with the following name &quot;{0}&quot; was not found. Please update all localization files..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.MemberExpressionRequired">
            <summary>
              Looks up a localized string similar to Bound columns require a field or property access expression..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.MinPropertyMustBeLessThenMaxProperty">
            <summary>
              Looks up a localized string similar to {0} should be less than {1}..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.NameCannotBeBlank">
            <summary>
              Looks up a localized string similar to Name cannot be blank..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.NameCannotContainSpaces">
            <summary>
              Looks up a localized string similar to Name cannot contain spaces..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.NoneIsOnlyUsedForInternalPurpose">
            <summary>
              Looks up a localized string similar to &quot;None&quot; is only used for internal purpose..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.OnlyOneScriptRegistrarIsAllowedInASingleRequest">
            <summary>
              Looks up a localized string similar to Only one ScriptRegistrar is allowed in a single request..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.OnlyOneStyleSheetRegistrarIsAllowedInASingleRequest">
            <summary>
              Looks up a localized string similar to Only one StyleSheetRegistrar is allowed in a single request..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.OnlyPropertyAndFieldExpressionsAreSupported">
            <summary>
              Looks up a localized string similar to Only property and field expressions are supported.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.PagingMustBeEnabledToUsePageOnScroll">
            <summary>
              Looks up a localized string similar to Paging must be enabled to use PageOnScroll..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.PropertyMustBeBiggerThenZero">
            <summary>
              Looks up a localized string similar to The {0} must be begger then 0..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.PropertyMustBePositiveNumber">
            <summary>
              Looks up a localized string similar to {0} must be positive number..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.PropertyShouldBeInRange">
            <summary>
              Looks up a localized string similar to {0} should be bigger than {1} and less then {2}.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.Rtl">
            <summary>
              Looks up a localized string similar to The &quot;{0}&quot; class is no longer supported. To enable RTL support you must include telerik.rtl.css and apply the &quot;t-rtl&quot; class to a parent HTML element or the &lt;body&gt;..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.ScrollingMustBeEnabledToUsePageOnScroll">
            <summary>
              Looks up a localized string similar to Scrolling must be enabled to use PageOnScroll..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.SiteMapShouldBeDefinedInViewData">
            <summary>
              Looks up a localized string similar to You must have SiteMap defined with key &quot;{0}&quot; in ViewData dictionary..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.SourceMustBeAVirtualPathWhichShouldStartsWithTileAndSlash">
            <summary>
              Looks up a localized string similar to Source must be a virtual path which should starts with &quot;~/&quot;.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.SpecifiedFileDoesNotExist">
            <summary>
              Looks up a localized string similar to Specified file does not exist: &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.StringNotCorrectDate">
            <summary>
              Looks up a localized string similar to Passed string cannot be parsed to DateTime object..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.StringNotCorrectTimeSpan">
            <summary>
              Looks up a localized string similar to Passed string cannot be parsed to TimeSpan object..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.TheSpecifiedMethodIsNotAnActionMethod">
            <summary>
              Looks up a localized string similar to The specified method is not an action method..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.TimeOutOfRange">
            <summary>
              Looks up a localized string similar to Time should be bigger than MinTime and less than MaxTime..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.UrlAndContentUrlCannotBeSet">
            <summary>
              Looks up a localized string similar to You cannot set Url and ContentUrl at the same time..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.ValueNotValidForProperty">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.WebServiceUrlRequired">
            <summary>
              Looks up a localized string similar to The Url of the WebService must be set.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.YouCannotAddMoreThanOnceColumnWhenSortModeIsSetToSingle">
            <summary>
              Looks up a localized string similar to You cannot add more than once column when sort mode is set to single column..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.YouCannotCallBindToWithoutCustomBinding">
            <summary>
              Looks up a localized string similar to You cannot use non generic BindTo overload without EnableCustomBinding set to true.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.YouCannotCallRenderMoreThanOnce">
            <summary>
              Looks up a localized string similar to You cannot call render more than once..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.YouCannotCallStartMoreThanOnce">
            <summary>
              Looks up a localized string similar to You cannot call Start more than once..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.YouCannotConfigureASharedWebAssetGroup">
            <summary>
              Looks up a localized string similar to You cannot configure a shared web asset group..
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.Resources.TextResource.YouMustHaveToCallStartPriorCallingThisMethod">
            <summary>
              Looks up a localized string similar to You must have to call Start prior calling this method..
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.WebAssetCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.WebAssetCollection"/> class.
            </summary>
            <param name="defaultPath">The default path.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.WebAssetCollection.FindGroupByName(System.String)">
            <summary>
            Finds the group with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.WebAssetCollection.FindItemBySource(System.String)">
            <summary>
            Finds the item with the specified source.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.WebAssetCollection.Add(System.String)">
            <summary>
            Adds the specified source as <see cref="T:Telerik.Web.Mvc.WebAsset"/>.
            </summary>
            <param name="itemSource">The item source.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.WebAssetCollection.Add(System.String,System.String)">
            <summary>
            Adds the specified source as <see cref="T:Telerik.Web.Mvc.WebAsset"/> in the specified <see cref="T:Telerik.Web.Mvc.WebAssetGroup"/>.
            </summary>
            <param name="groupName">Name of the group.</param>
            <param name="itemSource">The item source.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.WebAssetCollection.Insert(System.Int32,System.String)">
            <summary>
            Inserts the specified source as <see cref="T:Telerik.Web.Mvc.WebAsset"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="itemSource">The item source.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.WebAssetCollection.Insert(System.Int32,System.String,System.String)">
            <summary>
            Inserts the specified source as <see cref="T:Telerik.Web.Mvc.WebAsset"/> at the specified index in the specified <see cref="T:Telerik.Web.Mvc.WebAssetGroup"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="groupName">Name of the group.</param>
            <param name="itemSource">The item source.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.WebAssetCollection.InsertItem(System.Int32,Telerik.Web.Mvc.IWebAsset)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Telerik.Web.Mvc.WebAssetCollection.SetItem(System.Int32,Telerik.Web.Mvc.IWebAsset)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetCollection.DefaultPath">
            <summary>
            Gets or sets the default path.
            </summary>
            <value>The default path.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetCollection.AssetGroups">
            <summary>
            Gets the asset groups.
            </summary>
            <value>The asset groups.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetCollection.AssetItems">
            <summary>
            Gets the asset items.
            </summary>
            <value>The asset items.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.WebAssetCollectionBuilder">
            <summary>
            Defines the fluent interface for configuring web assets.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.WebAssetCollectionBuilder.#ctor(Telerik.Web.Mvc.WebAssetType,Telerik.Web.Mvc.WebAssetCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.WebAssetCollectionBuilder"/> class.
            </summary>
            <param name="assetType">Type of the asset.</param>
            <param name="assets">The assets.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.WebAssetCollectionBuilder.op_Implicit(Telerik.Web.Mvc.UI.WebAssetCollectionBuilder)~Telerik.Web.Mvc.WebAssetCollection">
            <summary>
            Performs an implicit conversion from <see cref="T:Telerik.Web.Mvc.UI.WebAssetCollectionBuilder"/> to <see cref="!:Telerik.Web.Mvc.UI.WebAssetCollection"/>.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.WebAssetCollectionBuilder.ToCollection">
            <summary>
            Returns the internal collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.WebAssetCollectionBuilder.Add(System.String)">
            <summary>
            Adds a new web asset
            </summary>
            <param name="source">The source.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().ScriptRegistrar()
                       .Scripts(scripts => scripts.Add("script1.js"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.WebAssetCollectionBuilder.AddGroup(System.String,System.Action{Telerik.Web.Mvc.UI.WebAssetGroupBuilder})">
            <summary>
            Adds a new web asset group.
            </summary>
            <param name="name">The name.</param>
            <param name="configureAction">The configure action.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().ScriptRegistrar()
                       .Scripts(scripts => scripts.AddGroup("Group1", group => 
                            {
                                group.Add("script1.js");
                            }
                       ))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.WebAssetCollectionBuilder.AddSharedGroup(System.String)">
            <summary>
            Adds the specified shared group.
            </summary>
            <param name="name">The name.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().ScriptRegistrar()
                       .Scripts(scripts => scripts.AddShareGroup("SharedGroup1"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.WebAssetCollectionBuilder.GetGroup(System.String,System.Action{Telerik.Web.Mvc.UI.WebAssetGroupBuilder})">
            <summary>
            Executes the provided delegate that is used to configure the group fluently.
            </summary>
            <param name="name">The name.</param>
            <param name="configureAction">The configure action.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.WebAssetGroup.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.WebAssetGroup"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="isShared">if set to <c>true</c> [is shared].</param>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetGroup.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetGroup.IsShared">
            <summary>
            Gets or sets a value indicating whether this instance is shared.
            </summary>
            <value><c>true</c> if this instance is shared; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetGroup.DefaultPath">
            <summary>
            Gets or sets the default path.
            </summary>
            <value>The default path.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetGroup.UseTelerikContentDeliveryNetwork">
            <summary>
            Gets or sets a value indicating whether Telerik content delivery network would be used.
            </summary>
            <value>
            <c>true</c> if [use Telerik content delivery network]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetGroup.ContentDeliveryNetworkUrl">
            <summary>
            Gets or sets the content delivery network URL.
            </summary>
            <value>The content delivery network URL.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetGroup.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Web.Mvc.WebAssetGroup"/> is disabled.
            </summary>
            <value><c>true</c> if disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetGroup.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetGroup.Compress">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Web.Mvc.WebAssetGroup"/> is compress.
            </summary>
            <value><c>true</c> if compress; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetGroup.CacheDurationInDays">
            <summary>
            Gets or sets the cache duration in days.
            </summary>
            <value>The cache duration in days.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetGroup.Combined">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Web.Mvc.WebAssetGroup"/> is combined.
            </summary>
            <value><c>true</c> if combined; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.WebAssetGroup.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ClientSideObjectWriter">
            <summary>
            Class used to build initialization script of jQuery plugin.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.#ctor(System.String,System.String,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ClientSideObjectWriter"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="type">The type.</param>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.Start">
            <summary>
            Starts writing this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.Append(System.String)">
            <summary>
            Appends the specified key value pair to the end of this instance.
            </summary>
            <param name="keyValuePair">The key value pair.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.Append(System.String,System.String)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.AppendNullableString(System.String,System.String)">
            <summary>
            Appends the specified name and nullable value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.Append(System.String,System.Int32)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.Append(System.String,System.Int32,System.Int32)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.Append(System.String,System.Nullable{System.Int32})">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.Append(System.String,System.Double)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.Append(System.String,System.Nullable{System.Double})">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.Append(System.String,System.Decimal)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.Append(System.String,System.Nullable{System.Decimal})">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.Append(System.String,System.Boolean)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.Append(System.String,System.Boolean,System.Boolean)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">if set to <c>true</c> [value].</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.AppendDateOnly(System.String,System.DateTime)">
            <summary>
            Appends the specified name and only the date of the passed <seealso cref="T:System.DateTime"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.AppendDateOnly(System.String,System.Nullable{System.DateTime})">
            <summary>
            Appends the specified name and only the date of the passed <seealso cref="T:System.DateTime"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.AppendDatesOnly(System.String,System.Collections.Generic.IEnumerable{System.DateTime})" -->
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.Append(System.String,System.DateTime)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.Append(System.String,System.Nullable{System.DateTime})">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.Append(System.String,System.Action)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.Append(System.String,System.Func{System.Object,System.Object})">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <param name="name">The name.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.Append``1(System.String,``0)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.Append``1(System.String,``0,``0)">
            <summary>
            Appends the specified name and value to the end of this instance.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.AppendClientEvent(System.String,Telerik.Web.Mvc.UI.ClientEvent)" -->
        <member name="M:Telerik.Web.Mvc.UI.ClientSideObjectWriter.Complete">
            <summary>
            Completes this instance.
            </summary>
        </member>
        <member name="T:Telerik.Web.Mvc.Infrastructure.IUrlResolver">
            <summary>
            Defines members that a class must implement in order to provide helper methods for resolving relative path.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.IUrlResolver.Resolve(System.String)">
            <summary>
            Returns the relative path for the specified virtual path.
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.HtmlHelperExtension">
            <summary>
            HTMLHelper extension for providing access to <see cref="T:Telerik.Web.Mvc.UI.ViewComponentFactory"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.HtmlHelperExtension.Telerik(System.Web.Mvc.HtmlHelper)">
            <summary>
            Gets the Telerik View Component Factory
            </summary>
            <param name="helper">The helper.</param>
            <returns>The Factory</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.HtmlHelperExtension.Telerik``1(System.Web.Mvc.HtmlHelper{``0})">
            <summary>
            Gets the Telerik View Component Factory
            </summary>
            <param name="helper">The helper.</param>
            <returns>The Factory</returns>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.IScriptableComponentContainer">
            <summary>
            Container of scriptable component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.IScriptableComponentContainer.Register(Telerik.Web.Mvc.UI.IScriptableComponent)">
            <summary>
            Registers the specified component.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ScriptWrapperBase">
            <summary>
            Defines members that a class must implement in order to act as wrapper for script,
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptWrapperBase.OnPageLoadStart">
            <summary>
            Gets the on page load start.
            </summary>
            <value>The on page load start.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptWrapperBase.OnPageLoadEnd">
            <summary>
            Gets the on page load end.
            </summary>
            <value>The on page load end.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptWrapperBase.OnPageUnloadStart">
            <summary>
            Gets the on page unload start.
            </summary>
            <value>The on page unload start.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptWrapperBase.OnPageUnloadEnd">
            <summary>
            Gets the on page unload end.
            </summary>
            <value>The on page unload end.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.StyleSheetRegistrarBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.StyleSheetRegistrar"/> component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.StyleSheetRegistrarBuilder.#ctor(Telerik.Web.Mvc.UI.StyleSheetRegistrar)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.StyleSheetRegistrarBuilder"/> class.
            </summary>
            <param name="styleSheetRegistrar">The style sheet registrar.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.StyleSheetRegistrarBuilder.op_Implicit(Telerik.Web.Mvc.UI.StyleSheetRegistrarBuilder)~Telerik.Web.Mvc.UI.StyleSheetRegistrar">
            <summary>
            Performs an implicit conversion from <see cref="T:Telerik.Web.Mvc.UI.StyleSheetRegistrarBuilder"/> to <see cref="T:Telerik.Web.Mvc.UI.StyleSheetRegistrar"/>.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.StyleSheetRegistrarBuilder.ToRegistrar">
            <summary>
            Returns the internal style sheet registrar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.StyleSheetRegistrarBuilder.AssetHandlerPath(System.String)">
            <summary>
            Sets the asset handler path. Path must be a virtual path.
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().StyleSheetRegistrar()
                       .AssetHandlerPath("~/asset.axd")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.StyleSheetRegistrarBuilder.DefaultGroup(System.Action{Telerik.Web.Mvc.UI.WebAssetGroupBuilder})">
            <summary>
            Configures the <see cref="P:Telerik.Web.Mvc.UI.StyleSheetRegistrar.DefaultGroup"/>.
            </summary>
            <param name="configureAction">The configure action.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().StyleSheetRegistrar()
                       .DefaultGroup(group =&gt; group
                            .Add("style1.css")
                            .Add("style2.css")
                            .Combined(true)
                       )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.StyleSheetRegistrarBuilder.StyleSheets(System.Action{Telerik.Web.Mvc.UI.WebAssetCollectionBuilder})">
            <summary>
            Executes the provided delegate that is used to register the stylesheet files fluently.
            </summary>
            <param name="configureAction">The configure action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.StyleSheetRegistrarBuilder.Render">
            <summary>
            Renders the <see cref="T:Telerik.Web.Mvc.UI.StyleSheetRegistrar"/>
            </summary>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().StyleSheetRegistrar()
                      .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.StyleSheetRegistrar">
            <summary>
            Manages ASP.NET MVC views style sheet files.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.StyleSheetRegistrar.Key">
            <summary>
            Used to ensure that the same instance is used for the same HttpContext.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.StyleSheetRegistrar.#ctor(Telerik.Web.Mvc.WebAssetCollection,System.Web.Mvc.ViewContext,Telerik.Web.Mvc.Infrastructure.IWebAssetCollectionResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.StyleSheetRegistrar"/> class.
            </summary>
            <param name="styleSheets">The style sheets.</param>
            <param name="viewContext">The view context.</param>
            <param name="assetItemMerger">The asset merger.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.StyleSheetRegistrar.Render">
            <summary>
            Writes the stylesheets in the response.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.StyleSheetRegistrar.Write(System.IO.TextWriter)">
            <summary>
            Writes all stylesheet source.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.StyleSheetRegistrar.AssetHandlerPath">
            <summary>
            Gets or sets the asset handler path. Path must be a virtual path. The default value is set to WebAssetHttpHandler.DefaultPath.
            </summary>
            <value>The asset handler path.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.StyleSheetRegistrar.DefaultGroup">
            <summary>
            Gets or sets the default group.
            </summary>
            <value>The default group.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.StyleSheetRegistrar.StyleSheets">
            <summary>
            Gets the stylesheets that will be rendered in the view.
            </summary>
            <value>The style sheets.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.StyleSheetRegistrar.ViewContext">
            <summary>
            Gets or sets the view context.
            </summary>
            <value>The view context.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.Infrastructure.Implementation.UrlResolver">
            <summary>
            Class used to resolve relative path for virtual path.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.Infrastructure.Implementation.UrlResolver.Resolve(System.String)">
            <summary>
            Returns the relative path for the specified virtual path.
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ScriptWrapper">
            <summary>
            Wrap the script for the jQuery ready/unload events.
            </summary>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptWrapper.OnPageLoadStart">
            <summary>
            Gets the on page load start.
            </summary>
            <value>The on page load start.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptWrapper.OnPageLoadEnd">
            <summary>
            Gets the on page load end.
            </summary>
            <value>The on page load end.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptWrapper.OnPageUnloadStart">
            <summary>
            Gets the on page unload start.
            </summary>
            <value>The on page unload start.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptWrapper.OnPageUnloadEnd">
            <summary>
            Gets the on page unload end.
            </summary>
            <value>The on page unload end.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.WebAssetGroupBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.WebAssetGroup"/>.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.WebAssetGroupBuilder.#ctor(Telerik.Web.Mvc.WebAssetGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.WebAssetGroupBuilder"/> class.
            </summary>
            <param name="assetItemGroup">The asset item group.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.WebAssetGroupBuilder.op_Implicit(Telerik.Web.Mvc.UI.WebAssetGroupBuilder)~Telerik.Web.Mvc.WebAssetGroup">
            <summary>
            Performs an implicit conversion from <see cref="T:Telerik.Web.Mvc.UI.WebAssetGroupBuilder"/> to <see cref="!:Telerik.Web.Mvc.UI.WebAssetGroup"/>.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.WebAssetGroupBuilder.ToGroup">
            <summary>
            Returns the internal group.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.WebAssetGroupBuilder.UseTelerikContentDeliveryNetwork(System.Boolean)">
            <summary>
            Sets whether Telerik content delivery network would be used.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.WebAssetGroupBuilder.ContentDeliveryNetworkUrl(System.String)">
            <summary>
            Sets the content delivery network URL.
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().ScriptRegistrar()
                      .DefaultGroup(group => group.ContentDeliveryNetworkUrl("http://www.example.com"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.WebAssetGroupBuilder.Enabled(System.Boolean)">
            <summary>
            Enables or disables the group
            </summary>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().ScriptRegistrar()
                      .DefaultGroup(group => group.Enabled((bool)ViewData["enabled"]))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.WebAssetGroupBuilder.Version(System.String)">
            <summary>
            Sets the version.
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().ScriptRegistrar()
                      .DefaultGroup(group => group.Version("1.1"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.WebAssetGroupBuilder.Compress(System.Boolean)">
            <summary>
            Sets whether the groups will be served as compressed. By default asset groups are not compressed.
            </summary>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().ScriptRegistrar()
                      .DefaultGroup(group => group.Compress(true))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.WebAssetGroupBuilder.CacheDurationInDays(System.Single)">
            <summary>
            Sets the caches the duration of this group.
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().ScriptRegistrar()
                      .DefaultGroup(group => group.CacheDurationInDays(365))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.WebAssetGroupBuilder.Combined(System.Boolean)">
            <summary>
            Sets whether the groups items will be served as combined.
            </summary>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().ScriptRegistrar()
                      .DefaultGroup(group => group.Combined(true))
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.WebAssetGroupBuilder.DefaultPath(System.String)">
            <summary>
            Sets the defaults path of the containing <see cref="T:Telerik.Web.Mvc.WebAsset"/>.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.WebAssetGroupBuilder.Add(System.String)">
            <summary>
            Adds the specified source as <see cref="T:Telerik.Web.Mvc.WebAsset"/>.
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().ScriptRegistrar()
                      .DefaultGroup(group =&gt; group.Add("script1.js"))
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ScriptRegistrar">
            <summary>
            Manages ASP.NET MVC javascript files and statements.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.UI.ScriptRegistrar.Key">
            <summary>
            Used to ensure that the same instance is used for the same HttpContext.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ScriptRegistrar.#ctor(Telerik.Web.Mvc.WebAssetCollection,System.Collections.Generic.IList{Telerik.Web.Mvc.UI.IScriptableComponent},System.Web.Mvc.ViewContext,Telerik.Web.Mvc.Infrastructure.IWebAssetCollectionResolver,Telerik.Web.Mvc.UI.ScriptWrapperBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ScriptRegistrar"/> class.
            </summary>
            <param name="scripts">The scripts.</param>
            <param name="scriptableComponents">The scriptable components.</param>
            <param name="viewContext">The view context.</param>
            <param name="assetItemMerger">The asset merger.</param>
            <param name="scriptWrapper">The script wrapper.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ScriptRegistrar.Register(Telerik.Web.Mvc.UI.IScriptableComponent)">
            <summary>
            Registers the scriptable component.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ScriptRegistrar.Render">
            <summary>
            Writes the scripts in the response.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ScriptRegistrar.Write(System.IO.TextWriter)">
            <summary>
            Writes all script source and script statements.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptRegistrar.FrameworkScriptFileNames">
            <summary>
            Gets the framework script file names.
            </summary>
            <value>The framework script file names.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptRegistrar.ValidationScriptFileNames">
            <summary>
            Gets the validation script file names.
            </summary>
            <value>The validation script file names.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptRegistrar.ExcludeFrameworkScripts">
            <summary>
            Gets or sets a value indicating whether [exclude framework scripts].
            </summary>
            <value>
            <c>true</c> if [exclude framework scripts]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptRegistrar.ExcludeValidationScripts">
            <summary>
            Gets or sets a value indicating whether [exclude validation scripts].
            </summary>
            <value>
            <c>true</c> if [exclude validation scripts]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptRegistrar.AssetHandlerPath">
            <summary>
            Gets or sets the asset handler path. Path must be a virtual path. The default value is set to <see cref="P:Telerik.Web.Mvc.WebAssetHttpHandler.DefaultPath"/>.
            </summary>
            <value>The asset handler path.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptRegistrar.DefaultGroup">
            <summary>
            Gets the default script group.
            </summary>
            <value>The default group.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptRegistrar.EnableGlobalization">
            <summary>
            Gets or sets a value indicating whether [enable globalization].
            </summary>
            <value><c>true</c> if [enable globalization]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptRegistrar.Scripts">
            <summary>
            Gets the scripts that will be rendered in the view.
            </summary>
            <value>The scripts.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptRegistrar.OnDocumentReadyActions">
            <summary>
            Gets the on document ready actions.
            </summary>
            <value>The on page load actions.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptRegistrar.OnDocumentReadyStatements">
            <summary>
            Gets the on document ready statements that is used in <code>RenderAction</code>.
            </summary>
            <value>The on page load actions.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptRegistrar.OnWindowUnloadActions">
            <summary>
            Gets the on window unload actions.
            </summary>
            <value>The on page unload actions.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptRegistrar.OnWindowUnloadStatements">
            <summary>
            Gets the on window unload statements.that is used in <code>RenderAction</code>.
            </summary>
            <value>The on page load actions.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptRegistrar.ViewContext">
            <summary>
            Gets the view context.
            </summary>
            <value>The view context.</value>
        </member>
        <member name="P:Telerik.Web.Mvc.UI.ScriptRegistrar.ScriptWrapper">
            <summary>
            Gets the script wrapper that is used to write the script statements.
            </summary>
            <value>The script wrapper.</value>
        </member>
        <member name="T:Telerik.Web.Mvc.UI.ScriptRegistrarBuilder">
            <summary>
            Defines the fluent interface for configuring the <see cref="T:Telerik.Web.Mvc.UI.ScriptRegistrar"/> component.
            </summary>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ScriptRegistrarBuilder.#ctor(Telerik.Web.Mvc.UI.ScriptRegistrar)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Web.Mvc.UI.ScriptRegistrarBuilder"/> class.
            </summary>
            <param name="scriptRegistrar">The script registrar.</param>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ScriptRegistrarBuilder.op_Implicit(Telerik.Web.Mvc.UI.ScriptRegistrarBuilder)~Telerik.Web.Mvc.UI.ScriptRegistrar">
            <summary>
            Performs an implicit conversion from <see cref="T:Telerik.Web.Mvc.UI.ScriptRegistrarBuilder"/> to <see cref="T:Telerik.Web.Mvc.UI.ScriptRegistrar"/>.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ScriptRegistrarBuilder.ToRegistrar">
            <summary>
            Returns the internal script registrar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ScriptRegistrarBuilder.AssetHandlerPath(System.String)">
            <summary>
            Sets the asset handler path. Path must be a virtual path.
            </summary>
            <param name="value">The value.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().ScriptRegistrar()
                       .AssetHandlerPath("~/asset.axd")
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ScriptRegistrarBuilder.DefaultGroup(System.Action{Telerik.Web.Mvc.UI.WebAssetGroupBuilder})">
            <summary>
            Configures the <see cref="P:Telerik.Web.Mvc.UI.ScriptRegistrar.DefaultGroup"/>.
            </summary>
            <param name="configureAction">The configure action.</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().ScriptRegistrar()
                       .DefaultGroup(group =&gt; group
                            .Add("script1.js")
                            .Add("script2.js")
                            .Combined(true)
                       )
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ScriptRegistrarBuilder.Globalization(System.Boolean)">
            <summary>
            Enables globalization support.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().ScriptRegistrar()
                       .Globalization(true)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ScriptRegistrarBuilder.jQuery(System.Boolean)">
            <summary>
            Includes the jQuery script files. By default jQuery JavaScript is included. 
            </summary>
            <remarks>
            Telerik Extensions for ASP.NET MVC require jQuery so make sure you manually include the JavaScript file
            if you disable the automatic including.
            </remarks>
            <param name="enable">if set to <c>true</c> [enable].</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().ScriptRegistrar()
                       .jQuery(false)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ScriptRegistrarBuilder.jQueryValidation(System.Boolean)">
            <summary>
            Sets whether the jQuery validation script files will be registered. By default jQuery Validation JavaScript is included, if needed.
            </summary>
            <remarks>
            Telerik Extensions for ASP.NET MVC use jQuery validation
            </remarks>
            <param name="enable">if set to <c>true</c> [enable].</param>
            <example>
            <code lang="CS">
            &lt;%= Html.Telerik().ScriptRegistrar()
                       .jQueryValidation(false)
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ScriptRegistrarBuilder.Scripts(System.Action{Telerik.Web.Mvc.UI.WebAssetCollectionBuilder})">
            <summary>
            Executes the provided delegate that is used to register the script files fluently in different groups.
            </summary>
            <param name="configureAction">The configure action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ScriptRegistrarBuilder.OnDocumentReady(System.Action)">
            <summary>
            Defines the inline handler executed when the DOM document is ready (using the $(document).ready jQuery event)
            </summary>
            <param name="onDocumentReadyAction">The action defining the inline handler</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().ScriptRegistrar()
                      .OnDocumentReady(() =>
                      {
                        %&gt;
                        function() {
                            alert("Document is ready");
                        }
                        &lt;%
                      })
                      .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ScriptRegistrarBuilder.OnDocumentReady(System.Func{System.Object,System.Object})">
            <summary>
            Defines the inline handler executed when the DOM document is ready (using the $(document).ready jQuery event)
            </summary>
            <param name="onDocumentReadyAction">The code of the inline handler wrapped in a text tag (Razor syntax)</param>
            <example>
            <code lang="CS">
            @(Html.Telerik().ScriptRegistrar()
                  .OnDocumentReady(
                    @&lt;text&gt;
                        alert("Document is ready");
                    &lt;/text&gt;
                  })
            )
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ScriptRegistrarBuilder.OnDocumentReady(System.String)">
            <summary>
            Appends the specified statement in $(document).ready jQuery event. This method should be
            used in <code>Html.RenderAction()</code>.
            </summary>
            <param name="statements">The statements.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ScriptRegistrarBuilder.OnWindowUnload(System.Action)">
            <summary>
            Defines the inline handler executed when the DOM window object is unloaded.
            </summary>
            <param name="onWindowUnloadAction">The action defining the inline handler</param>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().ScriptRegistrar()
                      .OnWindowUnload(() =>
                      {
                        %&gt;
                        function() {
                            // event handler code
                        }
                        &lt;%
                      })
                      .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ScriptRegistrarBuilder.OnWindowUnload(System.String)">
            <summary>
            Appends the specified statement window unload event. This method should be
            used in <code>Html.RenderAction()</code>.
            </summary>
            <param name="statements">The statements.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Web.Mvc.UI.ScriptRegistrarBuilder.Render">
            <summary>
            Renders the <see cref="T:Telerik.Web.Mvc.UI.ScriptRegistrar"/>
            </summary>
            <example>
            <code lang="CS">
            &lt;% Html.Telerik().ScriptRegistrar()
                      .Render();
            %&gt;
            </code>
            </example>
        </member>
        <member name="T:Telerik.Web.Mvc.WebAssetType">
            <summary>
            Web asset types.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.WebAssetType.None">
            <summary>
            None, used for internal purpose.
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.WebAssetType.StyleSheet">
            <summary>
            Stylesheet
            </summary>
        </member>
        <member name="F:Telerik.Web.Mvc.WebAssetType.JavaScript">
            <summary>
            Javascript
            </summary>
        </member>
    </members>
</doc>
